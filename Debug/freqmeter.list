
freqmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000849c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086bc  080086bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080086bc  080086bc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086bc  080086bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080086c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  200001e0  080088a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  080088a4  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172cf  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034dd  00000000  00000000  000374d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7b6  00000000  00000000  0003c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001358e  00000000  00000000  00057006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1e5  00000000  00000000  0006a594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000f77cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008590 	.word	0x08008590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008590 	.word	0x08008590

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd25 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f833 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8e5 	bl	8000338 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f88f 	bl	8000290 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000172:	f007 f8e7 	bl	8007344 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Wait 500ms for USB setup to complete before trying to send anything.
  HAL_Delay( 500 );
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 fd7b 	bl	8000c74 <HAL_Delay>

  __TIM2_CLK_ENABLE();
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <main+0x60>)
 8000180:	69db      	ldr	r3, [r3, #28]
 8000182:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <main+0x60>)
 8000184:	f043 0301 	orr.w	r3, r3, #1
 8000188:	61d3      	str	r3, [r2, #28]
 800018a:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <main+0x60>)
 800018c:	69db      	ldr	r3, [r3, #28]
 800018e:	f003 0301 	and.w	r3, r3, #1
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
  HAL_TIM_Base_Start_IT( &htim2 );
 8000196:	480a      	ldr	r0, [pc, #40]	; (80001c0 <main+0x64>)
 8000198:	f003 f90a 	bl	80033b0 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // simple LED blinking
//	  CDC_Transmit_FS( "X\r\n", 3 ); // USB test
//	  HAL_Delay( 1000 );

	  usbcdc_clear_screen();
 800019c:	f000 f9da 	bl	8000554 <usbcdc_clear_screen>
	  usbcdc_printfreq( freq, hold, mco_current );
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x68>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a08      	ldr	r2, [pc, #32]	; (80001c8 <main+0x6c>)
 80001a6:	7812      	ldrb	r2, [r2, #0]
 80001a8:	b2d1      	uxtb	r1, r2
 80001aa:	4a08      	ldr	r2, [pc, #32]	; (80001cc <main+0x70>)
 80001ac:	7812      	ldrb	r2, [r2, #0]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 f9da 	bl	8000568 <usbcdc_printfreq>
	  HAL_Delay( DISP_DELAY );
 80001b4:	2064      	movs	r0, #100	; 0x64
 80001b6:	f000 fd5d 	bl	8000c74 <HAL_Delay>
	  usbcdc_clear_screen();
 80001ba:	e7ef      	b.n	800019c <main+0x40>
 80001bc:	40021000 	.word	0x40021000
 80001c0:	2000053c 	.word	0x2000053c
 80001c4:	20000300 	.word	0x20000300
 80001c8:	20000308 	.word	0x20000308
 80001cc:	20000309 	.word	0x20000309

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b094      	sub	sp, #80	; 0x50
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f007 fd80 	bl	8007ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	2302      	movs	r3, #2
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fb9c 	bl	8002964 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000232:	f000 fb9d 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fe06 	bl	8002e64 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025e:	f000 fb87 	bl	8000970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000262:	2310      	movs	r3, #16
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f002 ff99 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000278:	f000 fb7a 	bl	8000970 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2000      	movs	r0, #0
 8000282:	f002 fed9 	bl	8003038 <HAL_RCC_MCOConfig>
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000296:	f107 030c 	add.w	r3, r7, #12
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ae:	4b21      	ldr	r3, [pc, #132]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d6:	4817      	ldr	r0, [pc, #92]	; (8000334 <MX_TIM2_Init+0xa4>)
 80002d8:	f003 f81a 	bl	8003310 <HAL_TIM_Base_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002e2:	f000 fb45 	bl	8000970 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80002e6:	2307      	movs	r3, #7
 80002e8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80002ea:	2370      	movs	r3, #112	; 0x70
 80002ec:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	4619      	mov	r1, r3
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <MX_TIM2_Init+0xa4>)
 8000302:	f003 f9af 	bl	8003664 <HAL_TIM_SlaveConfigSynchro>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800030c:	f000 fb30 	bl	8000970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000310:	2320      	movs	r3, #32
 8000312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_TIM2_Init+0xa4>)
 800031e:	f003 fb7d 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000328:	f000 fb22 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3720      	adds	r7, #32
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000053c 	.word	0x2000053c

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a23      	ldr	r2, [pc, #140]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	4812      	ldr	r0, [pc, #72]	; (80003e4 <MX_GPIO_Init+0xac>)
 800039c:	f000 ff20 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480a      	ldr	r0, [pc, #40]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003ba:	f000 fd8d 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c4:	2302      	movs	r3, #2
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_GPIO_Init+0xb0>)
 80003d4:	f000 fd80 	bl	8000ed8 <HAL_GPIO_Init>

}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800

080003ec <poll_usb_command>:

/* USER CODE BEGIN 4 */
// =============================================================================
void poll_usb_command( uint8_t one_num ) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	switch( one_num ) {
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3b41      	subs	r3, #65	; 0x41
 80003fa:	2b33      	cmp	r3, #51	; 0x33
 80003fc:	f200 809f 	bhi.w	800053e <poll_usb_command+0x152>
 8000400:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <poll_usb_command+0x1c>)
 8000402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000406:	bf00      	nop
 8000408:	080004d9 	.word	0x080004d9
 800040c:	0800053f 	.word	0x0800053f
 8000410:	08000501 	.word	0x08000501
 8000414:	080004e7 	.word	0x080004e7
 8000418:	0800053f 	.word	0x0800053f
 800041c:	0800053f 	.word	0x0800053f
 8000420:	0800053f 	.word	0x0800053f
 8000424:	08000527 	.word	0x08000527
 8000428:	0800053f 	.word	0x0800053f
 800042c:	0800053f 	.word	0x0800053f
 8000430:	0800053f 	.word	0x0800053f
 8000434:	0800053f 	.word	0x0800053f
 8000438:	08000507 	.word	0x08000507
 800043c:	0800053f 	.word	0x0800053f
 8000440:	0800053f 	.word	0x0800053f
 8000444:	0800053f 	.word	0x0800053f
 8000448:	0800053f 	.word	0x0800053f
 800044c:	0800053f 	.word	0x0800053f
 8000450:	0800053f 	.word	0x0800053f
 8000454:	080004f5 	.word	0x080004f5
 8000458:	0800053f 	.word	0x0800053f
 800045c:	0800053f 	.word	0x0800053f
 8000460:	0800053f 	.word	0x0800053f
 8000464:	0800053f 	.word	0x0800053f
 8000468:	0800053f 	.word	0x0800053f
 800046c:	0800053f 	.word	0x0800053f
 8000470:	0800053f 	.word	0x0800053f
 8000474:	0800053f 	.word	0x0800053f
 8000478:	0800053f 	.word	0x0800053f
 800047c:	0800053f 	.word	0x0800053f
 8000480:	0800053f 	.word	0x0800053f
 8000484:	0800053f 	.word	0x0800053f
 8000488:	080004d9 	.word	0x080004d9
 800048c:	0800053f 	.word	0x0800053f
 8000490:	08000501 	.word	0x08000501
 8000494:	080004e7 	.word	0x080004e7
 8000498:	0800053f 	.word	0x0800053f
 800049c:	0800053f 	.word	0x0800053f
 80004a0:	0800053f 	.word	0x0800053f
 80004a4:	08000527 	.word	0x08000527
 80004a8:	0800053f 	.word	0x0800053f
 80004ac:	0800053f 	.word	0x0800053f
 80004b0:	0800053f 	.word	0x0800053f
 80004b4:	0800053f 	.word	0x0800053f
 80004b8:	08000507 	.word	0x08000507
 80004bc:	0800053f 	.word	0x0800053f
 80004c0:	0800053f 	.word	0x0800053f
 80004c4:	0800053f 	.word	0x0800053f
 80004c8:	0800053f 	.word	0x0800053f
 80004cc:	0800053f 	.word	0x0800053f
 80004d0:	0800053f 	.word	0x0800053f
 80004d4:	080004f5 	.word	0x080004f5
	case 'A' :
	case 'a' : HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	481a      	ldr	r0, [pc, #104]	; (8000548 <poll_usb_command+0x15c>)
 80004e0:	f000 fe7e 	bl	80011e0 <HAL_GPIO_WritePin>
	           break;
 80004e4:	e02b      	b.n	800053e <poll_usb_command+0x152>
	case 'D' :
	case 'd' : HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <poll_usb_command+0x15c>)
 80004ee:	f000 fe77 	bl	80011e0 <HAL_GPIO_WritePin>
	           break;
 80004f2:	e024      	b.n	800053e <poll_usb_command+0x152>
	case 'T' :
	case 't' : HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4813      	ldr	r0, [pc, #76]	; (8000548 <poll_usb_command+0x15c>)
 80004fa:	f000 fe89 	bl	8001210 <HAL_GPIO_TogglePin>
	           break;
 80004fe:	e01e      	b.n	800053e <poll_usb_command+0x152>
	case 'C' :
	case 'c' : usbcdc_clear_screen();
 8000500:	f000 f828 	bl	8000554 <usbcdc_clear_screen>
	           break;
 8000504:	e01b      	b.n	800053e <poll_usb_command+0x152>
	case 'M' :
	case 'm' : if( ++mco_current > 3 ) mco_current = 0;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <poll_usb_command+0x160>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <poll_usb_command+0x160>)
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <poll_usb_command+0x160>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d902      	bls.n	8000520 <poll_usb_command+0x134>
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <poll_usb_command+0x160>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		       set_mco();
 8000520:	f000 f99c 	bl	800085c <set_mco>
	           break;
 8000524:	e00b      	b.n	800053e <poll_usb_command+0x152>
	case 'H' :
	case 'h' : hold = hold ? 0 : 1;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <poll_usb_command+0x164>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf0c      	ite	eq
 8000530:	2301      	moveq	r3, #1
 8000532:	2300      	movne	r3, #0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <poll_usb_command+0x164>)
 800053a:	701a      	strb	r2, [r3, #0]
	           break;
 800053c:	bf00      	nop
	}
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40011000 	.word	0x40011000
 800054c:	20000309 	.word	0x20000309
 8000550:	20000308 	.word	0x20000308

08000554 <usbcdc_clear_screen>:

void usbcdc_clear_screen(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	CDC_Transmit_FS( "\033c\r", 3 );
 8000558:	2103      	movs	r1, #3
 800055a:	4802      	ldr	r0, [pc, #8]	; (8000564 <usbcdc_clear_screen+0x10>)
 800055c:	f006 ffba 	bl	80074d4 <CDC_Transmit_FS>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	080085a8 	.word	0x080085a8

08000568 <usbcdc_printfreq>:

void usbcdc_printfreq( uint32_t frequency, uint8_t hold, uint8_t mco_val ) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	70bb      	strb	r3, [r7, #2]
 8000578:	466b      	mov	r3, sp
 800057a:	461e      	mov	r6, r3
	  uint16_t len1;
	  uint8_t len2;
	  uint8_t loop;
	  char *end_text1 = " MHz\r\n\r\n";
 800057c:	4bab      	ldr	r3, [pc, #684]	; (800082c <usbcdc_printfreq+0x2c4>)
 800057e:	623b      	str	r3, [r7, #32]
	  char *end_text2 = " MHz HOLD\r\n\r\n";
 8000580:	4bab      	ldr	r3, [pc, #684]	; (8000830 <usbcdc_printfreq+0x2c8>)
 8000582:	61fb      	str	r3, [r7, #28]
	  char *mco_text = "Clock output: ";
 8000584:	4bab      	ldr	r3, [pc, #684]	; (8000834 <usbcdc_printfreq+0x2cc>)
 8000586:	61bb      	str	r3, [r7, #24]
	  const uint8_t MAX_BUF_SIZE = 20;
 8000588:	2314      	movs	r3, #20
 800058a:	75fb      	strb	r3, [r7, #23]
	  char buffer1[ MAX_BUF_SIZE ];
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	3b01      	subs	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	7df8      	ldrb	r0, [r7, #23]
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	00cb      	lsls	r3, r1, #3
 80005a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005a6:	00c2      	lsls	r2, r0, #3
 80005a8:	7df8      	ldrb	r0, [r7, #23]
 80005aa:	f04f 0100 	mov.w	r1, #0
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	00cb      	lsls	r3, r1, #3
 80005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005bc:	00c2      	lsls	r2, r0, #3
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	3307      	adds	r3, #7
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	ebad 0d03 	sub.w	sp, sp, r3
 80005ca:	466b      	mov	r3, sp
 80005cc:	3300      	adds	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]

	  len1 = snprintf( buffer1, MAX_BUF_SIZE, "%4lu.", frequency / 1000000 );
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	7df9      	ldrb	r1, [r7, #23]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a98      	ldr	r2, [pc, #608]	; (8000838 <usbcdc_printfreq+0x2d0>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	0c9b      	lsrs	r3, r3, #18
 80005de:	4a97      	ldr	r2, [pc, #604]	; (800083c <usbcdc_printfreq+0x2d4>)
 80005e0:	f007 fb88 	bl	8007cf4 <sniprintf>
 80005e4:	4603      	mov	r3, r0
 80005e6:	84bb      	strh	r3, [r7, #36]	; 0x24
	  for( loop = 0; loop < len1; loop++ ) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005ee:	e00c      	b.n	800060a <usbcdc_printfreq+0xa2>
		  buffer[ loop ] = buffer1[ loop ];
 80005f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80005f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f8:	68f9      	ldr	r1, [r7, #12]
 80005fa:	5c89      	ldrb	r1, [r1, r2]
 80005fc:	4a90      	ldr	r2, [pc, #576]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80005fe:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len1; loop++ ) {
 8000600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000604:	3301      	adds	r3, #1
 8000606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800060a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800060e:	b29b      	uxth	r3, r3
 8000610:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000612:	429a      	cmp	r2, r3
 8000614:	d8ec      	bhi.n	80005f0 <usbcdc_printfreq+0x88>
	  }
	  len2 = snprintf( buffer1, MAX_BUF_SIZE, "%06lu", frequency % 1000000 );
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	7df9      	ldrb	r1, [r7, #23]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4b86      	ldr	r3, [pc, #536]	; (8000838 <usbcdc_printfreq+0x2d0>)
 800061e:	fba3 4302 	umull	r4, r3, r3, r2
 8000622:	0c9b      	lsrs	r3, r3, #18
 8000624:	4c87      	ldr	r4, [pc, #540]	; (8000844 <usbcdc_printfreq+0x2dc>)
 8000626:	fb04 f303 	mul.w	r3, r4, r3
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4a86      	ldr	r2, [pc, #536]	; (8000848 <usbcdc_printfreq+0x2e0>)
 800062e:	f007 fb61 	bl	8007cf4 <sniprintf>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  for( loop = 0; loop < len2; loop++ ) {
 8000638:	2300      	movs	r3, #0
 800063a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800063e:	e00e      	b.n	800065e <usbcdc_printfreq+0xf6>
		  buffer[ len1 + loop ] = buffer1[ loop ];
 8000640:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000644:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800064a:	440b      	add	r3, r1
 800064c:	68f9      	ldr	r1, [r7, #12]
 800064e:	5c89      	ldrb	r1, [r1, r2]
 8000650:	4a7b      	ldr	r2, [pc, #492]	; (8000840 <usbcdc_printfreq+0x2d8>)
 8000652:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len2; loop++ ) {
 8000654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000658:	3301      	adds	r3, #1
 800065a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800065e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000666:	429a      	cmp	r2, r3
 8000668:	d3ea      	bcc.n	8000640 <usbcdc_printfreq+0xd8>
	  }
	  len1 += len2;
 800066a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800066e:	b29a      	uxth	r2, r3
 8000670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000672:	4413      	add	r3, r2
 8000674:	84bb      	strh	r3, [r7, #36]	; 0x24
	  if( hold ) {
 8000676:	78fb      	ldrb	r3, [r7, #3]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d020      	beq.n	80006be <usbcdc_printfreq+0x156>
		  len2 = strlen( end_text2 );
 800067c:	69f8      	ldr	r0, [r7, #28]
 800067e:	f7ff fd65 	bl	800014c <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for( loop = 0; loop < len2; loop++ ) {
 8000688:	2300      	movs	r3, #0
 800068a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800068e:	e00f      	b.n	80006b0 <usbcdc_printfreq+0x148>
			  buffer[ len1 + loop ] = end_text2[ loop ];
 8000690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000694:	69fa      	ldr	r2, [r7, #28]
 8000696:	441a      	add	r2, r3
 8000698:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800069a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800069e:	440b      	add	r3, r1
 80006a0:	7811      	ldrb	r1, [r2, #0]
 80006a2:	4a67      	ldr	r2, [pc, #412]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80006a4:	54d1      	strb	r1, [r2, r3]
		  for( loop = 0; loop < len2; loop++ ) {
 80006a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3e9      	bcc.n	8000690 <usbcdc_printfreq+0x128>
 80006bc:	e01f      	b.n	80006fe <usbcdc_printfreq+0x196>
		  }
	  }
	  else {
		  len2 = strlen( end_text1 );
 80006be:	6a38      	ldr	r0, [r7, #32]
 80006c0:	f7ff fd44 	bl	800014c <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for( loop = 0; loop < len2; loop++ ) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006d0:	e00f      	b.n	80006f2 <usbcdc_printfreq+0x18a>
			  buffer[ len1 + loop ] = end_text1[ loop ];
 80006d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d6:	6a3a      	ldr	r2, [r7, #32]
 80006d8:	441a      	add	r2, r3
 80006da:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e0:	440b      	add	r3, r1
 80006e2:	7811      	ldrb	r1, [r2, #0]
 80006e4:	4a56      	ldr	r2, [pc, #344]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80006e6:	54d1      	strb	r1, [r2, r3]
		  for( loop = 0; loop < len2; loop++ ) {
 80006e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006ec:	3301      	adds	r3, #1
 80006ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d3e9      	bcc.n	80006d2 <usbcdc_printfreq+0x16a>
		  }
	  }
	  len1 += len2;
 80006fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000702:	b29a      	uxth	r2, r3
 8000704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000706:	4413      	add	r3, r2
 8000708:	84bb      	strh	r3, [r7, #36]	; 0x24
	  len2 = strlen( mco_text );
 800070a:	69b8      	ldr	r0, [r7, #24]
 800070c:	f7ff fd1e 	bl	800014c <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  for( loop = 0; loop < len2; loop++ ) {
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800071c:	e00f      	b.n	800073e <usbcdc_printfreq+0x1d6>
		  buffer[ len1 + loop ] = mco_text[ loop ];
 800071e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000722:	69ba      	ldr	r2, [r7, #24]
 8000724:	441a      	add	r2, r3
 8000726:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072c:	440b      	add	r3, r1
 800072e:	7811      	ldrb	r1, [r2, #0]
 8000730:	4a43      	ldr	r2, [pc, #268]	; (8000840 <usbcdc_printfreq+0x2d8>)
 8000732:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len2; loop++ ) {
 8000734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000738:	3301      	adds	r3, #1
 800073a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800073e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000746:	429a      	cmp	r2, r3
 8000748:	d3e9      	bcc.n	800071e <usbcdc_printfreq+0x1b6>
	  }
	  len1 += len2;
 800074a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800074e:	b29a      	uxth	r2, r3
 8000750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000752:	4413      	add	r3, r2
 8000754:	84bb      	strh	r3, [r7, #36]	; 0x24
	  buffer[ len1++ ] = 0;
 8000756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	84ba      	strh	r2, [r7, #36]	; 0x24
 800075c:	461a      	mov	r2, r3
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <usbcdc_printfreq+0x2d8>)
 8000760:	2100      	movs	r1, #0
 8000762:	5499      	strb	r1, [r3, r2]
	  switch( mco_val ) {
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d855      	bhi.n	8000816 <usbcdc_printfreq+0x2ae>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <usbcdc_printfreq+0x208>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	080007a1 	.word	0x080007a1
 8000778:	080007c7 	.word	0x080007c7
 800077c:	080007ef 	.word	0x080007ef
	  	  case 0 : strcat( buffer, "OFF\r\n");
 8000780:	482f      	ldr	r0, [pc, #188]	; (8000840 <usbcdc_printfreq+0x2d8>)
 8000782:	f7ff fce3 	bl	800014c <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <usbcdc_printfreq+0x2d8>)
 800078c:	4413      	add	r3, r2
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <usbcdc_printfreq+0x2e4>)
 8000790:	6810      	ldr	r0, [r2, #0]
 8000792:	6018      	str	r0, [r3, #0]
 8000794:	8892      	ldrh	r2, [r2, #4]
 8000796:	809a      	strh	r2, [r3, #4]
				   len1 += 5;
 8000798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800079a:	3305      	adds	r3, #5
 800079c:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 800079e:	e03a      	b.n	8000816 <usbcdc_printfreq+0x2ae>
	  	  case 1 : strcat( buffer, "PLL/2 = 36MHz\r\n");
 80007a0:	4827      	ldr	r0, [pc, #156]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007a2:	f7ff fcd3 	bl	800014c <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007ac:	4413      	add	r3, r2
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <usbcdc_printfreq+0x2e8>)
 80007b0:	461c      	mov	r4, r3
 80007b2:	4615      	mov	r5, r2
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	6020      	str	r0, [r4, #0]
 80007b8:	6061      	str	r1, [r4, #4]
 80007ba:	60a2      	str	r2, [r4, #8]
 80007bc:	60e3      	str	r3, [r4, #12]
				   len1 += 15;
 80007be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007c0:	330f      	adds	r3, #15
 80007c2:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 80007c4:	e027      	b.n	8000816 <usbcdc_printfreq+0x2ae>
	  	  case 2 : strcat( buffer, "HSI = 8MHz\r\n");
 80007c6:	481e      	ldr	r0, [pc, #120]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007c8:	f7ff fcc0 	bl	800014c <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007d2:	4413      	add	r3, r2
 80007d4:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <usbcdc_printfreq+0x2ec>)
 80007d6:	461c      	mov	r4, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007dc:	6020      	str	r0, [r4, #0]
 80007de:	6061      	str	r1, [r4, #4]
 80007e0:	60a2      	str	r2, [r4, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	7323      	strb	r3, [r4, #12]
				   len1 += 12;
 80007e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e8:	330c      	adds	r3, #12
 80007ea:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 80007ec:	e013      	b.n	8000816 <usbcdc_printfreq+0x2ae>
	  	  case 3 : strcat( buffer, "HSE = 8MHz\r\n");
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007f0:	f7ff fcac 	bl	800014c <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <usbcdc_printfreq+0x2d8>)
 80007fa:	4413      	add	r3, r2
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <usbcdc_printfreq+0x2f0>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4613      	mov	r3, r2
 8000802:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000804:	6020      	str	r0, [r4, #0]
 8000806:	6061      	str	r1, [r4, #4]
 8000808:	60a2      	str	r2, [r4, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	7323      	strb	r3, [r4, #12]
				   len1 += 12;
 800080e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000810:	330c      	adds	r3, #12
 8000812:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 8000814:	bf00      	nop
	  }
	  CDC_Transmit_FS( buffer, len1);
 8000816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <usbcdc_printfreq+0x2d8>)
 800081c:	f006 fe5a 	bl	80074d4 <CDC_Transmit_FS>
 8000820:	46b5      	mov	sp, r6
}
 8000822:	bf00      	nop
 8000824:	372c      	adds	r7, #44	; 0x2c
 8000826:	46bd      	mov	sp, r7
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	bf00      	nop
 800082c:	080085ac 	.word	0x080085ac
 8000830:	080085b8 	.word	0x080085b8
 8000834:	080085c8 	.word	0x080085c8
 8000838:	431bde83 	.word	0x431bde83
 800083c:	080085d8 	.word	0x080085d8
 8000840:	200001fc 	.word	0x200001fc
 8000844:	000f4240 	.word	0x000f4240
 8000848:	080085e0 	.word	0x080085e0
 800084c:	080085e8 	.word	0x080085e8
 8000850:	080085f0 	.word	0x080085f0
 8000854:	08008600 	.word	0x08008600
 8000858:	08008610 	.word	0x08008610

0800085c <set_mco>:

void set_mco() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	switch( mco_current ) {
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <set_mco+0x70>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d826      	bhi.n	80008b6 <set_mco+0x5a>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <set_mco+0x14>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000881 	.word	0x08000881
 8000874:	0800088d 	.word	0x0800088d
 8000878:	0800089b 	.word	0x0800089b
 800087c:	080008a9 	.word	0x080008a9
	case 0 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1 ); // no MCO
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f002 fbd7 	bl	8003038 <HAL_RCC_MCOConfig>
	         break;
 800088a:	e01d      	b.n	80008c8 <set_mco+0x6c>
	case 1 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1 ); // PLLCLK / 2 = 36MHz
 800088c:	2200      	movs	r2, #0
 800088e:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000892:	2000      	movs	r0, #0
 8000894:	f002 fbd0 	bl	8003038 <HAL_RCC_MCOConfig>
	         break;
 8000898:	e016      	b.n	80008c8 <set_mco+0x6c>
	case 2 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1 ); // HSI ~8MHz
 800089a:	2200      	movs	r2, #0
 800089c:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 80008a0:	2000      	movs	r0, #0
 80008a2:	f002 fbc9 	bl	8003038 <HAL_RCC_MCOConfig>
	         break;
 80008a6:	e00f      	b.n	80008c8 <set_mco+0x6c>
	case 3 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1 ); // HSE ~8MHz
 80008a8:	2200      	movs	r2, #0
 80008aa:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 fbc2 	bl	8003038 <HAL_RCC_MCOConfig>
	         break;
 80008b4:	e008      	b.n	80008c8 <set_mco+0x6c>
	default : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1 );
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f002 fbbc 	bl	8003038 <HAL_RCC_MCOConfig>
	          mco_current = 0;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <set_mco+0x70>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	         break;
 80008c6:	bf00      	nop
	}
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000309 	.word	0x20000309

080008d0 <tim2_interrupt>:

// =============================================================================

void tim2_interrupt(void) {
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    freq_scratch += 65536; /* TIM2 is 16-bit and overflows every 65536 events. */
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <tim2_interrupt+0x18>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80008dc:	4a02      	ldr	r2, [pc, #8]	; (80008e8 <tim2_interrupt+0x18>)
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000304 	.word	0x20000304

080008ec <sys_tick_interrupt>:

void sys_tick_interrupt(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  systick_ms++;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <sys_tick_interrupt+0x68>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <sys_tick_interrupt+0x68>)
 80008f8:	6013      	str	r3, [r2, #0]

  if (systick_ms % 1000 == 0) {
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <sys_tick_interrupt+0x68>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <sys_tick_interrupt+0x6c>)
 8000900:	fba3 1302 	umull	r1, r3, r3, r2
 8000904:	099b      	lsrs	r3, r3, #6
 8000906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11c      	bne.n	800094e <sys_tick_interrupt+0x62>
    /* Scratch pad to finalized result */
    if( ! hold ) {
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <sys_tick_interrupt+0x70>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d107      	bne.n	800092e <sys_tick_interrupt+0x42>
      freq = freq_scratch + __HAL_TIM_GetCounter( &htim2 );
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <sys_tick_interrupt+0x74>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <sys_tick_interrupt+0x78>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4413      	add	r3, r2
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <sys_tick_interrupt+0x7c>)
 800092c:	6013      	str	r3, [r2, #0]
    }
    // Reset the counter. This will generate one extra overflow for next measurement.
    // In case of nothing got counted, manually generate a reset to keep consistency.
    __HAL_TIM_SetCounter( &htim2, 1);
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <sys_tick_interrupt+0x74>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2201      	movs	r2, #1
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter( &htim2, 0);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <sys_tick_interrupt+0x74>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
    freq_scratch = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <sys_tick_interrupt+0x78>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <sys_tick_interrupt+0x80>)
 800094a:	f000 fc61 	bl	8001210 <HAL_GPIO_TogglePin>
  }
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002fc 	.word	0x200002fc
 8000958:	10624dd3 	.word	0x10624dd3
 800095c:	20000308 	.word	0x20000308
 8000960:	2000053c 	.word	0x2000053c
 8000964:	20000304 	.word	0x20000304
 8000968:	20000300 	.word	0x20000300
 800096c:	40011000 	.word	0x40011000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_MspInit+0x5c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <HAL_MspInit+0x5c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_MspInit+0x5c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_MspInit+0x5c>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_MspInit+0x5c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_MspInit+0x5c>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_MspInit+0x60>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_MspInit+0x60>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010000 	.word	0x40010000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fe:	d12b      	bne.n	8000a58 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	61d3      	str	r3, [r2, #28]
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_TIM_Base_MspInit+0x80>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_TIM_Base_MspInit+0x84>)
 8000a44:	f000 fa48 	bl	8000ed8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f000 fa0c 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fa25 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <BusFault_Handler+0x4>

08000a86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <UsageFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	sys_tick_interrupt();
 8000ab4:	f7ff ff1a 	bl	80008ec <sys_tick_interrupt>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8c0 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ac6:	f000 fced 	bl	80014a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000121c 	.word	0x2000121c

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	tim2_interrupt();
 8000ad8:	f7ff fefa 	bl	80008d0 <tim2_interrupt>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM2_IRQHandler+0x14>)
 8000ade:	f002 fcb9 	bl	8003454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000053c 	.word	0x2000053c

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f007 f8b8 	bl	8007c90 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20005000 	.word	0x20005000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	2000030c 	.word	0x2000030c
 8000b54:	20001518 	.word	0x20001518

08000b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffe5 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f007 f885 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff fae3 	bl	800015c <main>
  bx lr
 8000b96:	4770      	bx	lr
  ldr r3, =_sidata
 8000b98:	080086c4 	.word	0x080086c4
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ba0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000ba4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000ba8:	20001518 	.word	0x20001518

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x28>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f947 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f808 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fed6 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f95f 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f927 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000584 	.word	0x20000584

08000c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000584 	.word	0x20000584

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff fff0 	bl	8000c60 <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffe0 	bl	8000c60 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4906      	ldr	r1, [pc, #24]	; (8000d54 <__NVIC_EnableIRQ+0x34>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff90 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff2d 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff42 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff90 	bl	8000dac <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5f 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff35 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e169      	b.n	80011c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eec:	2201      	movs	r2, #1
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8158 	bne.w	80011ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a9a      	ldr	r2, [pc, #616]	; (8001178 <HAL_GPIO_Init+0x2a0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d05e      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
 8000f14:	4a98      	ldr	r2, [pc, #608]	; (8001178 <HAL_GPIO_Init+0x2a0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d875      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f1a:	4a98      	ldr	r2, [pc, #608]	; (800117c <HAL_GPIO_Init+0x2a4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d058      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
 8000f20:	4a96      	ldr	r2, [pc, #600]	; (800117c <HAL_GPIO_Init+0x2a4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d86f      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f26:	4a96      	ldr	r2, [pc, #600]	; (8001180 <HAL_GPIO_Init+0x2a8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d052      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
 8000f2c:	4a94      	ldr	r2, [pc, #592]	; (8001180 <HAL_GPIO_Init+0x2a8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d869      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f32:	4a94      	ldr	r2, [pc, #592]	; (8001184 <HAL_GPIO_Init+0x2ac>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d04c      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <HAL_GPIO_Init+0x2ac>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d863      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f3e:	4a92      	ldr	r2, [pc, #584]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d046      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
 8000f44:	4a90      	ldr	r2, [pc, #576]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d85d      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f4a:	2b12      	cmp	r3, #18
 8000f4c:	d82a      	bhi.n	8000fa4 <HAL_GPIO_Init+0xcc>
 8000f4e:	2b12      	cmp	r3, #18
 8000f50:	d859      	bhi.n	8001006 <HAL_GPIO_Init+0x12e>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <HAL_GPIO_Init+0x80>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	08000fad 	.word	0x08000fad
 8000f60:	08000fbf 	.word	0x08000fbf
 8000f64:	08001001 	.word	0x08001001
 8000f68:	08001007 	.word	0x08001007
 8000f6c:	08001007 	.word	0x08001007
 8000f70:	08001007 	.word	0x08001007
 8000f74:	08001007 	.word	0x08001007
 8000f78:	08001007 	.word	0x08001007
 8000f7c:	08001007 	.word	0x08001007
 8000f80:	08001007 	.word	0x08001007
 8000f84:	08001007 	.word	0x08001007
 8000f88:	08001007 	.word	0x08001007
 8000f8c:	08001007 	.word	0x08001007
 8000f90:	08001007 	.word	0x08001007
 8000f94:	08001007 	.word	0x08001007
 8000f98:	08001007 	.word	0x08001007
 8000f9c:	08000fb5 	.word	0x08000fb5
 8000fa0:	08000fc9 	.word	0x08000fc9
 8000fa4:	4a79      	ldr	r2, [pc, #484]	; (800118c <HAL_GPIO_Init+0x2b4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000faa:	e02c      	b.n	8001006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e029      	b.n	8001008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e024      	b.n	8001008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e01f      	b.n	8001008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	330c      	adds	r3, #12
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e01a      	b.n	8001008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e013      	b.n	8001008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d105      	bne.n	8000ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	611a      	str	r2, [r3, #16]
          break;
 8000ff2:	e009      	b.n	8001008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	615a      	str	r2, [r3, #20]
          break;
 8000ffe:	e003      	b.n	8001008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x130>
          break;
 8001006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2bff      	cmp	r3, #255	; 0xff
 800100c:	d801      	bhi.n	8001012 <HAL_GPIO_Init+0x13a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	e001      	b.n	8001016 <HAL_GPIO_Init+0x13e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3304      	adds	r3, #4
 8001016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2bff      	cmp	r3, #255	; 0xff
 800101c:	d802      	bhi.n	8001024 <HAL_GPIO_Init+0x14c>
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x152>
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3b08      	subs	r3, #8
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	210f      	movs	r1, #15
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	6a39      	ldr	r1, [r7, #32]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	431a      	orrs	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80b1 	beq.w	80011ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001058:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x2b8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x2b8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x2b8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x2bc>)
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a40      	ldr	r2, [pc, #256]	; (8001198 <HAL_GPIO_Init+0x2c0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d013      	beq.n	80010c4 <HAL_GPIO_Init+0x1ec>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3f      	ldr	r2, [pc, #252]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d00d      	beq.n	80010c0 <HAL_GPIO_Init+0x1e8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <HAL_GPIO_Init+0x2c8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_Init+0x1e0>
 80010b4:	2303      	movs	r3, #3
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010b8:	2304      	movs	r3, #4
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010c4:	2300      	movs	r3, #0
 80010c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d6:	492f      	ldr	r1, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x2bc>)
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	492c      	ldr	r1, [pc, #176]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	4928      	ldr	r1, [pc, #160]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001108:	4013      	ands	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4922      	ldr	r1, [pc, #136]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	43db      	mvns	r3, r3
 800112e:	491e      	ldr	r1, [pc, #120]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001130:	4013      	ands	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	4918      	ldr	r1, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	43db      	mvns	r3, r3
 8001156:	4914      	ldr	r1, [pc, #80]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001158:	4013      	ands	r3, r2
 800115a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d021      	beq.n	80011ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	60cb      	str	r3, [r1, #12]
 8001174:	e021      	b.n	80011ba <HAL_GPIO_Init+0x2e2>
 8001176:	bf00      	nop
 8001178:	10320000 	.word	0x10320000
 800117c:	10310000 	.word	0x10310000
 8001180:	10220000 	.word	0x10220000
 8001184:	10210000 	.word	0x10210000
 8001188:	10120000 	.word	0x10120000
 800118c:	10110000 	.word	0x10110000
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000
 8001198:	40010800 	.word	0x40010800
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	40011000 	.word	0x40011000
 80011a4:	40011400 	.word	0x40011400
 80011a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_GPIO_Init+0x304>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4909      	ldr	r1, [pc, #36]	; (80011dc <HAL_GPIO_Init+0x304>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	3301      	adds	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f47f ae8e 	bne.w	8000eec <HAL_GPIO_Init+0x14>
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	041a      	lsls	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43d9      	mvns	r1, r3
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	400b      	ands	r3, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	611a      	str	r2, [r3, #16]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001244:	b08b      	sub	sp, #44	; 0x2c
 8001246:	af06      	add	r7, sp, #24
 8001248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0fd      	b.n	8001450 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d106      	bne.n	800126e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f006 fa67 	bl	800773c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2203      	movs	r2, #3
 8001272:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fc64 	bl	8003b48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	687e      	ldr	r6, [r7, #4]
 8001288:	466d      	mov	r5, sp
 800128a:	f106 0410 	add.w	r4, r6, #16
 800128e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	602b      	str	r3, [r5, #0]
 8001296:	1d33      	adds	r3, r6, #4
 8001298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f002 fc2e 	bl	8003afc <USB_CoreInit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2202      	movs	r2, #2
 80012aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0ce      	b.n	8001450 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fc5f 	bl	8003b7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e04c      	b.n	800135e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	3301      	adds	r3, #1
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	b298      	uxth	r0, r3
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	3336      	adds	r3, #54	; 0x36
 8001302:	4602      	mov	r2, r0
 8001304:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3303      	adds	r3, #3
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	3338      	adds	r3, #56	; 0x38
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	333c      	adds	r3, #60	; 0x3c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3340      	adds	r3, #64	; 0x40
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3ad      	bcc.n	80012c4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e044      	b.n	80013f8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3b5      	bcc.n	800136e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	1d33      	adds	r3, r6, #4
 800141a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f002 fbb9 	bl	8003b94 <USB_DevInit>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00d      	b.n	8001450 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fb53 	bl	8005af4 <USB_DevDisconnect>

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001458 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_PCD_Start+0x16>
 800146a:	2302      	movs	r3, #2
 800146c:	e016      	b.n	800149c <HAL_PCD_Start+0x44>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fb4e 	bl	8003b1c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001480:	2101      	movs	r1, #1
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f006 fbcd 	bl	8007c22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fb27 	bl	8005ae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fb29 	bl	8005b08 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c0:	d102      	bne.n	80014c8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fb61 	bl	8001b8a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fb1b 	bl	8005b08 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d112      	bne.n	8001504 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f006 f99b 	bl	8007832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f925 	bl	800174e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fafd 	bl	8005b08 <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001518:	d10b      	bne.n	8001532 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fae6 	bl	8005b08 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001546:	d10b      	bne.n	8001560 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800155a:	b292      	uxth	r2, r2
 800155c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 facf 	bl	8005b08 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d126      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0204 	bic.w	r2, r2, #4
 8001588:	b292      	uxth	r2, r2
 800158a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0208 	bic.w	r2, r2, #8
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f006 f97c 	bl	80078a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fa9d 	bl	8005b08 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d8:	f040 8084 	bne.w	80016e4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	77fb      	strb	r3, [r7, #31]
 80015e0:	e011      	b.n	8001606 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	441a      	add	r2, r3
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	8812      	ldrh	r2, [r2, #0]
 80015f2:	b292      	uxth	r2, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	f107 0120 	add.w	r1, r7, #32
 80015fa:	440b      	add	r3, r1
 80015fc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001600:	7ffb      	ldrb	r3, [r7, #31]
 8001602:	3301      	adds	r3, #1
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d9ea      	bls.n	80015e2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800163c:	bf00      	nop
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001646:	b29b      	uxth	r3, r3
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f6      	beq.n	800163e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	77fb      	strb	r3, [r7, #31]
 800166c:	e010      	b.n	8001690 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4611      	mov	r1, r2
 8001676:	7ffa      	ldrb	r2, [r7, #31]
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	440a      	add	r2, r1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	f107 0120 	add.w	r1, r7, #32
 8001682:	440b      	add	r3, r1
 8001684:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001688:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	3301      	adds	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d9eb      	bls.n	800166e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0208 	orr.w	r2, r2, #8
 80016a8:	b292      	uxth	r2, r2
 80016aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0204 	orr.w	r2, r2, #4
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 f8c6 	bl	8007870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fa0d 	bl	8005b08 <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f8:	d10e      	bne.n	8001718 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f006 f87f 	bl	8007816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f004 f9f3 	bl	8005b08 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172c:	d10b      	bne.n	8001746 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_PCD_SetAddress+0x1a>
 8001764:	2302      	movs	r3, #2
 8001766:	e013      	b.n	8001790 <HAL_PCD_SetAddress+0x42>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f004 f99a 	bl	8005aba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	460b      	mov	r3, r1
 80017ac:	803b      	strh	r3, [r7, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da0e      	bge.n	80017dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	705a      	strb	r2, [r3, #1]
 80017da:	e00e      	b.n	80017fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0207 	and.w	r2, r3, #7
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001806:	883a      	ldrh	r2, [r7, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	78ba      	ldrb	r2, [r7, #2]
 8001810:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d102      	bne.n	8001830 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_PCD_EP_Open+0xa6>
 800183a:	2302      	movs	r3, #2
 800183c:	e00e      	b.n	800185c <HAL_PCD_EP_Open+0xc4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 f9c1 	bl	8003bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800185a:	7afb      	ldrb	r3, [r7, #11]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da0e      	bge.n	8001896 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	705a      	strb	r2, [r3, #1]
 8001894:	e00e      	b.n	80018b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	f003 0207 	and.w	r2, r3, #7
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_EP_Close+0x6a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e00e      	b.n	80018ec <HAL_PCD_EP_Close+0x88>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fce3 	bl	80042a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	f003 0207 	and.w	r2, r3, #7
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2200      	movs	r2, #0
 8001932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	b2da      	uxtb	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6979      	ldr	r1, [r7, #20]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fe95 	bl	8004680 <USB_EPStartXfer>
 8001956:	e005      	b.n	8001964 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fe8e 	bl	8004680 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001990:	681b      	ldr	r3, [r3, #0]
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fe3b 	bl	8004680 <USB_EPStartXfer>
 8001a0a:	e005      	b.n	8001a18 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6979      	ldr	r1, [r7, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fe34 	bl	8004680 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d901      	bls.n	8001a40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e04c      	b.n	8001ada <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da0e      	bge.n	8001a66 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	705a      	strb	r2, [r3, #1]
 8001a64:	e00c      	b.n	8001a80 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_EP_SetStall+0x7e>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e01c      	b.n	8001ada <HAL_PCD_EP_SetStall+0xb8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ff06 	bl	80058c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f004 f82b 	bl	8005b26 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 020f 	and.w	r2, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d901      	bls.n	8001b00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e040      	b.n	8001b82 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da0e      	bge.n	8001b26 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	e00e      	b.n	8001b44 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 0207 	and.w	r2, r3, #7
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_EP_ClrStall+0x82>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e00e      	b.n	8001b82 <HAL_PCD_EP_ClrStall+0xa0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fef4 	bl	8005960 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08e      	sub	sp, #56	; 0x38
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b92:	e2df      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001baa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8158 	bne.w	8001e64 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d152      	bne.n	8001c64 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bce:	81fb      	strh	r3, [r7, #14]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f005 fddc 	bl	80077e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 828e 	beq.w	8002154 <PCD_EP_ISR_Handler+0x5ca>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 8289 	bne.w	8002154 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c62:	e277      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d034      	beq.n	8001ce8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	3306      	adds	r3, #6
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f003 ff82 	bl	8005bc6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cce:	4013      	ands	r3, r2
 8001cd0:	823b      	strh	r3, [r7, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	8a3a      	ldrh	r2, [r7, #16]
 8001cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f005 fd51 	bl	8007788 <HAL_PCD_SetupStageCallback>
 8001ce6:	e235      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ce8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f280 8231 	bge.w	8002154 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cfe:	4013      	ands	r3, r2
 8001d00:	83bb      	strh	r3, [r7, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	8bba      	ldrh	r2, [r7, #28]
 8001d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	3306      	adds	r3, #6
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d019      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x1ee>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	6959      	ldr	r1, [r3, #20]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f003 ff32 	bl	8005bc6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f005 fd1a 	bl	80077ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d112      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x23c>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	e02f      	b.n	8001e26 <PCD_EP_ISR_Handler+0x29c>
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b3e      	cmp	r3, #62	; 0x3e
 8001dcc:	d813      	bhi.n	8001df6 <PCD_EP_ISR_Handler+0x26c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x25e>
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	3301      	adds	r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e017      	b.n	8001e26 <PCD_EP_ISR_Handler+0x29c>
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <PCD_EP_ISR_Handler+0x286>
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	827b      	strh	r3, [r7, #18]
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e3e:	827b      	strh	r3, [r7, #18]
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e46:	827b      	strh	r3, [r7, #18]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	8a7b      	ldrh	r3, [r7, #18]
 8001e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	8013      	strh	r3, [r2, #0]
 8001e62:	e177      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f280 80ea 	bge.w	8002054 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e96:	4013      	ands	r3, r2
 8001e98:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001eb2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	7b1b      	ldrb	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d122      	bne.n	8001f16 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001efa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8087 	beq.w	8002010 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6959      	ldr	r1, [r3, #20]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	88da      	ldrh	r2, [r3, #6]
 8001f0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f10:	f003 fe59 	bl	8005bc6 <USB_ReadPMA>
 8001f14:	e07c      	b.n	8002010 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	78db      	ldrb	r3, [r3, #3]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d108      	bne.n	8001f30 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f20:	461a      	mov	r2, r3
 8001f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f923 	bl	8002170 <HAL_PCD_EP_DB_Receive>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f2e:	e06f      	b.n	8002010 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d021      	beq.n	8001fce <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d02a      	beq.n	8002010 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	6959      	ldr	r1, [r3, #20]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	891a      	ldrh	r2, [r3, #8]
 8001fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fc8:	f003 fdfd 	bl	8005bc6 <USB_ReadPMA>
 8001fcc:	e020      	b.n	8002010 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	6959      	ldr	r1, [r3, #20]
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	895a      	ldrh	r2, [r3, #10]
 800200a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800200c:	f003 fddb 	bl	8005bc6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002022:	441a      	add	r2, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <PCD_EP_ISR_Handler+0x4b0>
 8002030:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d206      	bcs.n	8002048 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f005 fbb3 	bl	80077ac <HAL_PCD_DataOutStageCallback>
 8002046:	e005      	b.n	8002054 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fb16 	bl	8004680 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07a      	beq.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800205e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	843b      	strh	r3, [r7, #32]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	78db      	ldrb	r3, [r3, #3]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d108      	bne.n	80020c4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d146      	bne.n	8002148 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d141      	bne.n	8002148 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	3302      	adds	r3, #2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	8bfb      	ldrh	r3, [r7, #30]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d906      	bls.n	8002106 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	8bfb      	ldrh	r3, [r7, #30]
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	619a      	str	r2, [r3, #24]
 8002104:	e002      	b.n	800210c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fb61 	bl	80077e2 <HAL_PCD_DataInStageCallback>
 8002120:	e018      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	8bfb      	ldrh	r3, [r7, #30]
 8002128:	441a      	add	r2, r3
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	8bfb      	ldrh	r3, [r7, #30]
 8002134:	441a      	add	r2, r3
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002140:	4618      	mov	r0, r3
 8002142:	f002 fa9d 	bl	8004680 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002146:	e005      	b.n	8002154 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002148:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214a:	461a      	mov	r2, r3
 800214c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f91b 	bl	800238a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21b      	sxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f6ff ad17 	blt.w	8001b94 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3738      	adds	r7, #56	; 0x38
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d07e      	beq.n	8002286 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	3302      	adds	r3, #2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d306      	bcc.n	80021ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	619a      	str	r2, [r3, #24]
 80021c8:	e002      	b.n	80021d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d123      	bne.n	8002220 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	833b      	strh	r3, [r7, #24]
 80021f4:	8b3b      	ldrh	r3, [r7, #24]
 80021f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021fa:	833b      	strh	r3, [r7, #24]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	8b3b      	ldrh	r3, [r7, #24]
 800220c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	b29b      	uxth	r3, r3
 800221e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01f      	beq.n	800226a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002244:	82fb      	strh	r3, [r7, #22]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800225a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002266:	b29b      	uxth	r3, r3
 8002268:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800226a:	8b7b      	ldrh	r3, [r7, #26]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8087 	beq.w	8002380 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6959      	ldr	r1, [r3, #20]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	891a      	ldrh	r2, [r3, #8]
 800227e:	8b7b      	ldrh	r3, [r7, #26]
 8002280:	f003 fca1 	bl	8005bc6 <USB_ReadPMA>
 8002284:	e07c      	b.n	8002380 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3306      	adds	r3, #6
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d306      	bcc.n	80022c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	8b7b      	ldrh	r3, [r7, #26]
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	e002      	b.n	80022ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d123      	bne.n	800231e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	83fb      	strh	r3, [r7, #30]
 80022f2:	8bfb      	ldrh	r3, [r7, #30]
 80022f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f8:	83fb      	strh	r3, [r7, #30]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	441a      	add	r2, r3
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231a:	b29b      	uxth	r3, r3
 800231c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11f      	bne.n	8002368 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	83bb      	strh	r3, [r7, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8bbb      	ldrh	r3, [r7, #28]
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002368:	8b7b      	ldrh	r3, [r7, #26]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6959      	ldr	r1, [r3, #20]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	895a      	ldrh	r2, [r3, #10]
 800237a:	8b7b      	ldrh	r3, [r7, #26]
 800237c:	f003 fc23 	bl	8005bc6 <USB_ReadPMA>
    }
  }

  return count;
 8002380:	8b7b      	ldrh	r3, [r7, #26]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b094      	sub	sp, #80	; 0x50
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8138 	beq.w	8002614 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	3302      	adds	r3, #2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023d8:	429a      	cmp	r2, r3
 80023da:	d907      	bls.n	80023ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	e002      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12c      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f005 f9ee 	bl	80077e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 823a 	beq.w	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	82fb      	strh	r3, [r7, #22]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244e:	b29b      	uxth	r3, r3
 8002450:	8013      	strh	r3, [r2, #0]
 8002452:	e218      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01f      	beq.n	800249e <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	857b      	strh	r3, [r7, #42]	; 0x2a
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	441a      	add	r2, r3
 8002488:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800248a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	b29b      	uxth	r3, r3
 800249c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 81ee 	bne.w	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024b2:	441a      	add	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024c0:	441a      	add	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d309      	bcc.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	e015      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80024ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024fc:	e009      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d155      	bne.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x23c>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	011a      	lsls	r2, r3, #4
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002552:	b29a      	uxth	r2, r3
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29a      	uxth	r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	e047      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x274>
 800256e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002570:	2b3e      	cmp	r3, #62	; 0x3e
 8002572:	d811      	bhi.n	8002598 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_PCD_EP_DB_Transmit+0x200>
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	3301      	adds	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	b29b      	uxth	r3, r3
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	b29a      	uxth	r2, r3
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	e032      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x274>
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x224>
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	3b01      	subs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025be:	b29a      	uxth	r2, r3
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	801a      	strh	r2, [r3, #0]
 80025c4:	e01b      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x274>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d117      	bne.n	80025fe <HAL_PCD_EP_DB_Transmit+0x274>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	4413      	add	r3, r2
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	011a      	lsls	r2, r3, #4
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	4413      	add	r3, r2
 80025f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6959      	ldr	r1, [r3, #20]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	891a      	ldrh	r2, [r3, #8]
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	b29b      	uxth	r3, r3
 800260e:	f003 fa95 	bl	8005b3c <USB_WritePMA>
 8002612:	e138      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	3306      	adds	r3, #6
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002648:	429a      	cmp	r2, r3
 800264a:	d307      	bcc.n	800265c <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e002      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12e      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f005 f8b6 	bl	80077e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8102 	bne.w	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
 80026c6:	e0de      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11f      	bne.n	8002712 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80026fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800270a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270e:	b29b      	uxth	r3, r3
 8002710:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	2b01      	cmp	r3, #1
 800271a:	f040 80b4 	bne.w	8002886 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002726:	441a      	add	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002734:	441a      	add	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	429a      	cmp	r2, r3
 8002744:	d309      	bcc.n	800275a <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	621a      	str	r2, [r3, #32]
 8002758:	e015      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002762:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002766:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002770:	e009      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	643b      	str	r3, [r7, #64]	; 0x40
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d155      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	4413      	add	r3, r2
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
 80027bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x45e>
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e044      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2b3e      	cmp	r3, #62	; 0x3e
 80027ec:	d811      	bhi.n	8002812 <HAL_PCD_EP_DB_Transmit+0x488>
 80027ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_PCD_EP_DB_Transmit+0x47a>
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002800:	3301      	adds	r3, #1
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002806:	b29b      	uxth	r3, r3
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	b29a      	uxth	r2, r3
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	e02f      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	3b01      	subs	r3, #1
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	b29b      	uxth	r3, r3
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	b29b      	uxth	r3, r3
 8002830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002838:	b29a      	uxth	r2, r3
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e018      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d114      	bne.n	8002872 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	4413      	add	r3, r2
 8002858:	643b      	str	r3, [r7, #64]	; 0x40
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	011a      	lsls	r2, r3, #4
 8002860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002862:	4413      	add	r3, r2
 8002864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286c:	b29a      	uxth	r2, r3
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6959      	ldr	r1, [r3, #20]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	895a      	ldrh	r2, [r3, #10]
 800287e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 f95b 	bl	8005b3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a0:	82bb      	strh	r3, [r7, #20]
 80028a2:	8abb      	ldrh	r3, [r7, #20]
 80028a4:	f083 0310 	eor.w	r3, r3, #16
 80028a8:	82bb      	strh	r3, [r7, #20]
 80028aa:	8abb      	ldrh	r3, [r7, #20]
 80028ac:	f083 0320 	eor.w	r3, r3, #32
 80028b0:	82bb      	strh	r3, [r7, #20]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8abb      	ldrh	r3, [r7, #20]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3750      	adds	r7, #80	; 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	4613      	mov	r3, r2
 80028f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e009      	b.n	800292a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002916:	897a      	ldrh	r2, [r7, #10]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	b29a      	uxth	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	80da      	strh	r2, [r3, #6]
 800293e:	e00b      	b.n	8002958 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2201      	movs	r2, #1
 8002944:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b29a      	uxth	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e26c      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8087 	beq.w	8002a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002984:	4b92      	ldr	r3, [pc, #584]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b04      	cmp	r3, #4
 800298e:	d00c      	beq.n	80029aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002990:	4b8f      	ldr	r3, [pc, #572]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d112      	bne.n	80029c2 <HAL_RCC_OscConfig+0x5e>
 800299c:	4b8c      	ldr	r3, [pc, #560]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d10b      	bne.n	80029c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029aa:	4b89      	ldr	r3, [pc, #548]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d06c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x12c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d168      	bne.n	8002a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e246      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x76>
 80029cc:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a7f      	ldr	r2, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e02e      	b.n	8002a38 <HAL_RCC_OscConfig+0xd4>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x98>
 80029e2:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a77      	ldr	r2, [pc, #476]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xd4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0xbc>
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a71      	ldr	r2, [pc, #452]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6e      	ldr	r2, [pc, #440]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xd4>
 8002a20:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a67      	ldr	r2, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe f90e 	bl	8000c60 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe f90a 	bl	8000c60 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1fa      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xe4>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f8fa 	bl	8000c60 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe f8f6 	bl	8000c60 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1e6      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x10c>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9e:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x18c>
 8002ab6:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x176>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1ba      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4939      	ldr	r1, [pc, #228]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x270>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe f8af 	bl	8000c60 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b06:	f7fe f8ab 	bl	8000c60 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e19b      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4927      	ldr	r1, [pc, #156]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe f88e 	bl	8000c60 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe f88a 	bl	8000c60 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e17a      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03a      	beq.n	8002be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d019      	beq.n	8002bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe f86e 	bl	8000c60 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fe f86a 	bl	8000c60 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e15a      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f000 fade 	bl	8003168 <RCC_Delay>
 8002bac:	e01c      	b.n	8002be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe f854 	bl	8000c60 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bba:	e00f      	b.n	8002bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f850 	bl	8000c60 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d908      	bls.n	8002bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e140      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	42420000 	.word	0x42420000
 8002bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e9      	bne.n	8002bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a6 	beq.w	8002d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a93      	ldr	r2, [pc, #588]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]
 8002c12:	4b91      	ldr	r3, [pc, #580]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b8e      	ldr	r3, [pc, #568]	; (8002e5c <HAL_RCC_OscConfig+0x4f8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a8a      	ldr	r2, [pc, #552]	; (8002e5c <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f811 	bl	8000c60 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe f80d 	bl	8000c60 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0fd      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x312>
 8002c68:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a7a      	ldr	r2, [pc, #488]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	e02d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x36e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x334>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a72      	ldr	r2, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6213      	str	r3, [r2, #32]
 8002c96:	e01c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x36e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x356>
 8002ca0:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a6c      	ldr	r2, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x36e>
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7fd ffc1 	bl	8000c60 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fd ffbd 	bl	8000c60 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0ab      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ee      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x37e>
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fd ffab 	bl	8000c60 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ffa7 	bl	8000c60 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e095      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a47      	ldr	r2, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8081 	beq.w	8002e4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4c:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d061      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d146      	bne.n	8002dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_OscConfig+0x4fc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fd ff7b 	bl	8000c60 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fd ff77 	bl	8000c60 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e067      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d108      	bne.n	8002da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	492d      	ldr	r1, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a19      	ldr	r1, [r3, #32]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	430b      	orrs	r3, r1
 8002dba:	4927      	ldr	r1, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x4fc>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fd ff4b 	bl	8000c60 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fd ff47 	bl	8000c60 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e037      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x46a>
 8002dec:	e02f      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0x4fc>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fd ff34 	bl	8000c60 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fd ff30 	bl	8000c60 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e020      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x498>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e013      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0d0      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4965      	ldr	r1, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d040      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e073      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fd fe84 	bl	8000c60 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fd fe80 	bl	8000c60 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e053      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4922      	ldr	r1, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f859 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1cc>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fde2 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	08008678 	.word	0x08008678
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003044:	f107 0318 	add.w	r3, r7, #24
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800305e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003062:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCC_MCOConfig+0x68>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <HAL_RCC_MCOConfig+0x68>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_MCOConfig+0x68>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	4619      	mov	r1, r3
 8003082:	4808      	ldr	r0, [pc, #32]	; (80030a4 <HAL_RCC_MCOConfig+0x6c>)
 8003084:	f7fd ff28 	bl	8000ed8 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_MCOConfig+0x68>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_MCOConfig+0x68>)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
}
 8003098:	bf00      	nop
 800309a:	3728      	adds	r7, #40	; 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010800 	.word	0x40010800

080030a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b490      	push	{r4, r7}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b0:	1d3c      	adds	r4, r7, #4
 80030b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b8:	f240 2301 	movw	r3, #513	; 0x201
 80030bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x40>
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x46>
 80030e6:	e02d      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ea:	623b      	str	r3, [r7, #32]
      break;
 80030ec:	e02d      	b.n	800314a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	0c9b      	lsrs	r3, r3, #18
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fa:	4413      	add	r3, r2
 80030fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003100:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_GetSysClockFreq+0xb4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	0c5b      	lsrs	r3, r3, #17
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311a:	4413      	add	r3, r2
 800311c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003120:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003126:	fb02 f203 	mul.w	r2, r2, r3
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e004      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	623b      	str	r3, [r7, #32]
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003146:	623b      	str	r3, [r7, #32]
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	6a3b      	ldr	r3, [r7, #32]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc90      	pop	{r4, r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	08008620 	.word	0x08008620
 800315c:	40021000 	.word	0x40021000
 8003160:	007a1200 	.word	0x007a1200
 8003164:	003d0900 	.word	0x003d0900

08003168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <RCC_Delay+0x34>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <RCC_Delay+0x38>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0a5b      	lsrs	r3, r3, #9
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003184:	bf00      	nop
  }
  while (Delay --);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e5a      	subs	r2, r3, #1
 800318a:	60fa      	str	r2, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <RCC_Delay+0x1c>
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	20000000 	.word	0x20000000
 80031a0:	10624dd3 	.word	0x10624dd3

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d07d      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c4:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10d      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
 80031dc:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d118      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f8:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003204:	f7fd fd2c 	bl	8000c60 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	e008      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7fd fd28 	bl	8000c60 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e06d      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02e      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d027      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003248:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003250:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003258:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800325e:	4a29      	ldr	r2, [pc, #164]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d014      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fd fcf7 	bl	8000c60 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd fcf3 	bl	8000c60 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e036      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ee      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4917      	ldr	r1, [pc, #92]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a13      	ldr	r2, [pc, #76]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	40007000 	.word	0x40007000
 800330c:	42420440 	.word	0x42420440

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e041      	b.n	80033a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fb52 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f9f8 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e03a      	b.n	800343e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_TIM_Base_Start_IT+0x98>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d009      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_TIM_Base_Start_IT+0x9c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_TIM_Base_Start_IT+0xa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d010      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e007      	b.n	800343c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800

08003454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0202 	mvn.w	r2, #2
 8003480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f938 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f92b 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f93a 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0204 	mvn.w	r2, #4
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f90e 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f901 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f910 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0208 	mvn.w	r2, #8
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8e4 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8d7 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8e6 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b10      	cmp	r3, #16
 8003564:	d122      	bne.n	80035ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b10      	cmp	r3, #16
 8003572:	d11b      	bne.n	80035ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0210 	mvn.w	r2, #16
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2208      	movs	r2, #8
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8ba 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8ad 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8bc 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0201 	mvn.w	r2, #1
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f888 	bl	80036e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa73 	bl	8003aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f880 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b20      	cmp	r3, #32
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0220 	mvn.w	r2, #32
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa3e 	bl	8003ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003678:	2302      	movs	r3, #2
 800367a:	e031      	b.n	80036e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800368c:	6839      	ldr	r1, [r7, #0]
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8ba 	bl	8003808 <TIM_SlaveTimer_SetConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e018      	b.n	80036e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
	...

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a26      	ldr	r2, [pc, #152]	; (8003800 <TIM_Base_SetConfig+0xbc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <TIM_Base_SetConfig+0xc0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <TIM_Base_SetConfig+0xbc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <TIM_Base_SetConfig+0xc0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0307 	bic.w	r3, r3, #7
 8003832:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b70      	cmp	r3, #112	; 0x70
 800384c:	d01a      	beq.n	8003884 <TIM_SlaveTimer_SetConfig+0x7c>
 800384e:	2b70      	cmp	r3, #112	; 0x70
 8003850:	d860      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 8003852:	2b60      	cmp	r3, #96	; 0x60
 8003854:	d054      	beq.n	8003900 <TIM_SlaveTimer_SetConfig+0xf8>
 8003856:	2b60      	cmp	r3, #96	; 0x60
 8003858:	d85c      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 800385a:	2b50      	cmp	r3, #80	; 0x50
 800385c:	d046      	beq.n	80038ec <TIM_SlaveTimer_SetConfig+0xe4>
 800385e:	2b50      	cmp	r3, #80	; 0x50
 8003860:	d858      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d019      	beq.n	800389a <TIM_SlaveTimer_SetConfig+0x92>
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d854      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d054      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0x110>
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	d850      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d050      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0x110>
 8003876:	2b20      	cmp	r3, #32
 8003878:	d84c      	bhi.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d04c      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0x110>
 800387e:	2b10      	cmp	r3, #16
 8003880:	d04a      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003882:	e047      	b.n	8003914 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68d9      	ldr	r1, [r3, #12]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f000 f8a3 	bl	80039de <TIM_ETR_SetConfig>
      break;
 8003898:	e03f      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d101      	bne.n	80038a6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e03a      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038cc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
      break;
 80038ea:	e016      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f000 f813 	bl	8003924 <TIM_TI1_ConfigInputStage>
      break;
 80038fe:	e00c      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	461a      	mov	r2, r3
 800390e:	f000 f837 	bl	8003980 <TIM_TI2_ConfigInputStage>
      break;
 8003912:	e002      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003918:	bf00      	nop
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 030a 	bic.w	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f023 0210 	bic.w	r2, r3, #16
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	031b      	lsls	r3, r3, #12
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	621a      	str	r2, [r3, #32]
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	021a      	lsls	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e046      	b.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d009      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800

08003ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003afc:	b084      	sub	sp, #16
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	f107 0014 	add.w	r0, r7, #20
 8003b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	b004      	add	sp, #16
 8003b1a:	4770      	bx	lr

08003b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b94:	b084      	sub	sp, #16
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	f107 0014 	add.w	r0, r7, #20
 8003ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	b004      	add	sp, #16
 8003bd2:	4770      	bx	lr

08003bd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b09b      	sub	sp, #108	; 0x6c
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d81f      	bhi.n	8003c46 <USB_ActivateEndpoint+0x72>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <USB_ActivateEndpoint+0x38>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c4f 	.word	0x08003c4f
 8003c18:	08003c2b 	.word	0x08003c2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c28:	e012      	b.n	8003c50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c36:	e00b      	b.n	8003c50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c44:	e004      	b.n	8003c50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c4c:	e000      	b.n	8003c50 <USB_ActivateEndpoint+0x7c>
      break;
 8003c4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	7b1b      	ldrb	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f040 8149 	bne.w	8003f54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8084 	beq.w	8003dd4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4413      	add	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	011a      	lsls	r2, r3, #4
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	88db      	ldrh	r3, [r3, #6]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	81fb      	strh	r3, [r7, #14]
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <USB_ActivateEndpoint+0x17c>
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	81bb      	strh	r3, [r7, #12]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	89bb      	ldrh	r3, [r7, #12]
 8003d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d020      	beq.n	8003d9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6e:	813b      	strh	r3, [r7, #8]
 8003d70:	893b      	ldrh	r3, [r7, #8]
 8003d72:	f083 0320 	eor.w	r3, r3, #32
 8003d76:	813b      	strh	r3, [r7, #8]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	893b      	ldrh	r3, [r7, #8]
 8003d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	8013      	strh	r3, [r2, #0]
 8003d98:	e27f      	b.n	800429a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db0:	817b      	strh	r3, [r7, #10]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	897b      	ldrh	r3, [r7, #10]
 8003dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	8013      	strh	r3, [r2, #0]
 8003dd2:	e262      	b.n	800429a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	4413      	add	r3, r2
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	011a      	lsls	r2, r3, #4
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	88db      	ldrh	r3, [r3, #6]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	4413      	add	r3, r2
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	011a      	lsls	r2, r3, #4
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d112      	bne.n	8003e5a <USB_ActivateEndpoint+0x286>
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e02f      	b.n	8003eba <USB_ActivateEndpoint+0x2e6>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e60:	d813      	bhi.n	8003e8a <USB_ActivateEndpoint+0x2b6>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	663b      	str	r3, [r7, #96]	; 0x60
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <USB_ActivateEndpoint+0x2a8>
 8003e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e78:	3301      	adds	r3, #1
 8003e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	029b      	lsls	r3, r3, #10
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	e017      	b.n	8003eba <USB_ActivateEndpoint+0x2e6>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <USB_ActivateEndpoint+0x2d0>
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	83fb      	strh	r3, [r7, #30]
 8003ec8:	8bfb      	ldrh	r3, [r7, #30]
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01b      	beq.n	8003f0a <USB_ActivateEndpoint+0x336>
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	83bb      	strh	r3, [r7, #28]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	8bbb      	ldrh	r3, [r7, #28]
 8003ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f20:	837b      	strh	r3, [r7, #26]
 8003f22:	8b7b      	ldrh	r3, [r7, #26]
 8003f24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f28:	837b      	strh	r3, [r7, #26]
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f30:	837b      	strh	r3, [r7, #26]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8b7b      	ldrh	r3, [r7, #26]
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
 8003f52:	e1a2      	b.n	800429a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa0:	4413      	add	r3, r2
 8003fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	011a      	lsls	r2, r3, #4
 8003faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	891b      	ldrh	r3, [r3, #8]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	4413      	add	r3, r2
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	011a      	lsls	r2, r3, #4
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	895b      	ldrh	r3, [r3, #10]
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 8091 	bne.w	8004124 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <USB_ActivateEndpoint+0x47e>
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004060:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01b      	beq.n	80040a2 <USB_ActivateEndpoint+0x4ce>
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800408e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800409e:	b29b      	uxth	r3, r3
 80040a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004100:	867b      	strh	r3, [r7, #50]	; 0x32
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]
 8004122:	e0ba      	b.n	800429a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01d      	beq.n	800417c <USB_ActivateEndpoint+0x5a8>
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	441a      	add	r2, r3
 8004164:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004178:	b29b      	uxth	r3, r3
 800417a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800418c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <USB_ActivateEndpoint+0x600>
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d024      	beq.n	8004226 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041fa:	f083 0320 	eor.w	r3, r3, #32
 80041fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]
 8004224:	e01d      	b.n	8004262 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800429a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800429e:	4618      	mov	r0, r3
 80042a0:	376c      	adds	r7, #108	; 0x6c
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b08d      	sub	sp, #52	; 0x34
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	7b1b      	ldrb	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 808e 	bne.w	80043d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d044      	beq.n	800434e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	81bb      	strh	r3, [r7, #12]
 80042d2:	89bb      	ldrh	r3, [r7, #12]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <USB_DeactivateEndpoint+0x6c>
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	817b      	strh	r3, [r7, #10]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	897b      	ldrh	r3, [r7, #10]
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432a:	813b      	strh	r3, [r7, #8]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	441a      	add	r2, r3
 8004336:	893b      	ldrh	r3, [r7, #8]
 8004338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004348:	b29b      	uxth	r3, r3
 800434a:	8013      	strh	r3, [r2, #0]
 800434c:	e192      	b.n	8004674 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	827b      	strh	r3, [r7, #18]
 800435c:	8a7b      	ldrh	r3, [r7, #18]
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01b      	beq.n	800439e <USB_DeactivateEndpoint+0xf6>
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	823b      	strh	r3, [r7, #16]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	8a3b      	ldrh	r3, [r7, #16]
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	81fb      	strh	r3, [r7, #14]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	89fb      	ldrh	r3, [r7, #14]
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
 80043d6:	e14d      	b.n	8004674 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 80a5 	bne.w	800452c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	843b      	strh	r3, [r7, #32]
 80043f0:	8c3b      	ldrh	r3, [r7, #32]
 80043f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01b      	beq.n	8004432 <USB_DeactivateEndpoint+0x18a>
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	83fb      	strh	r3, [r7, #30]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	8bfb      	ldrh	r3, [r7, #30]
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	83bb      	strh	r3, [r7, #28]
 8004440:	8bbb      	ldrh	r3, [r7, #28]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <USB_DeactivateEndpoint+0x1da>
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	837b      	strh	r3, [r7, #26]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8b7b      	ldrh	r3, [r7, #26]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004498:	833b      	strh	r3, [r7, #24]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	8b3b      	ldrh	r3, [r7, #24]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	82fb      	strh	r3, [r7, #22]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004508:	82bb      	strh	r3, [r7, #20]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	8abb      	ldrh	r3, [r7, #20]
 8004516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004526:	b29b      	uxth	r3, r3
 8004528:	8013      	strh	r3, [r2, #0]
 800452a:	e0a3      	b.n	8004674 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800453a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800453c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <USB_DeactivateEndpoint+0x2d4>
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	857b      	strh	r3, [r7, #42]	; 0x2a
 800458a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_DeactivateEndpoint+0x324>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004638:	b29b      	uxth	r3, r3
 800463a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	847b      	strh	r3, [r7, #34]	; 0x22
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3734      	adds	r7, #52	; 0x34
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0c4      	sub	sp, #272	; 0x110
 8004684:	af00      	add	r7, sp, #0
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	6018      	str	r0, [r3, #0]
 800468a:	463b      	mov	r3, r7
 800468c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800468e:	463b      	mov	r3, r7
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 8557 	bne.w	8005148 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d905      	bls.n	80046b6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80046aa:	463b      	mov	r3, r7
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046b4:	e004      	b.n	80046c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80046b6:	463b      	mov	r3, r7
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	7b1b      	ldrb	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12c      	bne.n	8004724 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6959      	ldr	r1, [r3, #20]
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	88da      	ldrh	r2, [r3, #6]
 80046d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046da:	b29b      	uxth	r3, r3
 80046dc:	1d38      	adds	r0, r7, #4
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	f001 fa2c 	bl	8005b3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	011a      	lsls	r2, r3, #4
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	b29a      	uxth	r2, r3
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	f000 bcdd 	b.w	80050de <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004724:	463b      	mov	r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	2b02      	cmp	r3, #2
 800472c:	f040 8347 	bne.w	8004dbe <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004730:	463b      	mov	r3, r7
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	429a      	cmp	r2, r3
 800473e:	f240 82eb 	bls.w	8004d18 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	463b      	mov	r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	463b      	mov	r3, r7
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8159 	beq.w	8004a66 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d164      	bne.n	800488e <USB_EPStartXfer+0x20e>
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	4413      	add	r3, r2
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	011a      	lsls	r2, r3, #4
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	4413      	add	r3, r2
 80047e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d112      	bne.n	800481c <USB_EPStartXfer+0x19c>
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004800:	b29a      	uxth	r2, r3
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004814:	b29a      	uxth	r2, r3
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e054      	b.n	80048c6 <USB_EPStartXfer+0x246>
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004820:	2b3e      	cmp	r3, #62	; 0x3e
 8004822:	d817      	bhi.n	8004854 <USB_EPStartXfer+0x1d4>
 8004824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <USB_EPStartXfer+0x1c4>
 800483a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800483e:	3301      	adds	r3, #1
 8004840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29a      	uxth	r2, r3
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e038      	b.n	80048c6 <USB_EPStartXfer+0x246>
 8004854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <USB_EPStartXfer+0x1f4>
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486e:	3b01      	subs	r3, #1
 8004870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004878:	b29b      	uxth	r3, r3
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	b29b      	uxth	r3, r3
 800487e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004886:	b29a      	uxth	r2, r3
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	801a      	strh	r2, [r3, #0]
 800488c:	e01b      	b.n	80048c6 <USB_EPStartXfer+0x246>
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d116      	bne.n	80048c6 <USB_EPStartXfer+0x246>
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	4413      	add	r3, r2
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	4413      	add	r3, r2
 80048b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
 80048bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6959      	ldr	r1, [r3, #20]
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048e0:	1d38      	adds	r0, r7, #4
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	f001 f92a 	bl	8005b3c <USB_WritePMA>
            ep->xfer_buff += len;
 80048e8:	463b      	mov	r3, r7
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f2:	441a      	add	r2, r3
 80048f4:	463b      	mov	r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048fa:	463b      	mov	r3, r7
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d909      	bls.n	800491e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	463b      	mov	r3, r7
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	621a      	str	r2, [r3, #32]
 800491c:	e008      	b.n	8004930 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d164      	bne.n	8004a04 <USB_EPStartXfer+0x384>
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004948:	b29b      	uxth	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d112      	bne.n	8004992 <USB_EPStartXfer+0x312>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004976:	b29a      	uxth	r2, r3
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29a      	uxth	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e057      	b.n	8004a42 <USB_EPStartXfer+0x3c2>
 8004992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004996:	2b3e      	cmp	r3, #62	; 0x3e
 8004998:	d817      	bhi.n	80049ca <USB_EPStartXfer+0x34a>
 800499a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <USB_EPStartXfer+0x33a>
 80049b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049b4:	3301      	adds	r3, #1
 80049b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e03b      	b.n	8004a42 <USB_EPStartXfer+0x3c2>
 80049ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <USB_EPStartXfer+0x36a>
 80049e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049e4:	3b01      	subs	r3, #1
 80049e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e01e      	b.n	8004a42 <USB_EPStartXfer+0x3c2>
 8004a04:	463b      	mov	r3, r7
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d119      	bne.n	8004a42 <USB_EPStartXfer+0x3c2>
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	4413      	add	r3, r2
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	463b      	mov	r3, r7
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	011a      	lsls	r2, r3, #4
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	4413      	add	r3, r2
 8004a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a42:	463b      	mov	r3, r7
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	891b      	ldrh	r3, [r3, #8]
 8004a48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6959      	ldr	r1, [r3, #20]
 8004a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a5c:	1d38      	adds	r0, r7, #4
 8004a5e:	6800      	ldr	r0, [r0, #0]
 8004a60:	f001 f86c 	bl	8005b3c <USB_WritePMA>
 8004a64:	e33b      	b.n	80050de <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a66:	463b      	mov	r3, r7
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d164      	bne.n	8004b3a <USB_EPStartXfer+0x4ba>
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	4413      	add	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a88:	463b      	mov	r3, r7
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	011a      	lsls	r2, r3, #4
 8004a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d112      	bne.n	8004ac8 <USB_EPStartXfer+0x448>
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e057      	b.n	8004b78 <USB_EPStartXfer+0x4f8>
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ace:	d817      	bhi.n	8004b00 <USB_EPStartXfer+0x480>
 8004ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <USB_EPStartXfer+0x470>
 8004ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aea:	3301      	adds	r3, #1
 8004aec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	029b      	lsls	r3, r3, #10
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	e03b      	b.n	8004b78 <USB_EPStartXfer+0x4f8>
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <USB_EPStartXfer+0x4a0>
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	029b      	lsls	r3, r3, #10
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e01e      	b.n	8004b78 <USB_EPStartXfer+0x4f8>
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d119      	bne.n	8004b78 <USB_EPStartXfer+0x4f8>
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4a:	1d3b      	adds	r3, r7, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	4413      	add	r3, r2
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	011a      	lsls	r2, r3, #4
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	4413      	add	r3, r2
 8004b68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	891b      	ldrh	r3, [r3, #8]
 8004b7e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b82:	463b      	mov	r3, r7
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6959      	ldr	r1, [r3, #20]
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b92:	1d38      	adds	r0, r7, #4
 8004b94:	6800      	ldr	r0, [r0, #0]
 8004b96:	f000 ffd1 	bl	8005b3c <USB_WritePMA>
            ep->xfer_buff += len;
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba4:	441a      	add	r2, r3
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bac:	463b      	mov	r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d909      	bls.n	8004bd0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	621a      	str	r2, [r3, #32]
 8004bce:	e008      	b.n	8004be2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004bda:	463b      	mov	r3, r7
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
 8004be8:	463b      	mov	r3, r7
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d164      	bne.n	8004cbc <USB_EPStartXfer+0x63c>
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c06:	4413      	add	r3, r2
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	011a      	lsls	r2, r3, #4
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	4413      	add	r3, r2
 8004c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d112      	bne.n	8004c4a <USB_EPStartXfer+0x5ca>
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e054      	b.n	8004cf4 <USB_EPStartXfer+0x674>
 8004c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c50:	d817      	bhi.n	8004c82 <USB_EPStartXfer+0x602>
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <USB_EPStartXfer+0x5f2>
 8004c68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	029b      	lsls	r3, r3, #10
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e038      	b.n	8004cf4 <USB_EPStartXfer+0x674>
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <USB_EPStartXfer+0x622>
 8004c98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	029b      	lsls	r3, r3, #10
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e01b      	b.n	8004cf4 <USB_EPStartXfer+0x674>
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d116      	bne.n	8004cf4 <USB_EPStartXfer+0x674>
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd4:	4413      	add	r3, r2
 8004cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd8:	463b      	mov	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	011a      	lsls	r2, r3, #4
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	895b      	ldrh	r3, [r3, #10]
 8004cfa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6959      	ldr	r1, [r3, #20]
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d0e:	1d38      	adds	r0, r7, #4
 8004d10:	6800      	ldr	r0, [r0, #0]
 8004d12:	f000 ff13 	bl	8005b3c <USB_WritePMA>
 8004d16:	e1e2      	b.n	80050de <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d18:	463b      	mov	r3, r7
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7a:	4413      	add	r3, r2
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7e:	463b      	mov	r3, r7
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d88:	4413      	add	r3, r2
 8004d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	891b      	ldrh	r3, [r3, #8]
 8004da0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6959      	ldr	r1, [r3, #20]
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004db4:	1d38      	adds	r0, r7, #4
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	f000 fec0 	bl	8005b3c <USB_WritePMA>
 8004dbc:	e18f      	b.n	80050de <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dbe:	1d3b      	adds	r3, r7, #4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 808f 	beq.w	8004ef8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dda:	1d3b      	adds	r3, r7, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	67bb      	str	r3, [r7, #120]	; 0x78
 8004de0:	463b      	mov	r3, r7
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d164      	bne.n	8004eb4 <USB_EPStartXfer+0x834>
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	673b      	str	r3, [r7, #112]	; 0x70
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dfe:	4413      	add	r3, r2
 8004e00:	673b      	str	r3, [r7, #112]	; 0x70
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	011a      	lsls	r2, r3, #4
 8004e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d112      	bne.n	8004e42 <USB_EPStartXfer+0x7c2>
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e054      	b.n	8004eec <USB_EPStartXfer+0x86c>
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e46:	2b3e      	cmp	r3, #62	; 0x3e
 8004e48:	d817      	bhi.n	8004e7a <USB_EPStartXfer+0x7fa>
 8004e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USB_EPStartXfer+0x7ea>
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	3301      	adds	r3, #1
 8004e66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e038      	b.n	8004eec <USB_EPStartXfer+0x86c>
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <USB_EPStartXfer+0x81a>
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	3b01      	subs	r3, #1
 8004e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	e01b      	b.n	8004eec <USB_EPStartXfer+0x86c>
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d116      	bne.n	8004eec <USB_EPStartXfer+0x86c>
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ecc:	4413      	add	r3, r2
 8004ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	011a      	lsls	r2, r3, #4
 8004ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eda:	4413      	add	r3, r2
 8004edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004ef6:	e097      	b.n	8005028 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d168      	bne.n	8004fd4 <USB_EPStartXfer+0x954>
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f20:	463b      	mov	r3, r7
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	011a      	lsls	r2, r3, #4
 8004f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d112      	bne.n	8004f62 <USB_EPStartXfer+0x8e2>
 8004f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	e05d      	b.n	800501e <USB_EPStartXfer+0x99e>
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f66:	2b3e      	cmp	r3, #62	; 0x3e
 8004f68:	d817      	bhi.n	8004f9a <USB_EPStartXfer+0x91a>
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <USB_EPStartXfer+0x90a>
 8004f80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f84:	3301      	adds	r3, #1
 8004f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e041      	b.n	800501e <USB_EPStartXfer+0x99e>
 8004f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <USB_EPStartXfer+0x93a>
 8004fb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	e024      	b.n	800501e <USB_EPStartXfer+0x99e>
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d11f      	bne.n	800501e <USB_EPStartXfer+0x99e>
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005008:	4413      	add	r3, r2
 800500a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800500e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005016:	b29a      	uxth	r2, r3
 8005018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800501c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	891b      	ldrh	r3, [r3, #8]
 8005024:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005028:	463b      	mov	r3, r7
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6959      	ldr	r1, [r3, #20]
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	b29b      	uxth	r3, r3
 8005034:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005038:	1d38      	adds	r0, r7, #4
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	f000 fd7e 	bl	8005b3c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d122      	bne.n	8005090 <USB_EPStartXfer+0xa10>
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800507a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800508a:	b29b      	uxth	r3, r3
 800508c:	8013      	strh	r3, [r2, #0]
 800508e:	e026      	b.n	80050de <USB_EPStartXfer+0xa5e>
 8005090:	463b      	mov	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d121      	bne.n	80050de <USB_EPStartXfer+0xa5e>
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	463b      	mov	r3, r7
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f107 020e 	add.w	r2, r7, #14
 80050f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fc:	8013      	strh	r3, [r2, #0]
 80050fe:	f107 030e 	add.w	r3, r7, #14
 8005102:	f107 020e 	add.w	r2, r7, #14
 8005106:	8812      	ldrh	r2, [r2, #0]
 8005108:	f082 0210 	eor.w	r2, r2, #16
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	f107 030e 	add.w	r3, r7, #14
 8005112:	f107 020e 	add.w	r2, r7, #14
 8005116:	8812      	ldrh	r2, [r2, #0]
 8005118:	f082 0220 	eor.w	r2, r2, #32
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	f107 030e 	add.w	r3, r7, #14
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	b29b      	uxth	r3, r3
 8005144:	8013      	strh	r3, [r2, #0]
 8005146:	e3b5      	b.n	80058b4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	7b1b      	ldrb	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 8090 	bne.w	8005274 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d90e      	bls.n	8005182 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	463b      	mov	r3, r7
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	619a      	str	r2, [r3, #24]
 8005180:	e008      	b.n	8005194 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005182:	463b      	mov	r3, r7
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051ac:	4413      	add	r3, r2
 80051ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	011a      	lsls	r2, r3, #4
 80051ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051be:	4413      	add	r3, r2
 80051c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <USB_EPStartXfer+0xb7e>
 80051d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051dc:	b29a      	uxth	r2, r3
 80051de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e32c      	b.n	8005858 <USB_EPStartXfer+0x11d8>
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	2b3e      	cmp	r3, #62	; 0x3e
 8005204:	d818      	bhi.n	8005238 <USB_EPStartXfer+0xbb8>
 8005206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <USB_EPStartXfer+0xba6>
 800521c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005220:	3301      	adds	r3, #1
 8005222:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005226:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800522a:	b29b      	uxth	r3, r3
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	b29a      	uxth	r2, r3
 8005230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e30f      	b.n	8005858 <USB_EPStartXfer+0x11d8>
 8005238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <USB_EPStartXfer+0xbd8>
 800524e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005252:	3b01      	subs	r3, #1
 8005254:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005258:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800525c:	b29b      	uxth	r3, r3
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526a:	b29a      	uxth	r2, r3
 800526c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e2f1      	b.n	8005858 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005274:	463b      	mov	r3, r7
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	78db      	ldrb	r3, [r3, #3]
 800527a:	2b02      	cmp	r3, #2
 800527c:	f040 818f 	bne.w	800559e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d175      	bne.n	8005376 <USB_EPStartXfer+0xcf6>
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052a2:	4413      	add	r3, r2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011a      	lsls	r2, r3, #4
 80052b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d116      	bne.n	80052f6 <USB_EPStartXfer+0xc76>
 80052c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e065      	b.n	80053c2 <USB_EPStartXfer+0xd42>
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d81a      	bhi.n	8005336 <USB_EPStartXfer+0xcb6>
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <USB_EPStartXfer+0xca4>
 800531a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800531e:	3301      	adds	r3, #1
 8005320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005328:	b29b      	uxth	r3, r3
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	b29a      	uxth	r2, r3
 800532e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e045      	b.n	80053c2 <USB_EPStartXfer+0xd42>
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <USB_EPStartXfer+0xcda>
 8005350:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005354:	3b01      	subs	r3, #1
 8005356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800535a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536c:	b29a      	uxth	r2, r3
 800536e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e025      	b.n	80053c2 <USB_EPStartXfer+0xd42>
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d120      	bne.n	80053c2 <USB_EPStartXfer+0xd42>
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005390:	b29b      	uxth	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005398:	4413      	add	r3, r2
 800539a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011a      	lsls	r2, r3, #4
 80053a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053aa:	4413      	add	r3, r2
 80053ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d175      	bne.n	80054c0 <USB_EPStartXfer+0xe40>
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ec:	4413      	add	r3, r2
 80053ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	011a      	lsls	r2, r3, #4
 80053fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053fe:	4413      	add	r3, r2
 8005400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d116      	bne.n	8005440 <USB_EPStartXfer+0xdc0>
 8005412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541e:	b29a      	uxth	r2, r3
 8005420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005436:	b29a      	uxth	r2, r3
 8005438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e061      	b.n	8005504 <USB_EPStartXfer+0xe84>
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b3e      	cmp	r3, #62	; 0x3e
 8005448:	d81a      	bhi.n	8005480 <USB_EPStartXfer+0xe00>
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <USB_EPStartXfer+0xdee>
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	3301      	adds	r3, #1
 800546a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	b29b      	uxth	r3, r3
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	b29a      	uxth	r2, r3
 8005478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e041      	b.n	8005504 <USB_EPStartXfer+0xe84>
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <USB_EPStartXfer+0xe24>
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	3b01      	subs	r3, #1
 80054a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	029b      	lsls	r3, r3, #10
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e021      	b.n	8005504 <USB_EPStartXfer+0xe84>
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d11c      	bne.n	8005504 <USB_EPStartXfer+0xe84>
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054da:	4413      	add	r3, r2
 80054dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	011a      	lsls	r2, r3, #4
 80054e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005502:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 81a4 	beq.w	8005858 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005524:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <USB_EPStartXfer+0xebc>
 8005530:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800553c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 8187 	bne.w	8005858 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800554a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	f040 8180 	bne.w	8005858 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]
 800559c:	e15c      	b.n	8005858 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	78db      	ldrb	r3, [r3, #3]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	f040 8155 	bne.w	8005854 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d90e      	bls.n	80055d8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	619a      	str	r2, [r3, #24]
 80055d6:	e008      	b.n	80055ea <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d16f      	bne.n	80056d4 <USB_EPStartXfer+0x1054>
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800560c:	4413      	add	r3, r2
 800560e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800561e:	4413      	add	r3, r2
 8005620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <USB_EPStartXfer+0xfde>
 8005630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005654:	b29a      	uxth	r2, r3
 8005656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e05f      	b.n	800571e <USB_EPStartXfer+0x109e>
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005662:	2b3e      	cmp	r3, #62	; 0x3e
 8005664:	d818      	bhi.n	8005698 <USB_EPStartXfer+0x1018>
 8005666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <USB_EPStartXfer+0x1006>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	3301      	adds	r3, #1
 8005682:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568a:	b29b      	uxth	r3, r3
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	b29a      	uxth	r2, r3
 8005690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	e042      	b.n	800571e <USB_EPStartXfer+0x109e>
 8005698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <USB_EPStartXfer+0x1038>
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b2:	3b01      	subs	r3, #1
 80056b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e024      	b.n	800571e <USB_EPStartXfer+0x109e>
 80056d4:	463b      	mov	r3, r7
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d11f      	bne.n	800571e <USB_EPStartXfer+0x109e>
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f6:	4413      	add	r3, r2
 80056f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005708:	4413      	add	r3, r2
 800570a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d16f      	bne.n	8005810 <USB_EPStartXfer+0x1190>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005740:	b29b      	uxth	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005748:	4413      	add	r3, r2
 800574a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	011a      	lsls	r2, r3, #4
 8005756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800575a:	4413      	add	r3, r2
 800575c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d116      	bne.n	800579a <USB_EPStartXfer+0x111a>
 800576c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005778:	b29a      	uxth	r2, r3
 800577a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e05e      	b.n	8005858 <USB_EPStartXfer+0x11d8>
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	2b3e      	cmp	r3, #62	; 0x3e
 80057a0:	d818      	bhi.n	80057d4 <USB_EPStartXfer+0x1154>
 80057a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <USB_EPStartXfer+0x1142>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057bc:	3301      	adds	r3, #1
 80057be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	029b      	lsls	r3, r3, #10
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e041      	b.n	8005858 <USB_EPStartXfer+0x11d8>
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_EPStartXfer+0x1174>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e023      	b.n	8005858 <USB_EPStartXfer+0x11d8>
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d11e      	bne.n	8005858 <USB_EPStartXfer+0x11d8>
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800582a:	4413      	add	r3, r2
 800582c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	011a      	lsls	r2, r3, #4
 8005838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800583c:	4413      	add	r3, r2
 800583e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e001      	b.n	8005858 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e02e      	b.n	80058b6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005876:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800587a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800587e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005882:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005886:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800588a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80058a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e8:	81bb      	strh	r3, [r7, #12]
 80058ea:	89bb      	ldrh	r3, [r7, #12]
 80058ec:	f083 0310 	eor.w	r3, r3, #16
 80058f0:	81bb      	strh	r3, [r7, #12]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	89bb      	ldrh	r3, [r7, #12]
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
 8005912:	e01f      	b.n	8005954 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	81fb      	strh	r3, [r7, #14]
 800592c:	89fb      	ldrh	r3, [r7, #14]
 800592e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005932:	81fb      	strh	r3, [r7, #14]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	7b1b      	ldrb	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 809d 	bne.w	8005aae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d04c      	beq.n	8005a16 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	823b      	strh	r3, [r7, #16]
 800598a:	8a3b      	ldrh	r3, [r7, #16]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <USB_EPClearStall+0x6c>
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	81fb      	strh	r3, [r7, #14]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	78db      	ldrb	r3, [r3, #3]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d06c      	beq.n	8005aae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	81bb      	strh	r3, [r7, #12]
 80059ec:	89bb      	ldrh	r3, [r7, #12]
 80059ee:	f083 0320 	eor.w	r3, r3, #32
 80059f2:	81bb      	strh	r3, [r7, #12]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	89bb      	ldrh	r3, [r7, #12]
 8005a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	8013      	strh	r3, [r2, #0]
 8005a14:	e04b      	b.n	8005aae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	82fb      	strh	r3, [r7, #22]
 8005a24:	8afb      	ldrh	r3, [r7, #22]
 8005a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01b      	beq.n	8005a66 <USB_EPClearStall+0x106>
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	82bb      	strh	r3, [r7, #20]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	8abb      	ldrh	r3, [r7, #20]
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	827b      	strh	r3, [r7, #18]
 8005a7e:	8a7b      	ldrh	r3, [r7, #18]
 8005a80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a84:	827b      	strh	r3, [r7, #18]
 8005a86:	8a7b      	ldrh	r3, [r7, #18]
 8005a88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a8c:	827b      	strh	r3, [r7, #18]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	8a7b      	ldrh	r3, [r7, #18]
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08d      	sub	sp, #52	; 0x34
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	80fb      	strh	r3, [r7, #6]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	3301      	adds	r3, #1
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	005a      	lsls	r2, r3, #1
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b74:	e01e      	b.n	8005bb4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	3301      	adds	r3, #1
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	3301      	adds	r3, #1
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1dd      	bne.n	8005b76 <USB_WritePMA+0x3a>
  }
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	3734      	adds	r7, #52	; 0x34
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b08b      	sub	sp, #44	; 0x2c
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	80fb      	strh	r3, [r7, #6]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005bdc:	88bb      	ldrh	r3, [r7, #4]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	005a      	lsls	r2, r3, #1
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	e01b      	b.n	8005c38 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	3302      	adds	r3, #2
 8005c30:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	3b01      	subs	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e0      	bne.n	8005c00 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005c3e:	88bb      	ldrh	r3, [r7, #4]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	701a      	strb	r2, [r3, #0]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	372c      	adds	r7, #44	; 0x2c
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7c1b      	ldrb	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d115      	bne.n	8005ca8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	2202      	movs	r2, #2
 8005c82:	2181      	movs	r1, #129	; 0x81
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fe90 	bl	80079aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c94:	2202      	movs	r2, #2
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fe86 	bl	80079aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005ca6:	e012      	b.n	8005cce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ca8:	2340      	movs	r3, #64	; 0x40
 8005caa:	2202      	movs	r2, #2
 8005cac:	2181      	movs	r1, #129	; 0x81
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fe7b 	bl	80079aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fe72 	bl	80079aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cce:	2308      	movs	r3, #8
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	2182      	movs	r1, #130	; 0x82
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 fe68 	bl	80079aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ce0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ce4:	f001 ff88 	bl	8007bf8 <USBD_static_malloc>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	e026      	b.n	8005d4e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	7c1b      	ldrb	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d34:	2101      	movs	r1, #1
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 ff28 	bl	8007b8c <USBD_LL_PrepareReceive>
 8005d3c:	e007      	b.n	8005d4e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	2101      	movs	r1, #1
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 ff1f 	bl	8007b8c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d68:	2181      	movs	r1, #129	; 0x81
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 fe43 	bl	80079f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d76:	2101      	movs	r1, #1
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 fe3c 	bl	80079f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d86:	2182      	movs	r1, #130	; 0x82
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fe34 	bl	80079f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 ff2e 	bl	8007c10 <USBD_static_free>
    pdev->pClassData = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d039      	beq.n	8005e64 <USBD_CDC_Setup+0x9e>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d17f      	bne.n	8005ef4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	88db      	ldrh	r3, [r3, #6]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d029      	beq.n	8005e50 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da11      	bge.n	8005e2a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	88d2      	ldrh	r2, [r2, #6]
 8005e18:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e1a:	6939      	ldr	r1, [r7, #16]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	88db      	ldrh	r3, [r3, #6]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fa09 	bl	800723a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005e28:	e06b      	b.n	8005f02 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785a      	ldrb	r2, [r3, #1]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	88db      	ldrh	r3, [r3, #6]
 8005e46:	461a      	mov	r2, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fa24 	bl	8007296 <USBD_CtlPrepareRx>
      break;
 8005e4e:	e058      	b.n	8005f02 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	7850      	ldrb	r0, [r2, #1]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	4798      	blx	r3
      break;
 8005e62:	e04e      	b.n	8005f02 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b0b      	cmp	r3, #11
 8005e6a:	d02e      	beq.n	8005eca <USBD_CDC_Setup+0x104>
 8005e6c:	2b0b      	cmp	r3, #11
 8005e6e:	dc38      	bgt.n	8005ee2 <USBD_CDC_Setup+0x11c>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <USBD_CDC_Setup+0xb4>
 8005e74:	2b0a      	cmp	r3, #10
 8005e76:	d014      	beq.n	8005ea2 <USBD_CDC_Setup+0xdc>
 8005e78:	e033      	b.n	8005ee2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d107      	bne.n	8005e94 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e84:	f107 030c 	add.w	r3, r7, #12
 8005e88:	2202      	movs	r2, #2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f9d4 	bl	800723a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e92:	e02e      	b.n	8005ef2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 f965 	bl	8007166 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea0:	e027      	b.n	8005ef2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d107      	bne.n	8005ebc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005eac:	f107 030f 	add.w	r3, r7, #15
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 f9c0 	bl	800723a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eba:	e01a      	b.n	8005ef2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 f951 	bl	8007166 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ec8:	e013      	b.n	8005ef2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d00d      	beq.n	8005ef0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 f945 	bl	8007166 <USBD_CtlError>
            ret = USBD_FAIL;
 8005edc:	2302      	movs	r3, #2
 8005ede:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ee0:	e006      	b.n	8005ef0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f93e 	bl	8007166 <USBD_CtlError>
          ret = USBD_FAIL;
 8005eea:	2302      	movs	r3, #2
 8005eec:	75fb      	strb	r3, [r7, #23]
          break;
 8005eee:	e000      	b.n	8005ef2 <USBD_CDC_Setup+0x12c>
          break;
 8005ef0:	bf00      	nop
      }
      break;
 8005ef2:	e006      	b.n	8005f02 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f935 	bl	8007166 <USBD_CtlError>
      ret = USBD_FAIL;
 8005efc:	2302      	movs	r3, #2
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	bf00      	nop
  }

  return ret;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f26:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d03a      	beq.n	8005fa8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	331c      	adds	r3, #28
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d029      	beq.n	8005f9c <USBD_CDC_DataIn+0x90>
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	331c      	adds	r3, #28
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	78f9      	ldrb	r1, [r7, #3]
 8005f5c:	68b8      	ldr	r0, [r7, #8]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4403      	add	r3, r0
 8005f68:	3338      	adds	r3, #56	; 0x38
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f70:	fb03 f301 	mul.w	r3, r3, r1
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d110      	bne.n	8005f9c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	331c      	adds	r3, #28
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f8e:	78f9      	ldrb	r1, [r7, #3]
 8005f90:	2300      	movs	r3, #0
 8005f92:	2200      	movs	r2, #0
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fdd6 	bl	8007b46 <USBD_LL_Transmit>
 8005f9a:	e003      	b.n	8005fa4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fe01 	bl	8007bd2 <USBD_LL_GetRxDataSize>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4798      	blx	r3

    return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006016:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	2b00      	cmp	r3, #0
 8006020:	d015      	beq.n	800604e <USBD_CDC_EP0_RxReady+0x46>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006028:	2bff      	cmp	r3, #255	; 0xff
 800602a:	d010      	beq.n	800604e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800603a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006042:	b292      	uxth	r2, r2
 8006044:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2243      	movs	r2, #67	; 0x43
 8006064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000094 	.word	0x20000094

08006078 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2243      	movs	r2, #67	; 0x43
 8006084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000050 	.word	0x20000050

08006098 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2243      	movs	r2, #67	; 0x43
 80060a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200000d8 	.word	0x200000d8

080060b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	220a      	movs	r2, #10
 80060c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c

080060d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006118:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01c      	beq.n	80061b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800617c:	2b00      	cmp	r3, #0
 800617e:	d115      	bne.n	80061ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2181      	movs	r1, #129	; 0x81
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fccf 	bl	8007b46 <USBD_LL_Transmit>

      return USBD_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e002      	b.n	80061b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80061b0:	2302      	movs	r3, #2
  }
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d017      	beq.n	8006204 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7c1b      	ldrb	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e6:	2101      	movs	r1, #1
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fccf 	bl	8007b8c <USBD_LL_PrepareReceive>
 80061ee:	e007      	b.n	8006200 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f6:	2340      	movs	r3, #64	; 0x40
 80061f8:	2101      	movs	r1, #1
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fcc6 	bl	8007b8c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	4613      	mov	r3, r2
 800621a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006222:	2302      	movs	r3, #2
 8006224:	e01a      	b.n	800625c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fb33 	bl	80078c0 <USBD_LL_Init>

  return USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e001      	b.n	800628a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006286:	2302      	movs	r3, #2
 8006288:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fb68 	bl	8007974 <USBD_LL_Start>

  return USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062ce:	2302      	movs	r3, #2
 80062d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	4611      	mov	r1, r2
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	4611      	mov	r1, r2
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fed8 	bl	80070ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	2b02      	cmp	r3, #2
 8006360:	d016      	beq.n	8006390 <USBD_LL_SetupStage+0x6a>
 8006362:	2b02      	cmp	r3, #2
 8006364:	d81c      	bhi.n	80063a0 <USBD_LL_SetupStage+0x7a>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <USBD_LL_SetupStage+0x4a>
 800636a:	2b01      	cmp	r3, #1
 800636c:	d008      	beq.n	8006380 <USBD_LL_SetupStage+0x5a>
 800636e:	e017      	b.n	80063a0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f9cb 	bl	8006714 <USBD_StdDevReq>
      break;
 800637e:	e01a      	b.n	80063b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa2d 	bl	80067e8 <USBD_StdItfReq>
      break;
 800638e:	e012      	b.n	80063b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fa6d 	bl	8006878 <USBD_StdEPReq>
      break;
 800639e:	e00a      	b.n	80063b6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fb40 	bl	8007a34 <USBD_LL_StallEP>
      break;
 80063b4:	bf00      	nop
  }

  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	460b      	mov	r3, r1
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d14b      	bne.n	800646c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d134      	bne.n	8006450 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d919      	bls.n	8006426 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006408:	429a      	cmp	r2, r3
 800640a:	d203      	bcs.n	8006414 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006410:	b29b      	uxth	r3, r3
 8006412:	e002      	b.n	800641a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006418:	b29b      	uxth	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 ff57 	bl	80072d2 <USBD_CtlContinueRx>
 8006424:	e038      	b.n	8006498 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006438:	2b03      	cmp	r3, #3
 800643a:	d105      	bne.n	8006448 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 ff54 	bl	80072f6 <USBD_CtlSendStatus>
 800644e:	e023      	b.n	8006498 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006456:	2b05      	cmp	r3, #5
 8006458:	d11e      	bne.n	8006498 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006462:	2100      	movs	r1, #0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 fae5 	bl	8007a34 <USBD_LL_StallEP>
 800646a:	e015      	b.n	8006498 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800647e:	2b03      	cmp	r3, #3
 8006480:	d108      	bne.n	8006494 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	7afa      	ldrb	r2, [r7, #11]
 800648c:	4611      	mov	r1, r2
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	4798      	blx	r3
 8006492:	e001      	b.n	8006498 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006494:	2302      	movs	r3, #2
 8006496:	e000      	b.n	800649a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	460b      	mov	r3, r1
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d17f      	bne.n	80065b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3314      	adds	r3, #20
 80064ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d15c      	bne.n	8006580 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d915      	bls.n	80064fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fec1 	bl	8007272 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064f0:	2300      	movs	r3, #0
 80064f2:	2200      	movs	r2, #0
 80064f4:	2100      	movs	r1, #0
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f001 fb48 	bl	8007b8c <USBD_LL_PrepareReceive>
 80064fc:	e04e      	b.n	800659c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	6912      	ldr	r2, [r2, #16]
 8006506:	fbb3 f1f2 	udiv	r1, r3, r2
 800650a:	fb02 f201 	mul.w	r2, r2, r1
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d11c      	bne.n	800654e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800651c:	429a      	cmp	r2, r3
 800651e:	d316      	bcc.n	800654e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d20f      	bcs.n	800654e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fe9d 	bl	8007272 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006540:	2300      	movs	r3, #0
 8006542:	2200      	movs	r2, #0
 8006544:	2100      	movs	r1, #0
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fb20 	bl	8007b8c <USBD_LL_PrepareReceive>
 800654c:	e026      	b.n	800659c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006560:	2b03      	cmp	r3, #3
 8006562:	d105      	bne.n	8006570 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f001 fa5e 	bl	8007a34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fecf 	bl	800731c <USBD_CtlReceiveStatus>
 800657e:	e00d      	b.n	800659c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006586:	2b04      	cmp	r3, #4
 8006588:	d004      	beq.n	8006594 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006594:	2180      	movs	r1, #128	; 0x80
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 fa4c 	bl	8007a34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d11d      	bne.n	80065e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff fe81 	bl	80062ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065b4:	e015      	b.n	80065e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d108      	bne.n	80065de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	7afa      	ldrb	r2, [r7, #11]
 80065d6:	4611      	mov	r1, r2
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	4798      	blx	r3
 80065dc:	e001      	b.n	80065e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	e000      	b.n	80065e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	2200      	movs	r2, #0
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f9d5 	bl	80079aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2240      	movs	r2, #64	; 0x40
 800660c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	2200      	movs	r2, #0
 8006614:	2180      	movs	r1, #128	; 0x80
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 f9c7 	bl	80079aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2240      	movs	r2, #64	; 0x40
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6852      	ldr	r2, [r2, #4]
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	4611      	mov	r1, r2
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
  }

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2204      	movs	r2, #4
 80066a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d105      	bne.n	80066d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d10b      	bne.n	8006708 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d005      	beq.n	800673a <USBD_StdDevReq+0x26>
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d84f      	bhi.n	80067d2 <USBD_StdDevReq+0xbe>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <USBD_StdDevReq+0x36>
 8006736:	2b20      	cmp	r3, #32
 8006738:	d14b      	bne.n	80067d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
      break;
 8006748:	e048      	b.n	80067dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b09      	cmp	r3, #9
 8006750:	d839      	bhi.n	80067c6 <USBD_StdDevReq+0xb2>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <USBD_StdDevReq+0x44>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067bd 	.word	0x080067bd
 8006760:	080067c7 	.word	0x080067c7
 8006764:	080067b3 	.word	0x080067b3
 8006768:	080067c7 	.word	0x080067c7
 800676c:	0800678b 	.word	0x0800678b
 8006770:	08006781 	.word	0x08006781
 8006774:	080067c7 	.word	0x080067c7
 8006778:	0800679f 	.word	0x0800679f
 800677c:	08006795 	.word	0x08006795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9dc 	bl	8006b40 <USBD_GetDescriptor>
          break;
 8006788:	e022      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb3f 	bl	8006e10 <USBD_SetAddress>
          break;
 8006792:	e01d      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fb7e 	bl	8006e98 <USBD_SetConfig>
          break;
 800679c:	e018      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fc07 	bl	8006fb4 <USBD_GetConfig>
          break;
 80067a6:	e013      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fc37 	bl	800701e <USBD_GetStatus>
          break;
 80067b0:	e00e      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fc65 	bl	8007084 <USBD_SetFeature>
          break;
 80067ba:	e009      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fc74 	bl	80070ac <USBD_ClrFeature>
          break;
 80067c4:	e004      	b.n	80067d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fccc 	bl	8007166 <USBD_CtlError>
          break;
 80067ce:	bf00      	nop
      }
      break;
 80067d0:	e004      	b.n	80067dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fcc6 	bl	8007166 <USBD_CtlError>
      break;
 80067da:	bf00      	nop
  }

  return ret;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d005      	beq.n	800680e <USBD_StdItfReq+0x26>
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d82e      	bhi.n	8006864 <USBD_StdItfReq+0x7c>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <USBD_StdItfReq+0x26>
 800680a:	2b20      	cmp	r3, #32
 800680c:	d12a      	bne.n	8006864 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	3b01      	subs	r3, #1
 8006816:	2b02      	cmp	r3, #2
 8006818:	d81d      	bhi.n	8006856 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	889b      	ldrh	r3, [r3, #4]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d813      	bhi.n	800684c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d110      	bne.n	8006860 <USBD_StdItfReq+0x78>
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10d      	bne.n	8006860 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fd56 	bl	80072f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800684a:	e009      	b.n	8006860 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fc89 	bl	8007166 <USBD_CtlError>
          break;
 8006854:	e004      	b.n	8006860 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fc84 	bl	8007166 <USBD_CtlError>
          break;
 800685e:	e000      	b.n	8006862 <USBD_StdItfReq+0x7a>
          break;
 8006860:	bf00      	nop
      }
      break;
 8006862:	e004      	b.n	800686e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fc7d 	bl	8007166 <USBD_CtlError>
      break;
 800686c:	bf00      	nop
  }

  return USBD_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d007      	beq.n	80068a8 <USBD_StdEPReq+0x30>
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	f200 8146 	bhi.w	8006b2a <USBD_StdEPReq+0x2b2>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <USBD_StdEPReq+0x40>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	f040 8141 	bne.w	8006b2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
      break;
 80068b6:	e13d      	b.n	8006b34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d10a      	bne.n	80068da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	e12d      	b.n	8006b36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d007      	beq.n	80068f2 <USBD_StdEPReq+0x7a>
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	f300 811b 	bgt.w	8006b1e <USBD_StdEPReq+0x2a6>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d072      	beq.n	80069d2 <USBD_StdEPReq+0x15a>
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d03a      	beq.n	8006966 <USBD_StdEPReq+0xee>
 80068f0:	e115      	b.n	8006b1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d002      	beq.n	8006902 <USBD_StdEPReq+0x8a>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d015      	beq.n	800692c <USBD_StdEPReq+0xb4>
 8006900:	e02b      	b.n	800695a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00c      	beq.n	8006922 <USBD_StdEPReq+0xaa>
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d009      	beq.n	8006922 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f88e 	bl	8007a34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f88a 	bl	8007a34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006920:	e020      	b.n	8006964 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc1e 	bl	8007166 <USBD_CtlError>
              break;
 800692a:	e01b      	b.n	8006964 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10e      	bne.n	8006952 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <USBD_StdEPReq+0xda>
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b80      	cmp	r3, #128	; 0x80
 800693e:	d008      	beq.n	8006952 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f871 	bl	8007a34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fccf 	bl	80072f6 <USBD_CtlSendStatus>

              break;
 8006958:	e004      	b.n	8006964 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc02 	bl	8007166 <USBD_CtlError>
              break;
 8006962:	bf00      	nop
          }
          break;
 8006964:	e0e0      	b.n	8006b28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	2b02      	cmp	r3, #2
 800696e:	d002      	beq.n	8006976 <USBD_StdEPReq+0xfe>
 8006970:	2b03      	cmp	r3, #3
 8006972:	d015      	beq.n	80069a0 <USBD_StdEPReq+0x128>
 8006974:	e026      	b.n	80069c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <USBD_StdEPReq+0x11e>
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	2b80      	cmp	r3, #128	; 0x80
 8006980:	d009      	beq.n	8006996 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 f854 	bl	8007a34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f850 	bl	8007a34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006994:	e01c      	b.n	80069d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fbe4 	bl	8007166 <USBD_CtlError>
              break;
 800699e:	e017      	b.n	80069d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	885b      	ldrh	r3, [r3, #2]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d112      	bne.n	80069ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 f85b 	bl	8007a72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc9a 	bl	80072f6 <USBD_CtlSendStatus>
              }
              break;
 80069c2:	e004      	b.n	80069ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fbcd 	bl	8007166 <USBD_CtlError>
              break;
 80069cc:	e000      	b.n	80069d0 <USBD_StdEPReq+0x158>
              break;
 80069ce:	bf00      	nop
          }
          break;
 80069d0:	e0aa      	b.n	8006b28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d002      	beq.n	80069e2 <USBD_StdEPReq+0x16a>
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d032      	beq.n	8006a46 <USBD_StdEPReq+0x1ce>
 80069e0:	e097      	b.n	8006b12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <USBD_StdEPReq+0x180>
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d004      	beq.n	80069f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fbb8 	bl	8007166 <USBD_CtlError>
                break;
 80069f6:	e091      	b.n	8006b1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0b      	bge.n	8006a18 <USBD_StdEPReq+0x1a0>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	3310      	adds	r3, #16
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	e00b      	b.n	8006a30 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3304      	adds	r3, #4
 8006a30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fbfb 	bl	800723a <USBD_CtlSendData>
              break;
 8006a44:	e06a      	b.n	8006b1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da11      	bge.n	8006a72 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	3318      	adds	r3, #24
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d117      	bne.n	8006a98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fb7b 	bl	8007166 <USBD_CtlError>
                  break;
 8006a70:	e054      	b.n	8006b1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb68 	bl	8007166 <USBD_CtlError>
                  break;
 8006a96:	e041      	b.n	8006b1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	da0b      	bge.n	8006ab8 <USBD_StdEPReq+0x240>
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	3310      	adds	r3, #16
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	e00b      	b.n	8006ad0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	3304      	adds	r3, #4
 8006ad0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <USBD_StdEPReq+0x266>
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d103      	bne.n	8006ae6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e00e      	b.n	8006b04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ffe0 	bl	8007ab0 <USBD_LL_IsStallEP>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e002      	b.n	8006b04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2202      	movs	r2, #2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fb95 	bl	800723a <USBD_CtlSendData>
              break;
 8006b10:	e004      	b.n	8006b1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fb26 	bl	8007166 <USBD_CtlError>
              break;
 8006b1a:	bf00      	nop
          }
          break;
 8006b1c:	e004      	b.n	8006b28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb20 	bl	8007166 <USBD_CtlError>
          break;
 8006b26:	bf00      	nop
      }
      break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fb1a 	bl	8007166 <USBD_CtlError>
      break;
 8006b32:	bf00      	nop
  }

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	f200 8128 	bhi.w	8006db6 <USBD_GetDescriptor+0x276>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USBD_GetDescriptor+0x2c>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006be1 	.word	0x08006be1
 8006b78:	08006db7 	.word	0x08006db7
 8006b7c:	08006db7 	.word	0x08006db7
 8006b80:	08006d57 	.word	0x08006d57
 8006b84:	08006d83 	.word	0x08006d83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	7c12      	ldrb	r2, [r2, #16]
 8006b94:	f107 0108 	add.w	r1, r7, #8
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	60f8      	str	r0, [r7, #12]
      break;
 8006b9e:	e112      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7c1b      	ldrb	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10d      	bne.n	8006bc4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	f107 0208 	add.w	r2, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bc2:	e100      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	f107 0208 	add.w	r2, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	2202      	movs	r2, #2
 8006bdc:	701a      	strb	r2, [r3, #0]
      break;
 8006bde:	e0f2      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	885b      	ldrh	r3, [r3, #2]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	f200 80ac 	bhi.w	8006d44 <USBD_GetDescriptor+0x204>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <USBD_GetDescriptor+0xb4>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006cdd 	.word	0x08006cdd
 8006c08:	08006d11 	.word	0x08006d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	7c12      	ldrb	r2, [r2, #16]
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2e:	e091      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa97 	bl	8007166 <USBD_CtlError>
            err++;
 8006c38:	7afb      	ldrb	r3, [r7, #11]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3e:	e089      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c62:	e077      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa7d 	bl	8007166 <USBD_CtlError>
            err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
          break;
 8006c72:	e06f      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c96:	e05d      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa63 	bl	8007166 <USBD_CtlError>
            err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca6:	e055      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cca:	e043      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa49 	bl	8007166 <USBD_CtlError>
            err++;
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cda:	e03b      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfe:	e029      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa2f 	bl	8007166 <USBD_CtlError>
            err++;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0e:	e021      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d32:	e00f      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa15 	bl	8007166 <USBD_CtlError>
            err++;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	72fb      	strb	r3, [r7, #11]
          break;
 8006d42:	e007      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa0d 	bl	8007166 <USBD_CtlError>
          err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006d52:	e038      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
 8006d54:	e037      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7c1b      	ldrb	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	f107 0208 	add.w	r2, r7, #8
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4798      	blx	r3
 8006d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d70:	e029      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9f6 	bl	8007166 <USBD_CtlError>
        err++;
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d80:	e021      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c1b      	ldrb	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
 8006d9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	2207      	movs	r2, #7
 8006da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006da4:	e00f      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f9dc 	bl	8007166 <USBD_CtlError>
        err++;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	3301      	adds	r3, #1
 8006db2:	72fb      	strb	r3, [r7, #11]
      break;
 8006db4:	e007      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f9d4 	bl	8007166 <USBD_CtlError>
      err++;
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc4:	bf00      	nop
  }

  if (err != 0U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11c      	bne.n	8006e06 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006dcc:	893b      	ldrh	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d011      	beq.n	8006df6 <USBD_GetDescriptor+0x2b6>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00d      	beq.n	8006df6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88da      	ldrh	r2, [r3, #6]
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	4293      	cmp	r3, r2
 8006de2:	bf28      	it	cs
 8006de4:	4613      	movcs	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dea:	893b      	ldrh	r3, [r7, #8]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa22 	bl	800723a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa79 	bl	80072f6 <USBD_CtlSendStatus>
 8006e04:	e000      	b.n	8006e08 <USBD_GetDescriptor+0x2c8>
    return;
 8006e06:	bf00      	nop
    }
  }
}
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	889b      	ldrh	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d130      	bne.n	8006e84 <USBD_SetAddress+0x74>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d12c      	bne.n	8006e84 <USBD_SetAddress+0x74>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e30:	d828      	bhi.n	8006e84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	885b      	ldrh	r3, [r3, #2]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d104      	bne.n	8006e52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f98b 	bl	8007166 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e50:	e01d      	b.n	8006e8e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fe52 	bl	8007b08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa46 	bl	80072f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	e009      	b.n	8006e8e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	e004      	b.n	8006e8e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f96d 	bl	8007166 <USBD_CtlError>
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006eac:	4b40      	ldr	r3, [pc, #256]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d904      	bls.n	8006ebe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f955 	bl	8007166 <USBD_CtlError>
 8006ebc:	e075      	b.n	8006faa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d002      	beq.n	8006ece <USBD_SetConfig+0x36>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d023      	beq.n	8006f14 <USBD_SetConfig+0x7c>
 8006ecc:	e062      	b.n	8006f94 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ece:	4b38      	ldr	r3, [pc, #224]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01a      	beq.n	8006f0c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006ed6:	4b36      	ldr	r3, [pc, #216]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ee8:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff f9e7 	bl	80062c2 <USBD_SetClassConfig>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d104      	bne.n	8006f04 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f932 	bl	8007166 <USBD_CtlError>
            return;
 8006f02:	e052      	b.n	8006faa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9f6 	bl	80072f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f0a:	e04e      	b.n	8006faa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9f2 	bl	80072f6 <USBD_CtlSendStatus>
        break;
 8006f12:	e04a      	b.n	8006faa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f14:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d112      	bne.n	8006f42 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f24:	4b22      	ldr	r3, [pc, #136]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f2e:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff f9e3 	bl	8006300 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9db 	bl	80072f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f40:	e033      	b.n	8006faa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d01d      	beq.n	8006f8c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff f9d1 	bl	8006300 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff f9a7 	bl	80062c2 <USBD_SetClassConfig>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d104      	bne.n	8006f84 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f8f2 	bl	8007166 <USBD_CtlError>
            return;
 8006f82:	e012      	b.n	8006faa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9b6 	bl	80072f6 <USBD_CtlSendStatus>
        break;
 8006f8a:	e00e      	b.n	8006faa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f9b2 	bl	80072f6 <USBD_CtlSendStatus>
        break;
 8006f92:	e00a      	b.n	8006faa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8e5 	bl	8007166 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <USBD_SetConfig+0x118>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff f9ac 	bl	8006300 <USBD_ClrClassConfig>
        break;
 8006fa8:	bf00      	nop
    }
  }
}
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000310 	.word	0x20000310

08006fb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d004      	beq.n	8006fd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f8cc 	bl	8007166 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fce:	e022      	b.n	8007016 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	dc02      	bgt.n	8006fe0 <USBD_GetConfig+0x2c>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dc03      	bgt.n	8006fe6 <USBD_GetConfig+0x32>
 8006fde:	e015      	b.n	800700c <USBD_GetConfig+0x58>
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d00b      	beq.n	8006ffc <USBD_GetConfig+0x48>
 8006fe4:	e012      	b.n	800700c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f920 	bl	800723a <USBD_CtlSendData>
        break;
 8006ffa:	e00c      	b.n	8007016 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	2201      	movs	r2, #1
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f918 	bl	800723a <USBD_CtlSendData>
        break;
 800700a:	e004      	b.n	8007016 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8a9 	bl	8007166 <USBD_CtlError>
        break;
 8007014:	bf00      	nop
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702e:	3b01      	subs	r3, #1
 8007030:	2b02      	cmp	r3, #2
 8007032:	d81e      	bhi.n	8007072 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	88db      	ldrh	r3, [r3, #6]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d004      	beq.n	8007046 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f891 	bl	8007166 <USBD_CtlError>
        break;
 8007044:	e01a      	b.n	800707c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f043 0202 	orr.w	r2, r3, #2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	330c      	adds	r3, #12
 8007066:	2202      	movs	r2, #2
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8e5 	bl	800723a <USBD_CtlSendData>
      break;
 8007070:	e004      	b.n	800707c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f876 	bl	8007166 <USBD_CtlError>
      break;
 800707a:	bf00      	nop
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d106      	bne.n	80070a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f929 	bl	80072f6 <USBD_CtlSendStatus>
  }
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070bc:	3b01      	subs	r3, #1
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d80b      	bhi.n	80070da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	885b      	ldrh	r3, [r3, #2]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10c      	bne.n	80070e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f90f 	bl	80072f6 <USBD_CtlSendStatus>
      }
      break;
 80070d8:	e004      	b.n	80070e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f842 	bl	8007166 <USBD_CtlError>
      break;
 80070e2:	e000      	b.n	80070e6 <USBD_ClrFeature+0x3a>
      break;
 80070e4:	bf00      	nop
  }
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785a      	ldrb	r2, [r3, #1]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3302      	adds	r3, #2
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29a      	uxth	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	3303      	adds	r3, #3
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	b29b      	uxth	r3, r3
 800711c:	4413      	add	r3, r2
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	3304      	adds	r3, #4
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b29a      	uxth	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3305      	adds	r3, #5
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	b29b      	uxth	r3, r3
 8007138:	4413      	add	r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	3306      	adds	r3, #6
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	3307      	adds	r3, #7
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	b29b      	uxth	r3, r3
 8007154:	4413      	add	r3, r2
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	80da      	strh	r2, [r3, #6]

}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007170:	2180      	movs	r1, #128	; 0x80
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc5e 	bl	8007a34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fc5a 	bl	8007a34 <USBD_LL_StallEP>
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d032      	beq.n	8007204 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f834 	bl	800720c <USBD_GetLen>
 80071a4:	4603      	mov	r3, r0
 80071a6:	3301      	adds	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	75fa      	strb	r2, [r7, #23]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	75fa      	strb	r2, [r7, #23]
 80071ca:	461a      	mov	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4413      	add	r3, r2
 80071d0:	2203      	movs	r2, #3
 80071d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80071d4:	e012      	b.n	80071fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	60fa      	str	r2, [r7, #12]
 80071dc:	7dfa      	ldrb	r2, [r7, #23]
 80071de:	1c51      	adds	r1, r2, #1
 80071e0:	75f9      	strb	r1, [r7, #23]
 80071e2:	4611      	mov	r1, r2
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	440a      	add	r2, r1
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	75fa      	strb	r2, [r7, #23]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4413      	add	r3, r2
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e8      	bne.n	80071d6 <USBD_GetString+0x4e>
    }
  }
}
 8007204:	bf00      	nop
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007218:	e005      	b.n	8007226 <USBD_GetLen+0x1a>
  {
    len++;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	3301      	adds	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3301      	adds	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f5      	bne.n	800721a <USBD_GetLen+0xe>
  }

  return len;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	4613      	mov	r3, r2
 8007246:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2202      	movs	r2, #2
 800724c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fc6f 	bl	8007b46 <USBD_LL_Transmit>

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	2100      	movs	r1, #0
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 fc5d 	bl	8007b46 <USBD_LL_Transmit>

  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	4613      	mov	r3, r2
 80072a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2203      	movs	r2, #3
 80072a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fc62 	bl	8007b8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	4613      	mov	r3, r2
 80072de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fc50 	bl	8007b8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2204      	movs	r2, #4
 8007302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007306:	2300      	movs	r3, #0
 8007308:	2200      	movs	r2, #0
 800730a:	2100      	movs	r1, #0
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fc1a 	bl	8007b46 <USBD_LL_Transmit>

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2205      	movs	r2, #5
 8007328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800732c:	2300      	movs	r3, #0
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc2a 	bl	8007b8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007348:	2200      	movs	r2, #0
 800734a:	4912      	ldr	r1, [pc, #72]	; (8007394 <MX_USB_DEVICE_Init+0x50>)
 800734c:	4812      	ldr	r0, [pc, #72]	; (8007398 <MX_USB_DEVICE_Init+0x54>)
 800734e:	f7fe ff5e 	bl	800620e <USBD_Init>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007358:	f7f9 fb0a 	bl	8000970 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800735c:	490f      	ldr	r1, [pc, #60]	; (800739c <MX_USB_DEVICE_Init+0x58>)
 800735e:	480e      	ldr	r0, [pc, #56]	; (8007398 <MX_USB_DEVICE_Init+0x54>)
 8007360:	f7fe ff80 	bl	8006264 <USBD_RegisterClass>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800736a:	f7f9 fb01 	bl	8000970 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800736e:	490c      	ldr	r1, [pc, #48]	; (80073a0 <MX_USB_DEVICE_Init+0x5c>)
 8007370:	4809      	ldr	r0, [pc, #36]	; (8007398 <MX_USB_DEVICE_Init+0x54>)
 8007372:	f7fe feb1 	bl	80060d8 <USBD_CDC_RegisterInterface>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800737c:	f7f9 faf8 	bl	8000970 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007380:	4805      	ldr	r0, [pc, #20]	; (8007398 <MX_USB_DEVICE_Init+0x54>)
 8007382:	f7fe ff88 	bl	8006296 <USBD_Start>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800738c:	f7f9 faf0 	bl	8000970 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007390:	bf00      	nop
 8007392:	bd80      	pop	{r7, pc}
 8007394:	2000012c 	.word	0x2000012c
 8007398:	20000588 	.word	0x20000588
 800739c:	20000018 	.word	0x20000018
 80073a0:	2000011c 	.word	0x2000011c

080073a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	4905      	ldr	r1, [pc, #20]	; (80073c0 <CDC_Init_FS+0x1c>)
 80073ac:	4805      	ldr	r0, [pc, #20]	; (80073c4 <CDC_Init_FS+0x20>)
 80073ae:	f7fe fea9 	bl	8006104 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073b2:	4905      	ldr	r1, [pc, #20]	; (80073c8 <CDC_Init_FS+0x24>)
 80073b4:	4803      	ldr	r0, [pc, #12]	; (80073c4 <CDC_Init_FS+0x20>)
 80073b6:	f7fe febe 	bl	8006136 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000c34 	.word	0x20000c34
 80073c4:	20000588 	.word	0x20000588
 80073c8:	2000084c 	.word	0x2000084c

080073cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
	...

080073dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
 80073e8:	4613      	mov	r3, r2
 80073ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	2b23      	cmp	r3, #35	; 0x23
 80073f0:	d84a      	bhi.n	8007488 <CDC_Control_FS+0xac>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <CDC_Control_FS+0x1c>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	08007489 	.word	0x08007489
 80073fc:	08007489 	.word	0x08007489
 8007400:	08007489 	.word	0x08007489
 8007404:	08007489 	.word	0x08007489
 8007408:	08007489 	.word	0x08007489
 800740c:	08007489 	.word	0x08007489
 8007410:	08007489 	.word	0x08007489
 8007414:	08007489 	.word	0x08007489
 8007418:	08007489 	.word	0x08007489
 800741c:	08007489 	.word	0x08007489
 8007420:	08007489 	.word	0x08007489
 8007424:	08007489 	.word	0x08007489
 8007428:	08007489 	.word	0x08007489
 800742c:	08007489 	.word	0x08007489
 8007430:	08007489 	.word	0x08007489
 8007434:	08007489 	.word	0x08007489
 8007438:	08007489 	.word	0x08007489
 800743c:	08007489 	.word	0x08007489
 8007440:	08007489 	.word	0x08007489
 8007444:	08007489 	.word	0x08007489
 8007448:	08007489 	.word	0x08007489
 800744c:	08007489 	.word	0x08007489
 8007450:	08007489 	.word	0x08007489
 8007454:	08007489 	.word	0x08007489
 8007458:	08007489 	.word	0x08007489
 800745c:	08007489 	.word	0x08007489
 8007460:	08007489 	.word	0x08007489
 8007464:	08007489 	.word	0x08007489
 8007468:	08007489 	.word	0x08007489
 800746c:	08007489 	.word	0x08007489
 8007470:	08007489 	.word	0x08007489
 8007474:	08007489 	.word	0x08007489
 8007478:	08007489 	.word	0x08007489
 800747c:	08007489 	.word	0x08007489
 8007480:	08007489 	.word	0x08007489
 8007484:	08007489 	.word	0x08007489
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007488:	bf00      	nop
  }

  return (USBD_OK);
 800748a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop

08007498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t one_byte;

  if( *Len >= 1 ) {
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d006      	beq.n	80074b8 <CDC_Receive_FS+0x20>
	one_byte = Buf[ 0 ];
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	73fb      	strb	r3, [r7, #15]
	poll_usb_command( one_byte );
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7f8 ff9a 	bl	80003ec <poll_usb_command>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	4805      	ldr	r0, [pc, #20]	; (80074d0 <CDC_Receive_FS+0x38>)
 80074bc:	f7fe fe3b 	bl	8006136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074c0:	4803      	ldr	r0, [pc, #12]	; (80074d0 <CDC_Receive_FS+0x38>)
 80074c2:	f7fe fe7a 	bl	80061ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80074c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000588 	.word	0x20000588

080074d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <CDC_Transmit_FS+0x48>)
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00b      	b.n	8007512 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4806      	ldr	r0, [pc, #24]	; (800751c <CDC_Transmit_FS+0x48>)
 8007502:	f7fe fdff 	bl	8006104 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007506:	4805      	ldr	r0, [pc, #20]	; (800751c <CDC_Transmit_FS+0x48>)
 8007508:	f7fe fe28 	bl	800615c <USBD_CDC_TransmitPacket>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000588 	.word	0x20000588

08007520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2212      	movs	r2, #18
 8007530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007532:	4b03      	ldr	r3, [pc, #12]	; (8007540 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20000148 	.word	0x20000148

08007544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2204      	movs	r2, #4
 8007554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007556:	4b03      	ldr	r3, [pc, #12]	; (8007564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	2000015c 	.word	0x2000015c

08007568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4907      	ldr	r1, [pc, #28]	; (800759c <USBD_FS_ProductStrDescriptor+0x34>)
 800757e:	4808      	ldr	r0, [pc, #32]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007580:	f7ff fe02 	bl	8007188 <USBD_GetString>
 8007584:	e004      	b.n	8007590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4904      	ldr	r1, [pc, #16]	; (800759c <USBD_FS_ProductStrDescriptor+0x34>)
 800758a:	4805      	ldr	r0, [pc, #20]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800758c:	f7ff fdfc 	bl	8007188 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000101c 	.word	0x2000101c
 80075a0:	08008630 	.word	0x08008630

080075a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	6039      	str	r1, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	4904      	ldr	r1, [pc, #16]	; (80075c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b4:	4804      	ldr	r0, [pc, #16]	; (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075b6:	f7ff fde7 	bl	8007188 <USBD_GetString>
  return USBD_StrDesc;
 80075ba:	4b02      	ldr	r3, [pc, #8]	; (80075c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	2000101c 	.word	0x2000101c
 80075c8:	08008648 	.word	0x08008648

080075cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	221a      	movs	r2, #26
 80075dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075de:	f000 f843 	bl	8007668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075e2:	4b02      	ldr	r3, [pc, #8]	; (80075ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000160 	.word	0x20000160

080075f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4907      	ldr	r1, [pc, #28]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007606:	4808      	ldr	r0, [pc, #32]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007608:	f7ff fdbe 	bl	8007188 <USBD_GetString>
 800760c:	e004      	b.n	8007618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4904      	ldr	r1, [pc, #16]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007612:	4805      	ldr	r0, [pc, #20]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007614:	f7ff fdb8 	bl	8007188 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	2000101c 	.word	0x2000101c
 8007628:	0800865c 	.word	0x0800865c

0800762c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	6039      	str	r1, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d105      	bne.n	800764a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4907      	ldr	r1, [pc, #28]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007642:	4808      	ldr	r0, [pc, #32]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007644:	f7ff fda0 	bl	8007188 <USBD_GetString>
 8007648:	e004      	b.n	8007654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4904      	ldr	r1, [pc, #16]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800764e:	4805      	ldr	r0, [pc, #20]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007650:	f7ff fd9a 	bl	8007188 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000101c 	.word	0x2000101c
 8007664:	08008668 	.word	0x08008668

08007668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <Get_SerialNum+0x44>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007674:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <Get_SerialNum+0x48>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <Get_SerialNum+0x4c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800768e:	2208      	movs	r2, #8
 8007690:	4909      	ldr	r1, [pc, #36]	; (80076b8 <Get_SerialNum+0x50>)
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f814 	bl	80076c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007698:	2204      	movs	r2, #4
 800769a:	4908      	ldr	r1, [pc, #32]	; (80076bc <Get_SerialNum+0x54>)
 800769c:	68b8      	ldr	r0, [r7, #8]
 800769e:	f000 f80f 	bl	80076c0 <IntToUnicode>
  }
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	1ffff7e8 	.word	0x1ffff7e8
 80076b0:	1ffff7ec 	.word	0x1ffff7ec
 80076b4:	1ffff7f0 	.word	0x1ffff7f0
 80076b8:	20000162 	.word	0x20000162
 80076bc:	20000172 	.word	0x20000172

080076c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e027      	b.n	8007728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0f1b      	lsrs	r3, r3, #28
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d80b      	bhi.n	80076f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0f1b      	lsrs	r3, r3, #28
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4619      	mov	r1, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	440b      	add	r3, r1
 80076f0:	3230      	adds	r2, #48	; 0x30
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e00a      	b.n	800770e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	0f1b      	lsrs	r3, r3, #28
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4619      	mov	r1, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	440b      	add	r3, r1
 8007708:	3237      	adds	r2, #55	; 0x37
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	3301      	adds	r3, #1
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	3301      	adds	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
 8007728:	7dfa      	ldrb	r2, [r7, #23]
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	429a      	cmp	r2, r3
 800772e:	d3d3      	bcc.n	80076d8 <IntToUnicode+0x18>
  }
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a0d      	ldr	r2, [pc, #52]	; (8007780 <HAL_PCD_MspInit+0x44>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d113      	bne.n	8007776 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <HAL_PCD_MspInit+0x48>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4a0c      	ldr	r2, [pc, #48]	; (8007784 <HAL_PCD_MspInit+0x48>)
 8007754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007758:	61d3      	str	r3, [r2, #28]
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_PCD_MspInit+0x48>)
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007766:	2200      	movs	r2, #0
 8007768:	2100      	movs	r1, #0
 800776a:	2014      	movs	r0, #20
 800776c:	f7f9 fb7d 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007770:	2014      	movs	r0, #20
 8007772:	f7f9 fb96 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	40005c00 	.word	0x40005c00
 8007784:	40021000 	.word	0x40021000

08007788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f7fe fdc1 	bl	8006326 <USBD_LL_SetupStage>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	440b      	add	r3, r1
 80077cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f7fe fdf3 	bl	80063c0 <USBD_LL_DataOutStage>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077f4:	78fa      	ldrb	r2, [r7, #3]
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	440b      	add	r3, r1
 8007802:	333c      	adds	r3, #60	; 0x3c
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	4619      	mov	r1, r3
 800780a:	f7fe fe4a 	bl	80064a2 <USBD_LL_DataInStage>
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007824:	4618      	mov	r0, r3
 8007826:	f7fe ff5a 	bl	80066de <USBD_LL_SOF>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d001      	beq.n	800784a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007846:	f7f9 f893 	bl	8000970 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007850:	7bfa      	ldrb	r2, [r7, #15]
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe ff0a 	bl	800666e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe fec3 	bl	80065ec <USBD_LL_Reset>
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe ff04 	bl	800668c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <HAL_PCD_SuspendCallback+0x30>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4a03      	ldr	r2, [pc, #12]	; (80078a0 <HAL_PCD_SuspendCallback+0x30>)
 8007892:	f043 0306 	orr.w	r3, r3, #6
 8007896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	e000ed00 	.word	0xe000ed00

080078a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fefe 	bl	80066b4 <USBD_LL_Resume>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078c8:	4a28      	ldr	r2, [pc, #160]	; (800796c <USBD_LL_Init+0xac>)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a26      	ldr	r2, [pc, #152]	; (800796c <USBD_LL_Init+0xac>)
 80078d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078d8:	4b24      	ldr	r3, [pc, #144]	; (800796c <USBD_LL_Init+0xac>)
 80078da:	4a25      	ldr	r2, [pc, #148]	; (8007970 <USBD_LL_Init+0xb0>)
 80078dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078de:	4b23      	ldr	r3, [pc, #140]	; (800796c <USBD_LL_Init+0xac>)
 80078e0:	2208      	movs	r2, #8
 80078e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078e4:	4b21      	ldr	r3, [pc, #132]	; (800796c <USBD_LL_Init+0xac>)
 80078e6:	2202      	movs	r2, #2
 80078e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <USBD_LL_Init+0xac>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078f0:	4b1e      	ldr	r3, [pc, #120]	; (800796c <USBD_LL_Init+0xac>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078f6:	4b1d      	ldr	r3, [pc, #116]	; (800796c <USBD_LL_Init+0xac>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078fc:	481b      	ldr	r0, [pc, #108]	; (800796c <USBD_LL_Init+0xac>)
 80078fe:	f7f9 fca0 	bl	8001242 <HAL_PCD_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007908:	f7f9 f832 	bl	8000970 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007912:	2318      	movs	r3, #24
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	f7fa ffe2 	bl	80028e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007922:	2358      	movs	r3, #88	; 0x58
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	f7fa ffda 	bl	80028e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007932:	23c0      	movs	r3, #192	; 0xc0
 8007934:	2200      	movs	r2, #0
 8007936:	2181      	movs	r1, #129	; 0x81
 8007938:	f7fa ffd2 	bl	80028e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007942:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007946:	2200      	movs	r2, #0
 8007948:	2101      	movs	r1, #1
 800794a:	f7fa ffc9 	bl	80028e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007958:	2200      	movs	r2, #0
 800795a:	2182      	movs	r1, #130	; 0x82
 800795c:	f7fa ffc0 	bl	80028e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000121c 	.word	0x2000121c
 8007970:	40005c00 	.word	0x40005c00

08007974 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800798a:	4618      	mov	r0, r3
 800798c:	f7f9 fd64 	bl	8001458 <HAL_PCD_Start>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f94e 	bl	8007c38 <USBD_Get_USB_Status>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	4608      	mov	r0, r1
 80079b4:	4611      	mov	r1, r2
 80079b6:	461a      	mov	r2, r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	70fb      	strb	r3, [r7, #3]
 80079bc:	460b      	mov	r3, r1
 80079be:	70bb      	strb	r3, [r7, #2]
 80079c0:	4613      	mov	r3, r2
 80079c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079d2:	78bb      	ldrb	r3, [r7, #2]
 80079d4:	883a      	ldrh	r2, [r7, #0]
 80079d6:	78f9      	ldrb	r1, [r7, #3]
 80079d8:	f7f9 fede 	bl	8001798 <HAL_PCD_EP_Open>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f928 	bl	8007c38 <USBD_Get_USB_Status>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f9 ff25 	bl	8001864 <HAL_PCD_EP_Close>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f909 	bl	8007c38 <USBD_Get_USB_Status>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7f9 ffe5 	bl	8001a22 <HAL_PCD_EP_SetStall>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f8ea 	bl	8007c38 <USBD_Get_USB_Status>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fa f826 	bl	8001ae2 <HAL_PCD_EP_ClrStall>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f8cb 	bl	8007c38 <USBD_Get_USB_Status>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ac2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da0c      	bge.n	8007ae6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	440b      	add	r3, r1
 8007ae0:	3302      	adds	r3, #2
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	e00b      	b.n	8007afe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	440b      	add	r3, r1
 8007af8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007afc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 fe11 	bl	800174e <HAL_PCD_SetAddress>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f880 	bl	8007c38 <USBD_Get_USB_Status>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	461a      	mov	r2, r3
 8007b52:	460b      	mov	r3, r1
 8007b54:	72fb      	strb	r3, [r7, #11]
 8007b56:	4613      	mov	r3, r2
 8007b58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b68:	893b      	ldrh	r3, [r7, #8]
 8007b6a:	7af9      	ldrb	r1, [r7, #11]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	f7f9 ff15 	bl	800199c <HAL_PCD_EP_Transmit>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f85d 	bl	8007c38 <USBD_Get_USB_Status>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b82:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	461a      	mov	r2, r3
 8007b98:	460b      	mov	r3, r1
 8007b9a:	72fb      	strb	r3, [r7, #11]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bae:	893b      	ldrh	r3, [r7, #8]
 8007bb0:	7af9      	ldrb	r1, [r7, #11]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	f7f9 fe9e 	bl	80018f4 <HAL_PCD_EP_Receive>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f83a 	bl	8007c38 <USBD_Get_USB_Status>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 fec0 	bl	800196e <HAL_PCD_EP_GetRxCount>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <USBD_static_malloc+0x14>)
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr
 8007c0c:	20000314 	.word	0x20000314

08007c10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d817      	bhi.n	8007c7c <USBD_Get_USB_Status+0x44>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_Get_USB_Status+0x1c>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c6b 	.word	0x08007c6b
 8007c5c:	08007c71 	.word	0x08007c71
 8007c60:	08007c77 	.word	0x08007c77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
    break;
 8007c68:	e00b      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6e:	e008      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
    break;
 8007c74:	e005      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c76:	2302      	movs	r3, #2
 8007c78:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7a:	e002      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	bf00      	nop
  }
  return usb_status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	; (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	2000017c 	.word	0x2000017c

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	4d0c      	ldr	r5, [pc, #48]	; (8007cd4 <__libc_init_array+0x38>)
 8007ca2:	4c0d      	ldr	r4, [pc, #52]	; (8007cd8 <__libc_init_array+0x3c>)
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	f000 fc70 	bl	8008590 <_init>
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	4d0a      	ldr	r5, [pc, #40]	; (8007cdc <__libc_init_array+0x40>)
 8007cb4:	4c0a      	ldr	r4, [pc, #40]	; (8007ce0 <__libc_init_array+0x44>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	080086bc 	.word	0x080086bc
 8007cd8:	080086bc 	.word	0x080086bc
 8007cdc:	080086bc 	.word	0x080086bc
 8007ce0:	080086c0 	.word	0x080086c0

08007ce4 <memset>:
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4402      	add	r2, r0
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d100      	bne.n	8007cee <memset+0xa>
 8007cec:	4770      	bx	lr
 8007cee:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf2:	e7f9      	b.n	8007ce8 <memset+0x4>

08007cf4 <sniprintf>:
 8007cf4:	b40c      	push	{r2, r3}
 8007cf6:	b530      	push	{r4, r5, lr}
 8007cf8:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <sniprintf+0x64>)
 8007cfa:	1e0c      	subs	r4, r1, #0
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	b09d      	sub	sp, #116	; 0x74
 8007d00:	da08      	bge.n	8007d14 <sniprintf+0x20>
 8007d02:	238b      	movs	r3, #139	; 0x8b
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	b01d      	add	sp, #116	; 0x74
 8007d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d10:	b002      	add	sp, #8
 8007d12:	4770      	bx	lr
 8007d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d1c:	bf0c      	ite	eq
 8007d1e:	4623      	moveq	r3, r4
 8007d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	9307      	str	r3, [sp, #28]
 8007d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d2c:	9002      	str	r0, [sp, #8]
 8007d2e:	9006      	str	r0, [sp, #24]
 8007d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d34:	4628      	mov	r0, r5
 8007d36:	ab21      	add	r3, sp, #132	; 0x84
 8007d38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d3a:	a902      	add	r1, sp, #8
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	f000 f869 	bl	8007e14 <_svfiprintf_r>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	bfbc      	itt	lt
 8007d46:	238b      	movlt	r3, #139	; 0x8b
 8007d48:	602b      	strlt	r3, [r5, #0]
 8007d4a:	2c00      	cmp	r4, #0
 8007d4c:	d0dd      	beq.n	8007d0a <sniprintf+0x16>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e7d9      	b.n	8007d0a <sniprintf+0x16>
 8007d56:	bf00      	nop
 8007d58:	2000017c 	.word	0x2000017c

08007d5c <__ssputs_r>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	688e      	ldr	r6, [r1, #8]
 8007d62:	4682      	mov	sl, r0
 8007d64:	429e      	cmp	r6, r3
 8007d66:	460c      	mov	r4, r1
 8007d68:	4690      	mov	r8, r2
 8007d6a:	461f      	mov	r7, r3
 8007d6c:	d838      	bhi.n	8007de0 <__ssputs_r+0x84>
 8007d6e:	898a      	ldrh	r2, [r1, #12]
 8007d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d74:	d032      	beq.n	8007ddc <__ssputs_r+0x80>
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	6909      	ldr	r1, [r1, #16]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	eba5 0901 	sub.w	r9, r5, r1
 8007d80:	6965      	ldr	r5, [r4, #20]
 8007d82:	444b      	add	r3, r9
 8007d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d8c:	106d      	asrs	r5, r5, #1
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	bf38      	it	cc
 8007d92:	461d      	movcc	r5, r3
 8007d94:	0553      	lsls	r3, r2, #21
 8007d96:	d531      	bpl.n	8007dfc <__ssputs_r+0xa0>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f000 fb53 	bl	8008444 <_malloc_r>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b950      	cbnz	r0, 8007db8 <__ssputs_r+0x5c>
 8007da2:	230c      	movs	r3, #12
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	f8ca 3000 	str.w	r3, [sl]
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	464a      	mov	r2, r9
 8007dba:	6921      	ldr	r1, [r4, #16]
 8007dbc:	f000 face 	bl	800835c <memcpy>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	6126      	str	r6, [r4, #16]
 8007dce:	444e      	add	r6, r9
 8007dd0:	6026      	str	r6, [r4, #0]
 8007dd2:	463e      	mov	r6, r7
 8007dd4:	6165      	str	r5, [r4, #20]
 8007dd6:	eba5 0509 	sub.w	r5, r5, r9
 8007dda:	60a5      	str	r5, [r4, #8]
 8007ddc:	42be      	cmp	r6, r7
 8007dde:	d900      	bls.n	8007de2 <__ssputs_r+0x86>
 8007de0:	463e      	mov	r6, r7
 8007de2:	4632      	mov	r2, r6
 8007de4:	4641      	mov	r1, r8
 8007de6:	6820      	ldr	r0, [r4, #0]
 8007de8:	f000 fac6 	bl	8008378 <memmove>
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	1b9b      	subs	r3, r3, r6
 8007df2:	4432      	add	r2, r6
 8007df4:	2000      	movs	r0, #0
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	6022      	str	r2, [r4, #0]
 8007dfa:	e7db      	b.n	8007db4 <__ssputs_r+0x58>
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	f000 fb7b 	bl	80084f8 <_realloc_r>
 8007e02:	4606      	mov	r6, r0
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1e1      	bne.n	8007dcc <__ssputs_r+0x70>
 8007e08:	4650      	mov	r0, sl
 8007e0a:	6921      	ldr	r1, [r4, #16]
 8007e0c:	f000 face 	bl	80083ac <_free_r>
 8007e10:	e7c7      	b.n	8007da2 <__ssputs_r+0x46>
	...

08007e14 <_svfiprintf_r>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	4698      	mov	r8, r3
 8007e1a:	898b      	ldrh	r3, [r1, #12]
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	061b      	lsls	r3, r3, #24
 8007e20:	460d      	mov	r5, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	b09d      	sub	sp, #116	; 0x74
 8007e26:	d50e      	bpl.n	8007e46 <_svfiprintf_r+0x32>
 8007e28:	690b      	ldr	r3, [r1, #16]
 8007e2a:	b963      	cbnz	r3, 8007e46 <_svfiprintf_r+0x32>
 8007e2c:	2140      	movs	r1, #64	; 0x40
 8007e2e:	f000 fb09 	bl	8008444 <_malloc_r>
 8007e32:	6028      	str	r0, [r5, #0]
 8007e34:	6128      	str	r0, [r5, #16]
 8007e36:	b920      	cbnz	r0, 8007e42 <_svfiprintf_r+0x2e>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	e0d1      	b.n	8007fe6 <_svfiprintf_r+0x1d2>
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	616b      	str	r3, [r5, #20]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4a:	2320      	movs	r3, #32
 8007e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e50:	2330      	movs	r3, #48	; 0x30
 8007e52:	f04f 0901 	mov.w	r9, #1
 8007e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008000 <_svfiprintf_r+0x1ec>
 8007e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e62:	4623      	mov	r3, r4
 8007e64:	469a      	mov	sl, r3
 8007e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e6a:	b10a      	cbz	r2, 8007e70 <_svfiprintf_r+0x5c>
 8007e6c:	2a25      	cmp	r2, #37	; 0x25
 8007e6e:	d1f9      	bne.n	8007e64 <_svfiprintf_r+0x50>
 8007e70:	ebba 0b04 	subs.w	fp, sl, r4
 8007e74:	d00b      	beq.n	8007e8e <_svfiprintf_r+0x7a>
 8007e76:	465b      	mov	r3, fp
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f7ff ff6d 	bl	8007d5c <__ssputs_r>
 8007e82:	3001      	adds	r0, #1
 8007e84:	f000 80aa 	beq.w	8007fdc <_svfiprintf_r+0x1c8>
 8007e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e8a:	445a      	add	r2, fp
 8007e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80a2 	beq.w	8007fdc <_svfiprintf_r+0x1c8>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea2:	f10a 0a01 	add.w	sl, sl, #1
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	9307      	str	r3, [sp, #28]
 8007eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eae:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb0:	4654      	mov	r4, sl
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb8:	4851      	ldr	r0, [pc, #324]	; (8008000 <_svfiprintf_r+0x1ec>)
 8007eba:	f000 fa41 	bl	8008340 <memchr>
 8007ebe:	9a04      	ldr	r2, [sp, #16]
 8007ec0:	b9d8      	cbnz	r0, 8007efa <_svfiprintf_r+0xe6>
 8007ec2:	06d0      	lsls	r0, r2, #27
 8007ec4:	bf44      	itt	mi
 8007ec6:	2320      	movmi	r3, #32
 8007ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ecc:	0711      	lsls	r1, r2, #28
 8007ece:	bf44      	itt	mi
 8007ed0:	232b      	movmi	r3, #43	; 0x2b
 8007ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eda:	2b2a      	cmp	r3, #42	; 0x2a
 8007edc:	d015      	beq.n	8007f0a <_svfiprintf_r+0xf6>
 8007ede:	4654      	mov	r4, sl
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f04f 0c0a 	mov.w	ip, #10
 8007ee6:	9a07      	ldr	r2, [sp, #28]
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eee:	3b30      	subs	r3, #48	; 0x30
 8007ef0:	2b09      	cmp	r3, #9
 8007ef2:	d94e      	bls.n	8007f92 <_svfiprintf_r+0x17e>
 8007ef4:	b1b0      	cbz	r0, 8007f24 <_svfiprintf_r+0x110>
 8007ef6:	9207      	str	r2, [sp, #28]
 8007ef8:	e014      	b.n	8007f24 <_svfiprintf_r+0x110>
 8007efa:	eba0 0308 	sub.w	r3, r0, r8
 8007efe:	fa09 f303 	lsl.w	r3, r9, r3
 8007f02:	4313      	orrs	r3, r2
 8007f04:	46a2      	mov	sl, r4
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	e7d2      	b.n	8007eb0 <_svfiprintf_r+0x9c>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	1d19      	adds	r1, r3, #4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	9103      	str	r1, [sp, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfbb      	ittet	lt
 8007f16:	425b      	neglt	r3, r3
 8007f18:	f042 0202 	orrlt.w	r2, r2, #2
 8007f1c:	9307      	strge	r3, [sp, #28]
 8007f1e:	9307      	strlt	r3, [sp, #28]
 8007f20:	bfb8      	it	lt
 8007f22:	9204      	strlt	r2, [sp, #16]
 8007f24:	7823      	ldrb	r3, [r4, #0]
 8007f26:	2b2e      	cmp	r3, #46	; 0x2e
 8007f28:	d10c      	bne.n	8007f44 <_svfiprintf_r+0x130>
 8007f2a:	7863      	ldrb	r3, [r4, #1]
 8007f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2e:	d135      	bne.n	8007f9c <_svfiprintf_r+0x188>
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	3402      	adds	r4, #2
 8007f34:	1d1a      	adds	r2, r3, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	9203      	str	r2, [sp, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfb8      	it	lt
 8007f3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008010 <_svfiprintf_r+0x1fc>
 8007f48:	2203      	movs	r2, #3
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	7821      	ldrb	r1, [r4, #0]
 8007f4e:	f000 f9f7 	bl	8008340 <memchr>
 8007f52:	b140      	cbz	r0, 8007f66 <_svfiprintf_r+0x152>
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	eba0 000a 	sub.w	r0, r0, sl
 8007f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	3401      	adds	r4, #1
 8007f62:	4303      	orrs	r3, r0
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6a:	2206      	movs	r2, #6
 8007f6c:	4825      	ldr	r0, [pc, #148]	; (8008004 <_svfiprintf_r+0x1f0>)
 8007f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f72:	f000 f9e5 	bl	8008340 <memchr>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d038      	beq.n	8007fec <_svfiprintf_r+0x1d8>
 8007f7a:	4b23      	ldr	r3, [pc, #140]	; (8008008 <_svfiprintf_r+0x1f4>)
 8007f7c:	bb1b      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x1b2>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	3307      	adds	r3, #7
 8007f82:	f023 0307 	bic.w	r3, r3, #7
 8007f86:	3308      	adds	r3, #8
 8007f88:	9303      	str	r3, [sp, #12]
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	4433      	add	r3, r6
 8007f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f90:	e767      	b.n	8007e62 <_svfiprintf_r+0x4e>
 8007f92:	460c      	mov	r4, r1
 8007f94:	2001      	movs	r0, #1
 8007f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f9a:	e7a5      	b.n	8007ee8 <_svfiprintf_r+0xd4>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f04f 0c0a 	mov.w	ip, #10
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	3401      	adds	r4, #1
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fae:	3a30      	subs	r2, #48	; 0x30
 8007fb0:	2a09      	cmp	r2, #9
 8007fb2:	d903      	bls.n	8007fbc <_svfiprintf_r+0x1a8>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0c5      	beq.n	8007f44 <_svfiprintf_r+0x130>
 8007fb8:	9105      	str	r1, [sp, #20]
 8007fba:	e7c3      	b.n	8007f44 <_svfiprintf_r+0x130>
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc4:	e7f0      	b.n	8007fa8 <_svfiprintf_r+0x194>
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4638      	mov	r0, r7
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <_svfiprintf_r+0x1f8>)
 8007fd0:	a904      	add	r1, sp, #16
 8007fd2:	f3af 8000 	nop.w
 8007fd6:	1c42      	adds	r2, r0, #1
 8007fd8:	4606      	mov	r6, r0
 8007fda:	d1d6      	bne.n	8007f8a <_svfiprintf_r+0x176>
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	065b      	lsls	r3, r3, #25
 8007fe0:	f53f af2c 	bmi.w	8007e3c <_svfiprintf_r+0x28>
 8007fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe6:	b01d      	add	sp, #116	; 0x74
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <_svfiprintf_r+0x1f8>)
 8007ff6:	a904      	add	r1, sp, #16
 8007ff8:	f000 f87c 	bl	80080f4 <_printf_i>
 8007ffc:	e7eb      	b.n	8007fd6 <_svfiprintf_r+0x1c2>
 8007ffe:	bf00      	nop
 8008000:	08008688 	.word	0x08008688
 8008004:	08008692 	.word	0x08008692
 8008008:	00000000 	.word	0x00000000
 800800c:	08007d5d 	.word	0x08007d5d
 8008010:	0800868e 	.word	0x0800868e

08008014 <_printf_common>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	4616      	mov	r6, r2
 800801a:	4699      	mov	r9, r3
 800801c:	688a      	ldr	r2, [r1, #8]
 800801e:	690b      	ldr	r3, [r1, #16]
 8008020:	4607      	mov	r7, r0
 8008022:	4293      	cmp	r3, r2
 8008024:	bfb8      	it	lt
 8008026:	4613      	movlt	r3, r2
 8008028:	6033      	str	r3, [r6, #0]
 800802a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800802e:	460c      	mov	r4, r1
 8008030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008034:	b10a      	cbz	r2, 800803a <_printf_common+0x26>
 8008036:	3301      	adds	r3, #1
 8008038:	6033      	str	r3, [r6, #0]
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	0699      	lsls	r1, r3, #26
 800803e:	bf42      	ittt	mi
 8008040:	6833      	ldrmi	r3, [r6, #0]
 8008042:	3302      	addmi	r3, #2
 8008044:	6033      	strmi	r3, [r6, #0]
 8008046:	6825      	ldr	r5, [r4, #0]
 8008048:	f015 0506 	ands.w	r5, r5, #6
 800804c:	d106      	bne.n	800805c <_printf_common+0x48>
 800804e:	f104 0a19 	add.w	sl, r4, #25
 8008052:	68e3      	ldr	r3, [r4, #12]
 8008054:	6832      	ldr	r2, [r6, #0]
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc28      	bgt.n	80080ae <_printf_common+0x9a>
 800805c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008060:	1e13      	subs	r3, r2, #0
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	bf18      	it	ne
 8008066:	2301      	movne	r3, #1
 8008068:	0692      	lsls	r2, r2, #26
 800806a:	d42d      	bmi.n	80080c8 <_printf_common+0xb4>
 800806c:	4649      	mov	r1, r9
 800806e:	4638      	mov	r0, r7
 8008070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008074:	47c0      	blx	r8
 8008076:	3001      	adds	r0, #1
 8008078:	d020      	beq.n	80080bc <_printf_common+0xa8>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	68e5      	ldr	r5, [r4, #12]
 800807e:	f003 0306 	and.w	r3, r3, #6
 8008082:	2b04      	cmp	r3, #4
 8008084:	bf18      	it	ne
 8008086:	2500      	movne	r5, #0
 8008088:	6832      	ldr	r2, [r6, #0]
 800808a:	f04f 0600 	mov.w	r6, #0
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	bf08      	it	eq
 8008092:	1aad      	subeq	r5, r5, r2
 8008094:	6922      	ldr	r2, [r4, #16]
 8008096:	bf08      	it	eq
 8008098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800809c:	4293      	cmp	r3, r2
 800809e:	bfc4      	itt	gt
 80080a0:	1a9b      	subgt	r3, r3, r2
 80080a2:	18ed      	addgt	r5, r5, r3
 80080a4:	341a      	adds	r4, #26
 80080a6:	42b5      	cmp	r5, r6
 80080a8:	d11a      	bne.n	80080e0 <_printf_common+0xcc>
 80080aa:	2000      	movs	r0, #0
 80080ac:	e008      	b.n	80080c0 <_printf_common+0xac>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4652      	mov	r2, sl
 80080b2:	4649      	mov	r1, r9
 80080b4:	4638      	mov	r0, r7
 80080b6:	47c0      	blx	r8
 80080b8:	3001      	adds	r0, #1
 80080ba:	d103      	bne.n	80080c4 <_printf_common+0xb0>
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295
 80080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c4:	3501      	adds	r5, #1
 80080c6:	e7c4      	b.n	8008052 <_printf_common+0x3e>
 80080c8:	2030      	movs	r0, #48	; 0x30
 80080ca:	18e1      	adds	r1, r4, r3
 80080cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080d6:	4422      	add	r2, r4
 80080d8:	3302      	adds	r3, #2
 80080da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080de:	e7c5      	b.n	800806c <_printf_common+0x58>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4622      	mov	r2, r4
 80080e4:	4649      	mov	r1, r9
 80080e6:	4638      	mov	r0, r7
 80080e8:	47c0      	blx	r8
 80080ea:	3001      	adds	r0, #1
 80080ec:	d0e6      	beq.n	80080bc <_printf_common+0xa8>
 80080ee:	3601      	adds	r6, #1
 80080f0:	e7d9      	b.n	80080a6 <_printf_common+0x92>
	...

080080f4 <_printf_i>:
 80080f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	7e27      	ldrb	r7, [r4, #24]
 80080fc:	4691      	mov	r9, r2
 80080fe:	2f78      	cmp	r7, #120	; 0x78
 8008100:	4680      	mov	r8, r0
 8008102:	469a      	mov	sl, r3
 8008104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800810a:	d807      	bhi.n	800811c <_printf_i+0x28>
 800810c:	2f62      	cmp	r7, #98	; 0x62
 800810e:	d80a      	bhi.n	8008126 <_printf_i+0x32>
 8008110:	2f00      	cmp	r7, #0
 8008112:	f000 80d9 	beq.w	80082c8 <_printf_i+0x1d4>
 8008116:	2f58      	cmp	r7, #88	; 0x58
 8008118:	f000 80a4 	beq.w	8008264 <_printf_i+0x170>
 800811c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008124:	e03a      	b.n	800819c <_printf_i+0xa8>
 8008126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800812a:	2b15      	cmp	r3, #21
 800812c:	d8f6      	bhi.n	800811c <_printf_i+0x28>
 800812e:	a001      	add	r0, pc, #4	; (adr r0, 8008134 <_printf_i+0x40>)
 8008130:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008134:	0800818d 	.word	0x0800818d
 8008138:	080081a1 	.word	0x080081a1
 800813c:	0800811d 	.word	0x0800811d
 8008140:	0800811d 	.word	0x0800811d
 8008144:	0800811d 	.word	0x0800811d
 8008148:	0800811d 	.word	0x0800811d
 800814c:	080081a1 	.word	0x080081a1
 8008150:	0800811d 	.word	0x0800811d
 8008154:	0800811d 	.word	0x0800811d
 8008158:	0800811d 	.word	0x0800811d
 800815c:	0800811d 	.word	0x0800811d
 8008160:	080082af 	.word	0x080082af
 8008164:	080081d1 	.word	0x080081d1
 8008168:	08008291 	.word	0x08008291
 800816c:	0800811d 	.word	0x0800811d
 8008170:	0800811d 	.word	0x0800811d
 8008174:	080082d1 	.word	0x080082d1
 8008178:	0800811d 	.word	0x0800811d
 800817c:	080081d1 	.word	0x080081d1
 8008180:	0800811d 	.word	0x0800811d
 8008184:	0800811d 	.word	0x0800811d
 8008188:	08008299 	.word	0x08008299
 800818c:	680b      	ldr	r3, [r1, #0]
 800818e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	600a      	str	r2, [r1, #0]
 8008198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800819c:	2301      	movs	r3, #1
 800819e:	e0a4      	b.n	80082ea <_printf_i+0x1f6>
 80081a0:	6825      	ldr	r5, [r4, #0]
 80081a2:	6808      	ldr	r0, [r1, #0]
 80081a4:	062e      	lsls	r6, r5, #24
 80081a6:	f100 0304 	add.w	r3, r0, #4
 80081aa:	d50a      	bpl.n	80081c2 <_printf_i+0xce>
 80081ac:	6805      	ldr	r5, [r0, #0]
 80081ae:	600b      	str	r3, [r1, #0]
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	da03      	bge.n	80081bc <_printf_i+0xc8>
 80081b4:	232d      	movs	r3, #45	; 0x2d
 80081b6:	426d      	negs	r5, r5
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081bc:	230a      	movs	r3, #10
 80081be:	485e      	ldr	r0, [pc, #376]	; (8008338 <_printf_i+0x244>)
 80081c0:	e019      	b.n	80081f6 <_printf_i+0x102>
 80081c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081c6:	6805      	ldr	r5, [r0, #0]
 80081c8:	600b      	str	r3, [r1, #0]
 80081ca:	bf18      	it	ne
 80081cc:	b22d      	sxthne	r5, r5
 80081ce:	e7ef      	b.n	80081b0 <_printf_i+0xbc>
 80081d0:	680b      	ldr	r3, [r1, #0]
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	1d18      	adds	r0, r3, #4
 80081d6:	6008      	str	r0, [r1, #0]
 80081d8:	0628      	lsls	r0, r5, #24
 80081da:	d501      	bpl.n	80081e0 <_printf_i+0xec>
 80081dc:	681d      	ldr	r5, [r3, #0]
 80081de:	e002      	b.n	80081e6 <_printf_i+0xf2>
 80081e0:	0669      	lsls	r1, r5, #25
 80081e2:	d5fb      	bpl.n	80081dc <_printf_i+0xe8>
 80081e4:	881d      	ldrh	r5, [r3, #0]
 80081e6:	2f6f      	cmp	r7, #111	; 0x6f
 80081e8:	bf0c      	ite	eq
 80081ea:	2308      	moveq	r3, #8
 80081ec:	230a      	movne	r3, #10
 80081ee:	4852      	ldr	r0, [pc, #328]	; (8008338 <_printf_i+0x244>)
 80081f0:	2100      	movs	r1, #0
 80081f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081f6:	6866      	ldr	r6, [r4, #4]
 80081f8:	2e00      	cmp	r6, #0
 80081fa:	bfa8      	it	ge
 80081fc:	6821      	ldrge	r1, [r4, #0]
 80081fe:	60a6      	str	r6, [r4, #8]
 8008200:	bfa4      	itt	ge
 8008202:	f021 0104 	bicge.w	r1, r1, #4
 8008206:	6021      	strge	r1, [r4, #0]
 8008208:	b90d      	cbnz	r5, 800820e <_printf_i+0x11a>
 800820a:	2e00      	cmp	r6, #0
 800820c:	d04d      	beq.n	80082aa <_printf_i+0x1b6>
 800820e:	4616      	mov	r6, r2
 8008210:	fbb5 f1f3 	udiv	r1, r5, r3
 8008214:	fb03 5711 	mls	r7, r3, r1, r5
 8008218:	5dc7      	ldrb	r7, [r0, r7]
 800821a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800821e:	462f      	mov	r7, r5
 8008220:	42bb      	cmp	r3, r7
 8008222:	460d      	mov	r5, r1
 8008224:	d9f4      	bls.n	8008210 <_printf_i+0x11c>
 8008226:	2b08      	cmp	r3, #8
 8008228:	d10b      	bne.n	8008242 <_printf_i+0x14e>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	07df      	lsls	r7, r3, #31
 800822e:	d508      	bpl.n	8008242 <_printf_i+0x14e>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	6861      	ldr	r1, [r4, #4]
 8008234:	4299      	cmp	r1, r3
 8008236:	bfde      	ittt	le
 8008238:	2330      	movle	r3, #48	; 0x30
 800823a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800823e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008242:	1b92      	subs	r2, r2, r6
 8008244:	6122      	str	r2, [r4, #16]
 8008246:	464b      	mov	r3, r9
 8008248:	4621      	mov	r1, r4
 800824a:	4640      	mov	r0, r8
 800824c:	f8cd a000 	str.w	sl, [sp]
 8008250:	aa03      	add	r2, sp, #12
 8008252:	f7ff fedf 	bl	8008014 <_printf_common>
 8008256:	3001      	adds	r0, #1
 8008258:	d14c      	bne.n	80082f4 <_printf_i+0x200>
 800825a:	f04f 30ff 	mov.w	r0, #4294967295
 800825e:	b004      	add	sp, #16
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	4834      	ldr	r0, [pc, #208]	; (8008338 <_printf_i+0x244>)
 8008266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800826a:	680e      	ldr	r6, [r1, #0]
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008272:	061f      	lsls	r7, r3, #24
 8008274:	600e      	str	r6, [r1, #0]
 8008276:	d514      	bpl.n	80082a2 <_printf_i+0x1ae>
 8008278:	07d9      	lsls	r1, r3, #31
 800827a:	bf44      	itt	mi
 800827c:	f043 0320 	orrmi.w	r3, r3, #32
 8008280:	6023      	strmi	r3, [r4, #0]
 8008282:	b91d      	cbnz	r5, 800828c <_printf_i+0x198>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	f023 0320 	bic.w	r3, r3, #32
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	2310      	movs	r3, #16
 800828e:	e7af      	b.n	80081f0 <_printf_i+0xfc>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	f043 0320 	orr.w	r3, r3, #32
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	2378      	movs	r3, #120	; 0x78
 800829a:	4828      	ldr	r0, [pc, #160]	; (800833c <_printf_i+0x248>)
 800829c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082a0:	e7e3      	b.n	800826a <_printf_i+0x176>
 80082a2:	065e      	lsls	r6, r3, #25
 80082a4:	bf48      	it	mi
 80082a6:	b2ad      	uxthmi	r5, r5
 80082a8:	e7e6      	b.n	8008278 <_printf_i+0x184>
 80082aa:	4616      	mov	r6, r2
 80082ac:	e7bb      	b.n	8008226 <_printf_i+0x132>
 80082ae:	680b      	ldr	r3, [r1, #0]
 80082b0:	6826      	ldr	r6, [r4, #0]
 80082b2:	1d1d      	adds	r5, r3, #4
 80082b4:	6960      	ldr	r0, [r4, #20]
 80082b6:	600d      	str	r5, [r1, #0]
 80082b8:	0635      	lsls	r5, r6, #24
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	d501      	bpl.n	80082c2 <_printf_i+0x1ce>
 80082be:	6018      	str	r0, [r3, #0]
 80082c0:	e002      	b.n	80082c8 <_printf_i+0x1d4>
 80082c2:	0671      	lsls	r1, r6, #25
 80082c4:	d5fb      	bpl.n	80082be <_printf_i+0x1ca>
 80082c6:	8018      	strh	r0, [r3, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	4616      	mov	r6, r2
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	e7ba      	b.n	8008246 <_printf_i+0x152>
 80082d0:	680b      	ldr	r3, [r1, #0]
 80082d2:	1d1a      	adds	r2, r3, #4
 80082d4:	600a      	str	r2, [r1, #0]
 80082d6:	681e      	ldr	r6, [r3, #0]
 80082d8:	2100      	movs	r1, #0
 80082da:	4630      	mov	r0, r6
 80082dc:	6862      	ldr	r2, [r4, #4]
 80082de:	f000 f82f 	bl	8008340 <memchr>
 80082e2:	b108      	cbz	r0, 80082e8 <_printf_i+0x1f4>
 80082e4:	1b80      	subs	r0, r0, r6
 80082e6:	6060      	str	r0, [r4, #4]
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f2:	e7a8      	b.n	8008246 <_printf_i+0x152>
 80082f4:	4632      	mov	r2, r6
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	47d0      	blx	sl
 80082fe:	3001      	adds	r0, #1
 8008300:	d0ab      	beq.n	800825a <_printf_i+0x166>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	079b      	lsls	r3, r3, #30
 8008306:	d413      	bmi.n	8008330 <_printf_i+0x23c>
 8008308:	68e0      	ldr	r0, [r4, #12]
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	4298      	cmp	r0, r3
 800830e:	bfb8      	it	lt
 8008310:	4618      	movlt	r0, r3
 8008312:	e7a4      	b.n	800825e <_printf_i+0x16a>
 8008314:	2301      	movs	r3, #1
 8008316:	4632      	mov	r2, r6
 8008318:	4649      	mov	r1, r9
 800831a:	4640      	mov	r0, r8
 800831c:	47d0      	blx	sl
 800831e:	3001      	adds	r0, #1
 8008320:	d09b      	beq.n	800825a <_printf_i+0x166>
 8008322:	3501      	adds	r5, #1
 8008324:	68e3      	ldr	r3, [r4, #12]
 8008326:	9903      	ldr	r1, [sp, #12]
 8008328:	1a5b      	subs	r3, r3, r1
 800832a:	42ab      	cmp	r3, r5
 800832c:	dcf2      	bgt.n	8008314 <_printf_i+0x220>
 800832e:	e7eb      	b.n	8008308 <_printf_i+0x214>
 8008330:	2500      	movs	r5, #0
 8008332:	f104 0619 	add.w	r6, r4, #25
 8008336:	e7f5      	b.n	8008324 <_printf_i+0x230>
 8008338:	08008699 	.word	0x08008699
 800833c:	080086aa 	.word	0x080086aa

08008340 <memchr>:
 8008340:	4603      	mov	r3, r0
 8008342:	b510      	push	{r4, lr}
 8008344:	b2c9      	uxtb	r1, r1
 8008346:	4402      	add	r2, r0
 8008348:	4293      	cmp	r3, r2
 800834a:	4618      	mov	r0, r3
 800834c:	d101      	bne.n	8008352 <memchr+0x12>
 800834e:	2000      	movs	r0, #0
 8008350:	e003      	b.n	800835a <memchr+0x1a>
 8008352:	7804      	ldrb	r4, [r0, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	428c      	cmp	r4, r1
 8008358:	d1f6      	bne.n	8008348 <memchr+0x8>
 800835a:	bd10      	pop	{r4, pc}

0800835c <memcpy>:
 800835c:	440a      	add	r2, r1
 800835e:	4291      	cmp	r1, r2
 8008360:	f100 33ff 	add.w	r3, r0, #4294967295
 8008364:	d100      	bne.n	8008368 <memcpy+0xc>
 8008366:	4770      	bx	lr
 8008368:	b510      	push	{r4, lr}
 800836a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836e:	4291      	cmp	r1, r2
 8008370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008374:	d1f9      	bne.n	800836a <memcpy+0xe>
 8008376:	bd10      	pop	{r4, pc}

08008378 <memmove>:
 8008378:	4288      	cmp	r0, r1
 800837a:	b510      	push	{r4, lr}
 800837c:	eb01 0402 	add.w	r4, r1, r2
 8008380:	d902      	bls.n	8008388 <memmove+0x10>
 8008382:	4284      	cmp	r4, r0
 8008384:	4623      	mov	r3, r4
 8008386:	d807      	bhi.n	8008398 <memmove+0x20>
 8008388:	1e43      	subs	r3, r0, #1
 800838a:	42a1      	cmp	r1, r4
 800838c:	d008      	beq.n	80083a0 <memmove+0x28>
 800838e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008396:	e7f8      	b.n	800838a <memmove+0x12>
 8008398:	4601      	mov	r1, r0
 800839a:	4402      	add	r2, r0
 800839c:	428a      	cmp	r2, r1
 800839e:	d100      	bne.n	80083a2 <memmove+0x2a>
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083aa:	e7f7      	b.n	800839c <memmove+0x24>

080083ac <_free_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4605      	mov	r5, r0
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d043      	beq.n	800843c <_free_r+0x90>
 80083b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b8:	1f0c      	subs	r4, r1, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bfb8      	it	lt
 80083be:	18e4      	addlt	r4, r4, r3
 80083c0:	f000 f8d0 	bl	8008564 <__malloc_lock>
 80083c4:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <_free_r+0x94>)
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	4610      	mov	r0, r2
 80083ca:	b933      	cbnz	r3, 80083da <_free_r+0x2e>
 80083cc:	6063      	str	r3, [r4, #4]
 80083ce:	6014      	str	r4, [r2, #0]
 80083d0:	4628      	mov	r0, r5
 80083d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083d6:	f000 b8cb 	b.w	8008570 <__malloc_unlock>
 80083da:	42a3      	cmp	r3, r4
 80083dc:	d90a      	bls.n	80083f4 <_free_r+0x48>
 80083de:	6821      	ldr	r1, [r4, #0]
 80083e0:	1862      	adds	r2, r4, r1
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bf01      	itttt	eq
 80083e6:	681a      	ldreq	r2, [r3, #0]
 80083e8:	685b      	ldreq	r3, [r3, #4]
 80083ea:	1852      	addeq	r2, r2, r1
 80083ec:	6022      	streq	r2, [r4, #0]
 80083ee:	6063      	str	r3, [r4, #4]
 80083f0:	6004      	str	r4, [r0, #0]
 80083f2:	e7ed      	b.n	80083d0 <_free_r+0x24>
 80083f4:	461a      	mov	r2, r3
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	b10b      	cbz	r3, 80083fe <_free_r+0x52>
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	d9fa      	bls.n	80083f4 <_free_r+0x48>
 80083fe:	6811      	ldr	r1, [r2, #0]
 8008400:	1850      	adds	r0, r2, r1
 8008402:	42a0      	cmp	r0, r4
 8008404:	d10b      	bne.n	800841e <_free_r+0x72>
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	4401      	add	r1, r0
 800840a:	1850      	adds	r0, r2, r1
 800840c:	4283      	cmp	r3, r0
 800840e:	6011      	str	r1, [r2, #0]
 8008410:	d1de      	bne.n	80083d0 <_free_r+0x24>
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4401      	add	r1, r0
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	6053      	str	r3, [r2, #4]
 800841c:	e7d8      	b.n	80083d0 <_free_r+0x24>
 800841e:	d902      	bls.n	8008426 <_free_r+0x7a>
 8008420:	230c      	movs	r3, #12
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	e7d4      	b.n	80083d0 <_free_r+0x24>
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	1821      	adds	r1, r4, r0
 800842a:	428b      	cmp	r3, r1
 800842c:	bf01      	itttt	eq
 800842e:	6819      	ldreq	r1, [r3, #0]
 8008430:	685b      	ldreq	r3, [r3, #4]
 8008432:	1809      	addeq	r1, r1, r0
 8008434:	6021      	streq	r1, [r4, #0]
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	6054      	str	r4, [r2, #4]
 800843a:	e7c9      	b.n	80083d0 <_free_r+0x24>
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	bf00      	nop
 8008440:	20000534 	.word	0x20000534

08008444 <_malloc_r>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	1ccd      	adds	r5, r1, #3
 8008448:	f025 0503 	bic.w	r5, r5, #3
 800844c:	3508      	adds	r5, #8
 800844e:	2d0c      	cmp	r5, #12
 8008450:	bf38      	it	cc
 8008452:	250c      	movcc	r5, #12
 8008454:	2d00      	cmp	r5, #0
 8008456:	4606      	mov	r6, r0
 8008458:	db01      	blt.n	800845e <_malloc_r+0x1a>
 800845a:	42a9      	cmp	r1, r5
 800845c:	d903      	bls.n	8008466 <_malloc_r+0x22>
 800845e:	230c      	movs	r3, #12
 8008460:	6033      	str	r3, [r6, #0]
 8008462:	2000      	movs	r0, #0
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008466:	f000 f87d 	bl	8008564 <__malloc_lock>
 800846a:	4921      	ldr	r1, [pc, #132]	; (80084f0 <_malloc_r+0xac>)
 800846c:	680a      	ldr	r2, [r1, #0]
 800846e:	4614      	mov	r4, r2
 8008470:	b99c      	cbnz	r4, 800849a <_malloc_r+0x56>
 8008472:	4f20      	ldr	r7, [pc, #128]	; (80084f4 <_malloc_r+0xb0>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	b923      	cbnz	r3, 8008482 <_malloc_r+0x3e>
 8008478:	4621      	mov	r1, r4
 800847a:	4630      	mov	r0, r6
 800847c:	f000 f862 	bl	8008544 <_sbrk_r>
 8008480:	6038      	str	r0, [r7, #0]
 8008482:	4629      	mov	r1, r5
 8008484:	4630      	mov	r0, r6
 8008486:	f000 f85d 	bl	8008544 <_sbrk_r>
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	d123      	bne.n	80084d6 <_malloc_r+0x92>
 800848e:	230c      	movs	r3, #12
 8008490:	4630      	mov	r0, r6
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f000 f86c 	bl	8008570 <__malloc_unlock>
 8008498:	e7e3      	b.n	8008462 <_malloc_r+0x1e>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	1b5b      	subs	r3, r3, r5
 800849e:	d417      	bmi.n	80084d0 <_malloc_r+0x8c>
 80084a0:	2b0b      	cmp	r3, #11
 80084a2:	d903      	bls.n	80084ac <_malloc_r+0x68>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	441c      	add	r4, r3
 80084a8:	6025      	str	r5, [r4, #0]
 80084aa:	e004      	b.n	80084b6 <_malloc_r+0x72>
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	42a2      	cmp	r2, r4
 80084b0:	bf0c      	ite	eq
 80084b2:	600b      	streq	r3, [r1, #0]
 80084b4:	6053      	strne	r3, [r2, #4]
 80084b6:	4630      	mov	r0, r6
 80084b8:	f000 f85a 	bl	8008570 <__malloc_unlock>
 80084bc:	f104 000b 	add.w	r0, r4, #11
 80084c0:	1d23      	adds	r3, r4, #4
 80084c2:	f020 0007 	bic.w	r0, r0, #7
 80084c6:	1ac2      	subs	r2, r0, r3
 80084c8:	d0cc      	beq.n	8008464 <_malloc_r+0x20>
 80084ca:	1a1b      	subs	r3, r3, r0
 80084cc:	50a3      	str	r3, [r4, r2]
 80084ce:	e7c9      	b.n	8008464 <_malloc_r+0x20>
 80084d0:	4622      	mov	r2, r4
 80084d2:	6864      	ldr	r4, [r4, #4]
 80084d4:	e7cc      	b.n	8008470 <_malloc_r+0x2c>
 80084d6:	1cc4      	adds	r4, r0, #3
 80084d8:	f024 0403 	bic.w	r4, r4, #3
 80084dc:	42a0      	cmp	r0, r4
 80084de:	d0e3      	beq.n	80084a8 <_malloc_r+0x64>
 80084e0:	1a21      	subs	r1, r4, r0
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 f82e 	bl	8008544 <_sbrk_r>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d1dd      	bne.n	80084a8 <_malloc_r+0x64>
 80084ec:	e7cf      	b.n	800848e <_malloc_r+0x4a>
 80084ee:	bf00      	nop
 80084f0:	20000534 	.word	0x20000534
 80084f4:	20000538 	.word	0x20000538

080084f8 <_realloc_r>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	4607      	mov	r7, r0
 80084fc:	4614      	mov	r4, r2
 80084fe:	460e      	mov	r6, r1
 8008500:	b921      	cbnz	r1, 800850c <_realloc_r+0x14>
 8008502:	4611      	mov	r1, r2
 8008504:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008508:	f7ff bf9c 	b.w	8008444 <_malloc_r>
 800850c:	b922      	cbnz	r2, 8008518 <_realloc_r+0x20>
 800850e:	f7ff ff4d 	bl	80083ac <_free_r>
 8008512:	4625      	mov	r5, r4
 8008514:	4628      	mov	r0, r5
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	f000 f830 	bl	800857c <_malloc_usable_size_r>
 800851c:	42a0      	cmp	r0, r4
 800851e:	d20f      	bcs.n	8008540 <_realloc_r+0x48>
 8008520:	4621      	mov	r1, r4
 8008522:	4638      	mov	r0, r7
 8008524:	f7ff ff8e 	bl	8008444 <_malloc_r>
 8008528:	4605      	mov	r5, r0
 800852a:	2800      	cmp	r0, #0
 800852c:	d0f2      	beq.n	8008514 <_realloc_r+0x1c>
 800852e:	4631      	mov	r1, r6
 8008530:	4622      	mov	r2, r4
 8008532:	f7ff ff13 	bl	800835c <memcpy>
 8008536:	4631      	mov	r1, r6
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff37 	bl	80083ac <_free_r>
 800853e:	e7e9      	b.n	8008514 <_realloc_r+0x1c>
 8008540:	4635      	mov	r5, r6
 8008542:	e7e7      	b.n	8008514 <_realloc_r+0x1c>

08008544 <_sbrk_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	2300      	movs	r3, #0
 8008548:	4d05      	ldr	r5, [pc, #20]	; (8008560 <_sbrk_r+0x1c>)
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	f7f8 facc 	bl	8000aec <_sbrk>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_sbrk_r+0x1a>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_sbrk_r+0x1a>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20001508 	.word	0x20001508

08008564 <__malloc_lock>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__malloc_lock+0x8>)
 8008566:	f000 b811 	b.w	800858c <__retarget_lock_acquire_recursive>
 800856a:	bf00      	nop
 800856c:	20001510 	.word	0x20001510

08008570 <__malloc_unlock>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__malloc_unlock+0x8>)
 8008572:	f000 b80c 	b.w	800858e <__retarget_lock_release_recursive>
 8008576:	bf00      	nop
 8008578:	20001510 	.word	0x20001510

0800857c <_malloc_usable_size_r>:
 800857c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008580:	1f18      	subs	r0, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfbc      	itt	lt
 8008586:	580b      	ldrlt	r3, [r1, r0]
 8008588:	18c0      	addlt	r0, r0, r3
 800858a:	4770      	bx	lr

0800858c <__retarget_lock_acquire_recursive>:
 800858c:	4770      	bx	lr

0800858e <__retarget_lock_release_recursive>:
 800858e:	4770      	bx	lr

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
