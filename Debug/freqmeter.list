
freqmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008adc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d00  08008d00  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008d00  08008d00  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d00  08008d00  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  200001e0  08008ee8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  08008ee8  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172cf  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034dd  00000000  00000000  000374d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7b6  00000000  00000000  0003c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013591  00000000  00000000  00057006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1e5  00000000  00000000  0006a597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f777c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  000f77d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bd4 	.word	0x08008bd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008bd4 	.word	0x08008bd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fd3f 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f833 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f8e5 	bl	8000948 <MX_GPIO_Init>
  MX_TIM2_Init();
 800077e:	f000 f88f 	bl	80008a0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000782:	f007 f901 	bl	8007988 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Wait 500ms for USB setup to complete before trying to send anything.
  HAL_Delay( 500 );
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f000 fd95 	bl	80012b8 <HAL_Delay>

  __TIM2_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <main+0x60>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <main+0x60>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <main+0x60>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  HAL_TIM_Base_Start_IT( &htim2 );
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <main+0x64>)
 80007a8:	f003 f924 	bl	80039f4 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // simple LED blinking
//	  CDC_Transmit_FS( "X\r\n", 3 ); // USB test
//	  HAL_Delay( 1000 );

	  usbcdc_clear_screen();
 80007ac:	f000 f9da 	bl	8000b64 <usbcdc_clear_screen>
	  usbcdc_printfreq( freq, hold, mco_current );
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <main+0x68>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <main+0x6c>)
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	b2d1      	uxtb	r1, r2
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <main+0x70>)
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f9da 	bl	8000b78 <usbcdc_printfreq>
	  HAL_Delay( DISP_DELAY );
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fd77 	bl	80012b8 <HAL_Delay>
	  usbcdc_clear_screen();
 80007ca:	e7ef      	b.n	80007ac <main+0x40>
 80007cc:	40021000 	.word	0x40021000
 80007d0:	2000053c 	.word	0x2000053c
 80007d4:	20000300 	.word	0x20000300
 80007d8:	20000308 	.word	0x20000308
 80007dc:	20000309 	.word	0x20000309

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f007 fd9a 	bl	8008328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800082c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fbb6 	bl	8002fa8 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000842:	f000 fbb7 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fe20 	bl	80034a8 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800086e:	f000 fba1 	bl	8000fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000872:	2310      	movs	r3, #16
 8000874:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f002 ffb3 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000888:	f000 fb94 	bl	8000fb4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2000      	movs	r0, #0
 8000892:	f002 fef3 	bl	800367c <HAL_RCC_MCOConfig>
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <MX_TIM2_Init+0xa4>)
 80008e8:	f003 f834 	bl	8003954 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008f2:	f000 fb5f 	bl	8000fb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008f6:	2307      	movs	r3, #7
 80008f8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80008fa:	2370      	movs	r3, #112	; 0x70
 80008fc:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM2_Init+0xa4>)
 8000912:	f003 f9c9 	bl	8003ca8 <HAL_TIM_SlaveConfigSynchro>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800091c:	f000 fb4a 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000920:	2320      	movs	r3, #32
 8000922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM2_Init+0xa4>)
 800092e:	f003 fb97 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000938:	f000 fb3c 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000053c 	.word	0x2000053c

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xa8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xa8>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xa8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xa8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <MX_GPIO_Init+0xa8>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xa8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xa8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_GPIO_Init+0xa8>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xa8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0xac>)
 80009ac:	f000 ff3a 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <MX_GPIO_Init+0xac>)
 80009ca:	f000 fda7 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0xb0>)
 80009e4:	f000 fd9a 	bl	800151c <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010800 	.word	0x40010800

080009fc <poll_usb_command>:

/* USER CODE BEGIN 4 */
// =============================================================================
void poll_usb_command( uint8_t one_num ) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	switch( one_num ) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3b41      	subs	r3, #65	; 0x41
 8000a0a:	2b33      	cmp	r3, #51	; 0x33
 8000a0c:	f200 809f 	bhi.w	8000b4e <poll_usb_command+0x152>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <poll_usb_command+0x1c>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000ae9 	.word	0x08000ae9
 8000a1c:	08000b4f 	.word	0x08000b4f
 8000a20:	08000b11 	.word	0x08000b11
 8000a24:	08000af7 	.word	0x08000af7
 8000a28:	08000b4f 	.word	0x08000b4f
 8000a2c:	08000b4f 	.word	0x08000b4f
 8000a30:	08000b4f 	.word	0x08000b4f
 8000a34:	08000b37 	.word	0x08000b37
 8000a38:	08000b4f 	.word	0x08000b4f
 8000a3c:	08000b4f 	.word	0x08000b4f
 8000a40:	08000b4f 	.word	0x08000b4f
 8000a44:	08000b4f 	.word	0x08000b4f
 8000a48:	08000b17 	.word	0x08000b17
 8000a4c:	08000b4f 	.word	0x08000b4f
 8000a50:	08000b4f 	.word	0x08000b4f
 8000a54:	08000b4f 	.word	0x08000b4f
 8000a58:	08000b4f 	.word	0x08000b4f
 8000a5c:	08000b4f 	.word	0x08000b4f
 8000a60:	08000b4f 	.word	0x08000b4f
 8000a64:	08000b05 	.word	0x08000b05
 8000a68:	08000b4f 	.word	0x08000b4f
 8000a6c:	08000b4f 	.word	0x08000b4f
 8000a70:	08000b4f 	.word	0x08000b4f
 8000a74:	08000b4f 	.word	0x08000b4f
 8000a78:	08000b4f 	.word	0x08000b4f
 8000a7c:	08000b4f 	.word	0x08000b4f
 8000a80:	08000b4f 	.word	0x08000b4f
 8000a84:	08000b4f 	.word	0x08000b4f
 8000a88:	08000b4f 	.word	0x08000b4f
 8000a8c:	08000b4f 	.word	0x08000b4f
 8000a90:	08000b4f 	.word	0x08000b4f
 8000a94:	08000b4f 	.word	0x08000b4f
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000b4f 	.word	0x08000b4f
 8000aa0:	08000b11 	.word	0x08000b11
 8000aa4:	08000af7 	.word	0x08000af7
 8000aa8:	08000b4f 	.word	0x08000b4f
 8000aac:	08000b4f 	.word	0x08000b4f
 8000ab0:	08000b4f 	.word	0x08000b4f
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b4f 	.word	0x08000b4f
 8000abc:	08000b4f 	.word	0x08000b4f
 8000ac0:	08000b4f 	.word	0x08000b4f
 8000ac4:	08000b4f 	.word	0x08000b4f
 8000ac8:	08000b17 	.word	0x08000b17
 8000acc:	08000b4f 	.word	0x08000b4f
 8000ad0:	08000b4f 	.word	0x08000b4f
 8000ad4:	08000b4f 	.word	0x08000b4f
 8000ad8:	08000b4f 	.word	0x08000b4f
 8000adc:	08000b4f 	.word	0x08000b4f
 8000ae0:	08000b4f 	.word	0x08000b4f
 8000ae4:	08000b05 	.word	0x08000b05
	case 'A' :
	case 'a' : HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <poll_usb_command+0x15c>)
 8000af0:	f000 fe98 	bl	8001824 <HAL_GPIO_WritePin>
	           break;
 8000af4:	e02b      	b.n	8000b4e <poll_usb_command+0x152>
	case 'D' :
	case 'd' : HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <poll_usb_command+0x15c>)
 8000afe:	f000 fe91 	bl	8001824 <HAL_GPIO_WritePin>
	           break;
 8000b02:	e024      	b.n	8000b4e <poll_usb_command+0x152>
	case 'T' :
	case 't' : HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <poll_usb_command+0x15c>)
 8000b0a:	f000 fea3 	bl	8001854 <HAL_GPIO_TogglePin>
	           break;
 8000b0e:	e01e      	b.n	8000b4e <poll_usb_command+0x152>
	case 'C' :
	case 'c' : usbcdc_clear_screen();
 8000b10:	f000 f828 	bl	8000b64 <usbcdc_clear_screen>
	           break;
 8000b14:	e01b      	b.n	8000b4e <poll_usb_command+0x152>
	case 'M' :
	case 'm' : if( ++mco_current > 3 ) mco_current = 0;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <poll_usb_command+0x160>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <poll_usb_command+0x160>)
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <poll_usb_command+0x160>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d902      	bls.n	8000b30 <poll_usb_command+0x134>
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <poll_usb_command+0x160>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		       set_mco();
 8000b30:	f000 f99c 	bl	8000e6c <set_mco>
	           break;
 8000b34:	e00b      	b.n	8000b4e <poll_usb_command+0x152>
	case 'H' :
	case 'h' : hold = hold ? 0 : 1;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <poll_usb_command+0x164>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf0c      	ite	eq
 8000b40:	2301      	moveq	r3, #1
 8000b42:	2300      	movne	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <poll_usb_command+0x164>)
 8000b4a:	701a      	strb	r2, [r3, #0]
	           break;
 8000b4c:	bf00      	nop
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	20000309 	.word	0x20000309
 8000b60:	20000308 	.word	0x20000308

08000b64 <usbcdc_clear_screen>:

void usbcdc_clear_screen(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	CDC_Transmit_FS( "\033c\r", 3 );
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4802      	ldr	r0, [pc, #8]	; (8000b74 <usbcdc_clear_screen+0x10>)
 8000b6c:	f006 ffd4 	bl	8007b18 <CDC_Transmit_FS>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08008bec 	.word	0x08008bec

08000b78 <usbcdc_printfreq>:

void usbcdc_printfreq( uint32_t frequency, uint8_t hold, uint8_t mco_val ) {
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	70bb      	strb	r3, [r7, #2]
 8000b88:	466b      	mov	r3, sp
 8000b8a:	461e      	mov	r6, r3
	  uint16_t len1;
	  uint8_t len2;
	  uint8_t loop;
	  char *end_text1 = " MHz\r\n\r\n";
 8000b8c:	4bab      	ldr	r3, [pc, #684]	; (8000e3c <usbcdc_printfreq+0x2c4>)
 8000b8e:	623b      	str	r3, [r7, #32]
	  char *end_text2 = " MHz HOLD\r\n\r\n";
 8000b90:	4bab      	ldr	r3, [pc, #684]	; (8000e40 <usbcdc_printfreq+0x2c8>)
 8000b92:	61fb      	str	r3, [r7, #28]
	  char *mco_text = "Clock output: ";
 8000b94:	4bab      	ldr	r3, [pc, #684]	; (8000e44 <usbcdc_printfreq+0x2cc>)
 8000b96:	61bb      	str	r3, [r7, #24]
	  const uint8_t MAX_BUF_SIZE = 20;
 8000b98:	2314      	movs	r3, #20
 8000b9a:	75fb      	strb	r3, [r7, #23]
	  char buffer1[ MAX_BUF_SIZE ];
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	7df8      	ldrb	r0, [r7, #23]
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	00cb      	lsls	r3, r1, #3
 8000bb2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bb6:	00c2      	lsls	r2, r0, #3
 8000bb8:	7df8      	ldrb	r0, [r7, #23]
 8000bba:	f04f 0100 	mov.w	r1, #0
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	00cb      	lsls	r3, r1, #3
 8000bc8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bcc:	00c2      	lsls	r2, r0, #3
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	3307      	adds	r3, #7
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bda:	466b      	mov	r3, sp
 8000bdc:	3300      	adds	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]

	  len1 = snprintf( buffer1, MAX_BUF_SIZE, "%4lu.", frequency / 1000000 );
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	7df9      	ldrb	r1, [r7, #23]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a98      	ldr	r2, [pc, #608]	; (8000e48 <usbcdc_printfreq+0x2d0>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	0c9b      	lsrs	r3, r3, #18
 8000bee:	4a97      	ldr	r2, [pc, #604]	; (8000e4c <usbcdc_printfreq+0x2d4>)
 8000bf0:	f007 fba2 	bl	8008338 <sniprintf>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
	  for( loop = 0; loop < len1; loop++ ) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bfe:	e00c      	b.n	8000c1a <usbcdc_printfreq+0xa2>
		  buffer[ loop ] = buffer1[ loop ];
 8000c00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c08:	68f9      	ldr	r1, [r7, #12]
 8000c0a:	5c89      	ldrb	r1, [r1, r2]
 8000c0c:	4a90      	ldr	r2, [pc, #576]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len1; loop++ ) {
 8000c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c14:	3301      	adds	r3, #1
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d8ec      	bhi.n	8000c00 <usbcdc_printfreq+0x88>
	  }
	  len2 = snprintf( buffer1, MAX_BUF_SIZE, "%06lu", frequency % 1000000 );
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	7df9      	ldrb	r1, [r7, #23]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <usbcdc_printfreq+0x2d0>)
 8000c2e:	fba3 4302 	umull	r4, r3, r3, r2
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	4c87      	ldr	r4, [pc, #540]	; (8000e54 <usbcdc_printfreq+0x2dc>)
 8000c36:	fb04 f303 	mul.w	r3, r4, r3
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	4a86      	ldr	r2, [pc, #536]	; (8000e58 <usbcdc_printfreq+0x2e0>)
 8000c3e:	f007 fb7b 	bl	8008338 <sniprintf>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  for( loop = 0; loop < len2; loop++ ) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c4e:	e00e      	b.n	8000c6e <usbcdc_printfreq+0xf6>
		  buffer[ len1 + loop ] = buffer1[ loop ];
 8000c50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c54:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c5a:	440b      	add	r3, r1
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	5c89      	ldrb	r1, [r1, r2]
 8000c60:	4a7b      	ldr	r2, [pc, #492]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000c62:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len2; loop++ ) {
 8000c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3ea      	bcc.n	8000c50 <usbcdc_printfreq+0xd8>
	  }
	  len1 += len2;
 8000c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c82:	4413      	add	r3, r2
 8000c84:	84bb      	strh	r3, [r7, #36]	; 0x24
	  if( hold ) {
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d020      	beq.n	8000cce <usbcdc_printfreq+0x156>
		  len2 = strlen( end_text2 );
 8000c8c:	69f8      	ldr	r0, [r7, #28]
 8000c8e:	f7ff fa5f 	bl	8000150 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for( loop = 0; loop < len2; loop++ ) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c9e:	e00f      	b.n	8000cc0 <usbcdc_printfreq+0x148>
			  buffer[ len1 + loop ] = end_text2[ loop ];
 8000ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	441a      	add	r2, r3
 8000ca8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cae:	440b      	add	r3, r1
 8000cb0:	7811      	ldrb	r1, [r2, #0]
 8000cb2:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000cb4:	54d1      	strb	r1, [r2, r3]
		  for( loop = 0; loop < len2; loop++ ) {
 8000cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3e9      	bcc.n	8000ca0 <usbcdc_printfreq+0x128>
 8000ccc:	e01f      	b.n	8000d0e <usbcdc_printfreq+0x196>
		  }
	  }
	  else {
		  len2 = strlen( end_text1 );
 8000cce:	6a38      	ldr	r0, [r7, #32]
 8000cd0:	f7ff fa3e 	bl	8000150 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for( loop = 0; loop < len2; loop++ ) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ce0:	e00f      	b.n	8000d02 <usbcdc_printfreq+0x18a>
			  buffer[ len1 + loop ] = end_text1[ loop ];
 8000ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	441a      	add	r2, r3
 8000cea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf0:	440b      	add	r3, r1
 8000cf2:	7811      	ldrb	r1, [r2, #0]
 8000cf4:	4a56      	ldr	r2, [pc, #344]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000cf6:	54d1      	strb	r1, [r2, r3]
		  for( loop = 0; loop < len2; loop++ ) {
 8000cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3e9      	bcc.n	8000ce2 <usbcdc_printfreq+0x16a>
		  }
	  }
	  len1 += len2;
 8000d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d16:	4413      	add	r3, r2
 8000d18:	84bb      	strh	r3, [r7, #36]	; 0x24
	  len2 = strlen( mco_text );
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f7ff fa18 	bl	8000150 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  for( loop = 0; loop < len2; loop++ ) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d2c:	e00f      	b.n	8000d4e <usbcdc_printfreq+0x1d6>
		  buffer[ len1 + loop ] = mco_text[ loop ];
 8000d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	441a      	add	r2, r3
 8000d36:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3c:	440b      	add	r3, r1
 8000d3e:	7811      	ldrb	r1, [r2, #0]
 8000d40:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000d42:	54d1      	strb	r1, [r2, r3]
	  for( loop = 0; loop < len2; loop++ ) {
 8000d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3e9      	bcc.n	8000d2e <usbcdc_printfreq+0x1b6>
	  }
	  len1 += len2;
 8000d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	84bb      	strh	r3, [r7, #36]	; 0x24
	  buffer[ len1++ ] = 0;
 8000d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
	  switch( mco_val ) {
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d855      	bhi.n	8000e26 <usbcdc_printfreq+0x2ae>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <usbcdc_printfreq+0x208>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000db1 	.word	0x08000db1
 8000d88:	08000dd7 	.word	0x08000dd7
 8000d8c:	08000dff 	.word	0x08000dff
	  	  case 0 : strcat( buffer, "OFF\r\n");
 8000d90:	482f      	ldr	r0, [pc, #188]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000d92:	f7ff f9dd 	bl	8000150 <strlen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <usbcdc_printfreq+0x2e4>)
 8000da0:	6810      	ldr	r0, [r2, #0]
 8000da2:	6018      	str	r0, [r3, #0]
 8000da4:	8892      	ldrh	r2, [r2, #4]
 8000da6:	809a      	strh	r2, [r3, #4]
				   len1 += 5;
 8000da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000daa:	3305      	adds	r3, #5
 8000dac:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 8000dae:	e03a      	b.n	8000e26 <usbcdc_printfreq+0x2ae>
	  	  case 1 : strcat( buffer, "PLL/2 = 36MHz\r\n");
 8000db0:	4827      	ldr	r0, [pc, #156]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000db2:	f7ff f9cd 	bl	8000150 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <usbcdc_printfreq+0x2e8>)
 8000dc0:	461c      	mov	r4, r3
 8000dc2:	4615      	mov	r5, r2
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	6020      	str	r0, [r4, #0]
 8000dc8:	6061      	str	r1, [r4, #4]
 8000dca:	60a2      	str	r2, [r4, #8]
 8000dcc:	60e3      	str	r3, [r4, #12]
				   len1 += 15;
 8000dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd0:	330f      	adds	r3, #15
 8000dd2:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 8000dd4:	e027      	b.n	8000e26 <usbcdc_printfreq+0x2ae>
	  	  case 2 : strcat( buffer, "HSI = 8MHz\r\n");
 8000dd6:	481e      	ldr	r0, [pc, #120]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000dd8:	f7ff f9ba 	bl	8000150 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <usbcdc_printfreq+0x2ec>)
 8000de6:	461c      	mov	r4, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dec:	6020      	str	r0, [r4, #0]
 8000dee:	6061      	str	r1, [r4, #4]
 8000df0:	60a2      	str	r2, [r4, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	7323      	strb	r3, [r4, #12]
				   len1 += 12;
 8000df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000df8:	330c      	adds	r3, #12
 8000dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 8000dfc:	e013      	b.n	8000e26 <usbcdc_printfreq+0x2ae>
	  	  case 3 : strcat( buffer, "HSE = 8MHz\r\n");
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000e00:	f7ff f9a6 	bl	8000150 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <usbcdc_printfreq+0x2f0>)
 8000e0e:	461c      	mov	r4, r3
 8000e10:	4613      	mov	r3, r2
 8000e12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e14:	6020      	str	r0, [r4, #0]
 8000e16:	6061      	str	r1, [r4, #4]
 8000e18:	60a2      	str	r2, [r4, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	7323      	strb	r3, [r4, #12]
				   len1 += 12;
 8000e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e20:	330c      	adds	r3, #12
 8000e22:	84bb      	strh	r3, [r7, #36]	; 0x24
				   break;
 8000e24:	bf00      	nop
	  }
	  CDC_Transmit_FS( buffer, len1);
 8000e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <usbcdc_printfreq+0x2d8>)
 8000e2c:	f006 fe74 	bl	8007b18 <CDC_Transmit_FS>
 8000e30:	46b5      	mov	sp, r6
}
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	; 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08008bf0 	.word	0x08008bf0
 8000e40:	08008bfc 	.word	0x08008bfc
 8000e44:	08008c0c 	.word	0x08008c0c
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	08008c1c 	.word	0x08008c1c
 8000e50:	200001fc 	.word	0x200001fc
 8000e54:	000f4240 	.word	0x000f4240
 8000e58:	08008c24 	.word	0x08008c24
 8000e5c:	08008c2c 	.word	0x08008c2c
 8000e60:	08008c34 	.word	0x08008c34
 8000e64:	08008c44 	.word	0x08008c44
 8000e68:	08008c54 	.word	0x08008c54

08000e6c <set_mco>:

void set_mco() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	switch( mco_current ) {
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <set_mco+0x70>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d826      	bhi.n	8000ec6 <set_mco+0x5a>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <set_mco+0x14>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e9d 	.word	0x08000e9d
 8000e88:	08000eab 	.word	0x08000eab
 8000e8c:	08000eb9 	.word	0x08000eb9
	case 0 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1 ); // no MCO
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f002 fbf1 	bl	800367c <HAL_RCC_MCOConfig>
	         break;
 8000e9a:	e01d      	b.n	8000ed8 <set_mco+0x6c>
	case 1 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1 ); // PLLCLK / 2 = 36MHz
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f002 fbea 	bl	800367c <HAL_RCC_MCOConfig>
	         break;
 8000ea8:	e016      	b.n	8000ed8 <set_mco+0x6c>
	case 2 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1 ); // HSI ~8MHz
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f002 fbe3 	bl	800367c <HAL_RCC_MCOConfig>
	         break;
 8000eb6:	e00f      	b.n	8000ed8 <set_mco+0x6c>
	case 3 : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1 ); // HSE =8MHz
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f002 fbdc 	bl	800367c <HAL_RCC_MCOConfig>
	         break;
 8000ec4:	e008      	b.n	8000ed8 <set_mco+0x6c>
	default : HAL_RCC_MCOConfig( RCC_MCO, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1 );
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f002 fbd6 	bl	800367c <HAL_RCC_MCOConfig>
	          mco_current = 0;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <set_mco+0x70>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	         break;
 8000ed6:	bf00      	nop
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000309 	.word	0x20000309

08000ee0 <tim2_interrupt>:

// =============================================================================

void tim2_interrupt(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    freq_scratch += 65536; /* TIM2 is 16-bit and overflows every 65536 events. */
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <tim2_interrupt+0x18>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000eec:	4a02      	ldr	r2, [pc, #8]	; (8000ef8 <tim2_interrupt+0x18>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000304 	.word	0x20000304
 8000efc:	00000000 	.word	0x00000000

08000f00 <sys_tick_interrupt>:

void sys_tick_interrupt(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  systick_ms++;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <sys_tick_interrupt+0x98>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <sys_tick_interrupt+0x98>)
 8000f0c:	6013      	str	r3, [r2, #0]

  if (systick_ms % 1000 == 0) {
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <sys_tick_interrupt+0x98>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <sys_tick_interrupt+0x9c>)
 8000f14:	fba3 1302 	umull	r1, r3, r3, r2
 8000f18:	099b      	lsrs	r3, r3, #6
 8000f1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d12f      	bne.n	8000f88 <sys_tick_interrupt+0x88>
    /* Scratch pad to finalized result */
    if( ! hold ) {
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <sys_tick_interrupt+0xa0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11a      	bne.n	8000f68 <sys_tick_interrupt+0x68>
      freq = freq_scratch + __HAL_TIM_GetCounter( &htim2 );
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <sys_tick_interrupt+0xa4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <sys_tick_interrupt+0xa8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <sys_tick_interrupt+0xac>)
 8000f40:	6013      	str	r3, [r2, #0]
      freq *= 1.000004;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <sys_tick_interrupt+0xac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fb76 	bl	8000638 <__aeabi_ui2d>
 8000f4c:	a310      	add	r3, pc, #64	; (adr r3, 8000f90 <sys_tick_interrupt+0x90>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff f905 	bl	8000160 <__aeabi_dmul>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fbe5 	bl	800072c <__aeabi_d2uiz>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <sys_tick_interrupt+0xac>)
 8000f66:	6013      	str	r3, [r2, #0]
    }
    // Reset the counter. This will generate one extra overflow for next measurement.
    // In case of nothing got counted, manually generate a reset to keep consistency.
    __HAL_TIM_SetCounter( &htim2, 1);
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <sys_tick_interrupt+0xa4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter( &htim2, 0);
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <sys_tick_interrupt+0xa4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    freq_scratch = 0;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <sys_tick_interrupt+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <sys_tick_interrupt+0xb0>)
 8000f84:	f000 fc66 	bl	8001854 <HAL_GPIO_TogglePin>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	f3af 8000 	nop.w
 8000f90:	31bde82d 	.word	0x31bde82d
 8000f94:	3ff00004 	.word	0x3ff00004
 8000f98:	200002fc 	.word	0x200002fc
 8000f9c:	10624dd3 	.word	0x10624dd3
 8000fa0:	20000308 	.word	0x20000308
 8000fa4:	2000053c 	.word	0x2000053c
 8000fa8:	20000304 	.word	0x20000304
 8000fac:	20000300 	.word	0x20000300
 8000fb0:	40011000 	.word	0x40011000

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001042:	d12b      	bne.n	800109c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_TIM_Base_MspInit+0x80>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4808      	ldr	r0, [pc, #32]	; (80010a8 <HAL_TIM_Base_MspInit+0x84>)
 8001088:	f000 fa48 	bl	800151c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	201c      	movs	r0, #28
 8001092:	f000 fa0c 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001096:	201c      	movs	r0, #28
 8001098:	f000 fa25 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <HardFault_Handler+0x4>

080010be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <BusFault_Handler+0x4>

080010ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	sys_tick_interrupt();
 80010f8:	f7ff ff02 	bl	8000f00 <sys_tick_interrupt>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8c0 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800110a:	f000 fced 	bl	8001ae8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000121c 	.word	0x2000121c

08001118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	tim2_interrupt();
 800111c:	f7ff fee0 	bl	8000ee0 <tim2_interrupt>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM2_IRQHandler+0x14>)
 8001122:	f002 fcb9 	bl	8003a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000053c 	.word	0x2000053c

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f007 f8b8 	bl	80082d4 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20005000 	.word	0x20005000
 8001190:	00000400 	.word	0x00000400
 8001194:	2000030c 	.word	0x2000030c
 8001198:	20001518 	.word	0x20001518

0800119c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011aa:	e003      	b.n	80011b4 <LoopCopyDataInit>

080011ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011b2:	3104      	adds	r1, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011bc:	d3f6      	bcc.n	80011ac <CopyDataInit>
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011c0:	e002      	b.n	80011c8 <LoopFillZerobss>

080011c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011c4:	f842 3b04 	str.w	r3, [r2], #4

080011c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011cc:	d3f9      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ce:	f7ff ffe5 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f007 f885 	bl	80082e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d6:	f7ff fac9 	bl	800076c <main>
  bx lr
 80011da:	4770      	bx	lr
  ldr r3, =_sidata
 80011dc:	08008d08 	.word	0x08008d08
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011e4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80011e8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80011ec:	20001518 	.word	0x20001518

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x28>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x28>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f947 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fed6 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f95f 	bl	8001502 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f927 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000584 	.word	0x20000584

080012a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000584 	.word	0x20000584

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffe0 	bl	80012a4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4906      	ldr	r1, [pc, #24]	; (8001398 <__NVIC_EnableIRQ+0x34>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff90 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff2d 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff42 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff35 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b08b      	sub	sp, #44	; 0x2c
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	e169      	b.n	8001804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001530:	2201      	movs	r2, #1
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8158 	bne.w	80017fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a9a      	ldr	r2, [pc, #616]	; (80017bc <HAL_GPIO_Init+0x2a0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d05e      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001558:	4a98      	ldr	r2, [pc, #608]	; (80017bc <HAL_GPIO_Init+0x2a0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d875      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800155e:	4a98      	ldr	r2, [pc, #608]	; (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d058      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001564:	4a96      	ldr	r2, [pc, #600]	; (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d86f      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800156a:	4a96      	ldr	r2, [pc, #600]	; (80017c4 <HAL_GPIO_Init+0x2a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d052      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001570:	4a94      	ldr	r2, [pc, #592]	; (80017c4 <HAL_GPIO_Init+0x2a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d869      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001576:	4a94      	ldr	r2, [pc, #592]	; (80017c8 <HAL_GPIO_Init+0x2ac>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d04c      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 800157c:	4a92      	ldr	r2, [pc, #584]	; (80017c8 <HAL_GPIO_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d863      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001582:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_GPIO_Init+0x2b0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d046      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001588:	4a90      	ldr	r2, [pc, #576]	; (80017cc <HAL_GPIO_Init+0x2b0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d85d      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800158e:	2b12      	cmp	r3, #18
 8001590:	d82a      	bhi.n	80015e8 <HAL_GPIO_Init+0xcc>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d859      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <HAL_GPIO_Init+0x80>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	08001617 	.word	0x08001617
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	08001603 	.word	0x08001603
 80015a8:	08001645 	.word	0x08001645
 80015ac:	0800164b 	.word	0x0800164b
 80015b0:	0800164b 	.word	0x0800164b
 80015b4:	0800164b 	.word	0x0800164b
 80015b8:	0800164b 	.word	0x0800164b
 80015bc:	0800164b 	.word	0x0800164b
 80015c0:	0800164b 	.word	0x0800164b
 80015c4:	0800164b 	.word	0x0800164b
 80015c8:	0800164b 	.word	0x0800164b
 80015cc:	0800164b 	.word	0x0800164b
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	0800164b 	.word	0x0800164b
 80015d8:	0800164b 	.word	0x0800164b
 80015dc:	0800164b 	.word	0x0800164b
 80015e0:	080015f9 	.word	0x080015f9
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <HAL_GPIO_Init+0x2b4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ee:	e02c      	b.n	800164a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e029      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	3304      	adds	r3, #4
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e024      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e01f      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	330c      	adds	r3, #12
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e01a      	b.n	800164c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800161e:	2304      	movs	r3, #4
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e013      	b.n	800164c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800162c:	2308      	movs	r3, #8
 800162e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	611a      	str	r2, [r3, #16]
          break;
 8001636:	e009      	b.n	800164c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	615a      	str	r2, [r3, #20]
          break;
 8001642:	e003      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x130>
          break;
 800164a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d801      	bhi.n	8001656 <HAL_GPIO_Init+0x13a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	e001      	b.n	800165a <HAL_GPIO_Init+0x13e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2bff      	cmp	r3, #255	; 0xff
 8001660:	d802      	bhi.n	8001668 <HAL_GPIO_Init+0x14c>
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x152>
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3b08      	subs	r3, #8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	210f      	movs	r1, #15
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	6a39      	ldr	r1, [r7, #32]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80b1 	beq.w	80017fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169c:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a40      	ldr	r2, [pc, #256]	; (80017dc <HAL_GPIO_Init+0x2c0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d013      	beq.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <HAL_GPIO_Init+0x2c4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1e0>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001708:	2300      	movs	r3, #0
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171a:	492f      	ldr	r1, [pc, #188]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	492c      	ldr	r1, [pc, #176]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4928      	ldr	r1, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	491e      	ldr	r1, [pc, #120]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4918      	ldr	r1, [pc, #96]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4914      	ldr	r1, [pc, #80]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d021      	beq.n	80017f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e021      	b.n	80017fe <HAL_GPIO_Init+0x2e2>
 80017ba:	bf00      	nop
 80017bc:	10320000 	.word	0x10320000
 80017c0:	10310000 	.word	0x10310000
 80017c4:	10220000 	.word	0x10220000
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10120000 	.word	0x10120000
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40011400 	.word	0x40011400
 80017ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_GPIO_Init+0x304>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4909      	ldr	r1, [pc, #36]	; (8001820 <HAL_GPIO_Init+0x304>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f ae8e 	bne.w	8001530 <HAL_GPIO_Init+0x14>
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	372c      	adds	r7, #44	; 0x2c
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43d9      	mvns	r1, r3
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	400b      	ands	r3, r1
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001888:	b08b      	sub	sp, #44	; 0x2c
 800188a:	af06      	add	r7, sp, #24
 800188c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0fd      	b.n	8001a94 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f006 fa67 	bl	8007d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fc64 	bl	800418c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	687e      	ldr	r6, [r7, #4]
 80018cc:	466d      	mov	r5, sp
 80018ce:	f106 0410 	add.w	r4, r6, #16
 80018d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	602b      	str	r3, [r5, #0]
 80018da:	1d33      	adds	r3, r6, #4
 80018dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f002 fc2e 	bl	8004140 <USB_CoreInit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ce      	b.n	8001a94 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fc5f 	bl	80041c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e04c      	b.n	80019a2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3301      	adds	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	b298      	uxth	r0, r3
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3336      	adds	r3, #54	; 0x36
 8001946:	4602      	mov	r2, r0
 8001948:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3303      	adds	r3, #3
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	333c      	adds	r3, #60	; 0x3c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3ad      	bcc.n	8001908 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e044      	b.n	8001a3c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3b5      	bcc.n	80019b2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	687e      	ldr	r6, [r7, #4]
 8001a4e:	466d      	mov	r5, sp
 8001a50:	f106 0410 	add.w	r4, r6, #16
 8001a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	602b      	str	r3, [r5, #0]
 8001a5c:	1d33      	adds	r3, r6, #4
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f002 fbb9 	bl	80041d8 <USB_DevInit>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e00d      	b.n	8001a94 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fb53 	bl	8006138 <USB_DevDisconnect>

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_Start+0x16>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e016      	b.n	8001ae0 <HAL_PCD_Start+0x44>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fb4e 	bl	8004160 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f006 fbcd 	bl	8008266 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fb27 	bl	8006124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fb29 	bl	800614c <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b04:	d102      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fb61 	bl	80021ce <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 fb1b 	bl	800614c <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d112      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b34:	b292      	uxth	r2, r2
 8001b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f006 f99b 	bl	8007e76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b40:	2100      	movs	r1, #0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f925 	bl	8001d92 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fafd 	bl	800614c <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fae6 	bl	800614c <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 facf 	bl	800614c <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	d126      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0204 	bic.w	r2, r2, #4
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f006 f97c 	bl	8007ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c02:	b292      	uxth	r2, r2
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 fa9d 	bl	800614c <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c1c:	f040 8084 	bne.w	8001d28 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
 8001c24:	e011      	b.n	8001c4a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	b292      	uxth	r2, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	f107 0120 	add.w	r1, r7, #32
 8001c3e:	440b      	add	r3, r1
 8001c40:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c44:	7ffb      	ldrb	r3, [r7, #31]
 8001c46:	3301      	adds	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d9ea      	bls.n	8001c26 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c80:	bf00      	nop
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f6      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	e010      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	7ffa      	ldrb	r2, [r7, #31]
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	440a      	add	r2, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	f107 0120 	add.w	r1, r7, #32
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ccc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d9eb      	bls.n	8001cb2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0208 	orr.w	r2, r2, #8
 8001cec:	b292      	uxth	r2, r2
 8001cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f006 f8c6 	bl	8007eb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fa0d 	bl	800614c <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d10e      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f006 f87f 	bl	8007e5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 f9f3 	bl	800614c <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d70:	d10b      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_SetAddress+0x1a>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e013      	b.n	8001dd4 <HAL_PCD_SetAddress+0x42>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 f99a 	bl	80060fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	803b      	strh	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0e      	bge.n	8001e20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4a:	883a      	ldrh	r2, [r7, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	78ba      	ldrb	r2, [r7, #2]
 8001e54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_EP_Open+0xa6>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e00e      	b.n	8001ea0 <HAL_PCD_EP_Open+0xc4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 f9c1 	bl	8004218 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0e      	bge.n	8001eda <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0207 	and.w	r2, r3, #7
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_Close+0x6a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00e      	b.n	8001f30 <HAL_PCD_EP_Close+0x88>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fce3 	bl	80048ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	460b      	mov	r3, r1
 8001f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fe95 	bl	8004cc4 <USB_EPStartXfer>
 8001f9a:	e005      	b.n	8001fa8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fe8e 	bl	8004cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 0207 	and.w	r2, r3, #7
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fd4:	681b      	ldr	r3, [r3, #0]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fe3b 	bl	8004cc4 <USB_EPStartXfer>
 800204e:	e005      	b.n	800205c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fe34 	bl	8004cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x7e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 ff06 	bl	8005f04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f004 f82b 	bl	800616a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d901      	bls.n	8002144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0e      	bge.n	800216a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0207 	and.w	r2, r3, #7
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_ClrStall+0x82>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fef4 	bl	8005fa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08e      	sub	sp, #56	; 0x38
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021d6:	e2df      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8158 	bne.w	80024a8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d152      	bne.n	80022a8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f005 fddc 	bl	8007e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 828e 	beq.w	8002798 <PCD_EP_ISR_Handler+0x5ca>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8289 	bne.w	8002798 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b292      	uxth	r2, r2
 800229a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022a6:	e277      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d034      	beq.n	800232c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002300:	b29b      	uxth	r3, r3
 8002302:	f003 ff82 	bl	800620a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29a      	uxth	r2, r3
 800230e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002312:	4013      	ands	r3, r2
 8002314:	823b      	strh	r3, [r7, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	8a3a      	ldrh	r2, [r7, #16]
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fd51 	bl	8007dcc <HAL_PCD_SetupStageCallback>
 800232a:	e235      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002330:	2b00      	cmp	r3, #0
 8002332:	f280 8231 	bge.w	8002798 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002342:	4013      	ands	r3, r2
 8002344:	83bb      	strh	r3, [r7, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	8bba      	ldrh	r2, [r7, #28]
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f003 ff32 	bl	800620a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f005 fd1a 	bl	8007df0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <PCD_EP_ISR_Handler+0x23c>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002402:	b29a      	uxth	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e02f      	b.n	800246a <PCD_EP_ISR_Handler+0x29c>
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b3e      	cmp	r3, #62	; 0x3e
 8002410:	d813      	bhi.n	800243a <PCD_EP_ISR_Handler+0x26c>
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <PCD_EP_ISR_Handler+0x25e>
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	3301      	adds	r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	b29b      	uxth	r3, r3
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	b29a      	uxth	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e017      	b.n	800246a <PCD_EP_ISR_Handler+0x29c>
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <PCD_EP_ISR_Handler+0x286>
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	3b01      	subs	r3, #1
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	b29b      	uxth	r3, r3
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	827b      	strh	r3, [r7, #18]
 800247c:	8a7b      	ldrh	r3, [r7, #18]
 800247e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002482:	827b      	strh	r3, [r7, #18]
 8002484:	8a7b      	ldrh	r3, [r7, #18]
 8002486:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800248a:	827b      	strh	r3, [r7, #18]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	8a7b      	ldrh	r3, [r7, #18]
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]
 80024a6:	e177      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f280 80ea 	bge.w	8002698 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024da:	4013      	ands	r3, r2
 80024dc:	853b      	strh	r3, [r7, #40]	; 0x28
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f2:	b292      	uxth	r2, r2
 80024f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d122      	bne.n	800255a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	3306      	adds	r3, #6
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800253e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8087 	beq.w	8002654 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	6959      	ldr	r1, [r3, #20]
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	88da      	ldrh	r2, [r3, #6]
 8002552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002554:	f003 fe59 	bl	800620a <USB_ReadPMA>
 8002558:	e07c      	b.n	8002654 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d108      	bne.n	8002574 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002562:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002564:	461a      	mov	r2, r3
 8002566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f923 	bl	80027b4 <HAL_PCD_EP_DB_Receive>
 800256e:	4603      	mov	r3, r0
 8002570:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002572:	e06f      	b.n	8002654 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d021      	beq.n	8002612 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	3302      	adds	r3, #2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02a      	beq.n	8002654 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	6959      	ldr	r1, [r3, #20]
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	891a      	ldrh	r2, [r3, #8]
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	f003 fdfd 	bl	800620a <USB_ReadPMA>
 8002610:	e020      	b.n	8002654 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	3306      	adds	r3, #6
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800263c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	895a      	ldrh	r2, [r3, #10]
 800264e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002650:	f003 fddb 	bl	800620a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265a:	441a      	add	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002666:	441a      	add	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <PCD_EP_ISR_Handler+0x4b0>
 8002674:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d206      	bcs.n	800268c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f005 fbb3 	bl	8007df0 <HAL_PCD_DataOutStageCallback>
 800268a:	e005      	b.n	8002698 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fb16 	bl	8004cc4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002698:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07a      	beq.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80026a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d0:	843b      	strh	r3, [r7, #32]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	8c3b      	ldrh	r3, [r7, #32]
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	78db      	ldrb	r3, [r3, #3]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d108      	bne.n	8002708 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d146      	bne.n	800278c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d141      	bne.n	800278c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	3302      	adds	r3, #2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002730:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	8bfb      	ldrh	r3, [r7, #30]
 8002738:	429a      	cmp	r2, r3
 800273a:	d906      	bls.n	800274a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	8bfb      	ldrh	r3, [r7, #30]
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	619a      	str	r2, [r3, #24]
 8002748:	e002      	b.n	8002750 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f005 fb61 	bl	8007e26 <HAL_PCD_DataInStageCallback>
 8002764:	e018      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	8bfb      	ldrh	r3, [r7, #30]
 800276c:	441a      	add	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	8bfb      	ldrh	r3, [r7, #30]
 8002778:	441a      	add	r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fa9d 	bl	8004cc4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800278a:	e005      	b.n	8002798 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800278c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800278e:	461a      	mov	r2, r3
 8002790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f91b 	bl	80029ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f6ff ad17 	blt.w	80021d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3738      	adds	r7, #56	; 0x38
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07e      	beq.n	80028ca <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	3302      	adds	r3, #2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	8b7b      	ldrh	r3, [r7, #26]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d306      	bcc.n	800280e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	8b7b      	ldrh	r3, [r7, #26]
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	619a      	str	r2, [r3, #24]
 800280c:	e002      	b.n	8002814 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d123      	bne.n	8002864 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	833b      	strh	r3, [r7, #24]
 8002838:	8b3b      	ldrh	r3, [r7, #24]
 800283a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800283e:	833b      	strh	r3, [r7, #24]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	441a      	add	r2, r3
 800284e:	8b3b      	ldrh	r3, [r7, #24]
 8002850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	b29b      	uxth	r3, r3
 8002862:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	82fb      	strh	r3, [r7, #22]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	8afb      	ldrh	r3, [r7, #22]
 800289a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028ae:	8b7b      	ldrh	r3, [r7, #26]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8087 	beq.w	80029c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6959      	ldr	r1, [r3, #20]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	891a      	ldrh	r2, [r3, #8]
 80028c2:	8b7b      	ldrh	r3, [r7, #26]
 80028c4:	f003 fca1 	bl	800620a <USB_ReadPMA>
 80028c8:	e07c      	b.n	80029c4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	3306      	adds	r3, #6
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	8b7b      	ldrh	r3, [r7, #26]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d306      	bcc.n	800290c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	1ad2      	subs	r2, r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	619a      	str	r2, [r3, #24]
 800290a:	e002      	b.n	8002912 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d123      	bne.n	8002962 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	83fb      	strh	r3, [r7, #30]
 8002936:	8bfb      	ldrh	r3, [r7, #30]
 8002938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800293c:	83fb      	strh	r3, [r7, #30]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	441a      	add	r2, r3
 800294c:	8bfb      	ldrh	r3, [r7, #30]
 800294e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d11f      	bne.n	80029ac <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	83bb      	strh	r3, [r7, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	8bbb      	ldrh	r3, [r7, #28]
 8002998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029ac:	8b7b      	ldrh	r3, [r7, #26]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6959      	ldr	r1, [r3, #20]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	895a      	ldrh	r2, [r3, #10]
 80029be:	8b7b      	ldrh	r3, [r7, #26]
 80029c0:	f003 fc23 	bl	800620a <USB_ReadPMA>
    }
  }

  return count;
 80029c4:	8b7b      	ldrh	r3, [r7, #26]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b094      	sub	sp, #80	; 0x50
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8138 	beq.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	3302      	adds	r3, #2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d907      	bls.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	619a      	str	r2, [r3, #24]
 8002a2e:	e002      	b.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d12c      	bne.n	8002a98 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	4619      	mov	r1, r3
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f005 f9ee 	bl	8007e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 823a 	beq.w	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	82fb      	strh	r3, [r7, #22]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	441a      	add	r2, r3
 8002a80:	8afb      	ldrh	r3, [r7, #22]
 8002a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]
 8002a96:	e218      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 81ee 	bne.w	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002af6:	441a      	add	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b04:	441a      	add	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d309      	bcc.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	621a      	str	r2, [r3, #32]
 8002b28:	e015      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002b32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b40:	e009      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d155      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x23c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	011a      	lsls	r2, r3, #4
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e047      	b.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x274>
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8002bb6:	d811      	bhi.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x20e>
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_PCD_EP_DB_Transmit+0x200>
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	029b      	lsls	r3, r3, #10
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	e032      	b.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x274>
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x224>
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	029b      	lsls	r3, r3, #10
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	e01b      	b.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x274>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d117      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x274>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	4413      	add	r3, r2
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	011a      	lsls	r2, r3, #4
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	4413      	add	r3, r2
 8002c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6959      	ldr	r1, [r3, #20]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	891a      	ldrh	r2, [r3, #8]
 8002c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f003 fa95 	bl	8006180 <USB_WritePMA>
 8002c56:	e138      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d307      	bcc.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c98:	1ad2      	subs	r2, r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	619a      	str	r2, [r3, #24]
 8002c9e:	e002      	b.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12e      	bne.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f005 f8b6 	bl	8007e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 8102 	bne.w	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
 8002d0a:	e0de      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11f      	bne.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	867b      	strh	r3, [r7, #50]	; 0x32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	441a      	add	r2, r3
 8002d40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 80b4 	bne.w	8002eca <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d78:	441a      	add	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d309      	bcc.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	1ad2      	subs	r2, r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	621a      	str	r2, [r3, #32]
 8002d9c:	e015      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002da6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002db4:	e009      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d155      	bne.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	4413      	add	r3, r2
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	011a      	lsls	r2, r3, #4
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d112      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x45e>
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	e044      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e30:	d811      	bhi.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x488>
 8002e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	3301      	adds	r3, #1
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	029b      	lsls	r3, r3, #10
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	e02f      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x49e>
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	e018      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d114      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9a:	4413      	add	r3, r2
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011a      	lsls	r2, r3, #4
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6959      	ldr	r1, [r3, #20]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	895a      	ldrh	r2, [r3, #10]
 8002ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f003 f95b 	bl	8006180 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee4:	82bb      	strh	r3, [r7, #20]
 8002ee6:	8abb      	ldrh	r3, [r7, #20]
 8002ee8:	f083 0310 	eor.w	r3, r3, #16
 8002eec:	82bb      	strh	r3, [r7, #20]
 8002eee:	8abb      	ldrh	r3, [r7, #20]
 8002ef0:	f083 0320 	eor.w	r3, r3, #32
 8002ef4:	82bb      	strh	r3, [r7, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	441a      	add	r2, r3
 8002f04:	8abb      	ldrh	r3, [r7, #20]
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3750      	adds	r7, #80	; 0x50
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	4613      	mov	r3, r2
 8002f34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e009      	b.n	8002f6e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5a:	897a      	ldrh	r2, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f6e:	893b      	ldrh	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2200      	movs	r2, #0
 8002f78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	80da      	strh	r2, [r3, #6]
 8002f82:	e00b      	b.n	8002f9c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2201      	movs	r2, #1
 8002f88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e26c      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8087 	beq.w	80030d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc8:	4b92      	ldr	r3, [pc, #584]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d00c      	beq.n	8002fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd4:	4b8f      	ldr	r3, [pc, #572]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d112      	bne.n	8003006 <HAL_RCC_OscConfig+0x5e>
 8002fe0:	4b8c      	ldr	r3, [pc, #560]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d10b      	bne.n	8003006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d06c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x12c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d168      	bne.n	80030d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e246      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x76>
 8003010:	4b80      	ldr	r3, [pc, #512]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a7f      	ldr	r2, [pc, #508]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e02e      	b.n	800307c <HAL_RCC_OscConfig+0xd4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x98>
 8003026:	4b7b      	ldr	r3, [pc, #492]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b78      	ldr	r3, [pc, #480]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0xd4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0xbc>
 800304a:	4b72      	ldr	r3, [pc, #456]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a71      	ldr	r2, [pc, #452]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0xd4>
 8003064:	4b6b      	ldr	r3, [pc, #428]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a67      	ldr	r2, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe f90e 	bl	80012a4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe f90a 	bl	80012a4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1fa      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0xe4>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe f8fa 	bl	80012a4 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe f8f6 	bl	80012a4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1e6      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x10c>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d11c      	bne.n	8003134 <HAL_RCC_OscConfig+0x18c>
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d116      	bne.n	8003134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	4b43      	ldr	r3, [pc, #268]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_RCC_OscConfig+0x176>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d001      	beq.n	800311e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1ba      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4939      	ldr	r1, [pc, #228]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	e03a      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe f8af 	bl	80012a4 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe f8ab 	bl	80012a4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e19b      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4927      	ldr	r1, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe f88e 	bl	80012a4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318c:	f7fe f88a 	bl	80012a4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e17a      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03a      	beq.n	800322c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d019      	beq.n	80031f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_RCC_OscConfig+0x274>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fe f86e 	bl	80012a4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fe f86a 	bl	80012a4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e15a      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f000 fade 	bl	80037ac <RCC_Delay>
 80031f0:	e01c      	b.n	800322c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_OscConfig+0x274>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe f854 	bl	80012a4 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fe:	e00f      	b.n	8003220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003200:	f7fe f850 	bl	80012a4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d908      	bls.n	8003220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e140      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	42420000 	.word	0x42420000
 800321c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b9e      	ldr	r3, [pc, #632]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e9      	bne.n	8003200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a6 	beq.w	8003386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b97      	ldr	r3, [pc, #604]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b94      	ldr	r3, [pc, #592]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a93      	ldr	r2, [pc, #588]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	61d3      	str	r3, [r2, #28]
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a8a      	ldr	r2, [pc, #552]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe f811 	bl	80012a4 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe f80d 	bl	80012a4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0fd      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x312>
 80032ac:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a7a      	ldr	r2, [pc, #488]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	e02d      	b.n	8003316 <HAL_RCC_OscConfig+0x36e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x334>
 80032c2:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a75      	ldr	r2, [pc, #468]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	4b73      	ldr	r3, [pc, #460]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a72      	ldr	r2, [pc, #456]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	6213      	str	r3, [r2, #32]
 80032da:	e01c      	b.n	8003316 <HAL_RCC_OscConfig+0x36e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d10c      	bne.n	80032fe <HAL_RCC_OscConfig+0x356>
 80032e4:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a6c      	ldr	r2, [pc, #432]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	e00b      	b.n	8003316 <HAL_RCC_OscConfig+0x36e>
 80032fe:	4b67      	ldr	r3, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6213      	str	r3, [r2, #32]
 800330a:	4b64      	ldr	r3, [pc, #400]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a63      	ldr	r2, [pc, #396]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331e:	f7fd ffc1 	bl	80012a4 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd ffbd 	bl	80012a4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0ab      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b57      	ldr	r3, [pc, #348]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCC_OscConfig+0x37e>
 8003348:	e014      	b.n	8003374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334a:	f7fd ffab 	bl	80012a4 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fd ffa7 	bl	80012a4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e095      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ee      	bne.n	8003352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d105      	bne.n	8003386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4b48      	ldr	r3, [pc, #288]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a47      	ldr	r2, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8081 	beq.w	8003492 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d061      	beq.n	8003460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d146      	bne.n	8003432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_OscConfig+0x4fc>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fd ff7b 	bl	80012a4 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fd ff77 	bl	80012a4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e067      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c4:	4b35      	ldr	r3, [pc, #212]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d108      	bne.n	80033ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	492d      	ldr	r1, [pc, #180]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a19      	ldr	r1, [r3, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	430b      	orrs	r3, r1
 80033fe:	4927      	ldr	r1, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003404:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x4fc>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fd ff4b 	bl	80012a4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fd ff47 	bl	80012a4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e037      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x46a>
 8003430:	e02f      	b.n	8003492 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_RCC_OscConfig+0x4fc>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd ff34 	bl	80012a4 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fd ff30 	bl	80012a4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e020      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x498>
 800345e:	e018      	b.n	8003492 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e013      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x4f4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	429a      	cmp	r2, r3
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
 80034a4:	42420060 	.word	0x42420060

080034a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d0      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 0207 	bic.w	r2, r3, #7
 80034d2:	4965      	ldr	r1, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800350e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d040      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e073      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06b      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4936      	ldr	r1, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003598:	f7fd fe84 	bl	80012a4 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fd fe80 	bl	80012a4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e053      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d210      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4922      	ldr	r1, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f859 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1cc>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1d0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fde2 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40022000 	.word	0x40022000
 800366c:	40021000 	.word	0x40021000
 8003670:	08008cbc 	.word	0x08008cbc
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800369a:	2303      	movs	r3, #3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80036a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RCC_MCOConfig+0x68>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <HAL_RCC_MCOConfig+0x68>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_MCOConfig+0x68>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	4619      	mov	r1, r3
 80036c6:	4808      	ldr	r0, [pc, #32]	; (80036e8 <HAL_RCC_MCOConfig+0x6c>)
 80036c8:	f7fd ff28 	bl	800151c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_MCOConfig+0x68>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_MCOConfig+0x68>)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010800 	.word	0x40010800

080036ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b490      	push	{r4, r7}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036f4:	1d3c      	adds	r4, r7, #4
 80036f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036fc:	f240 2301 	movw	r3, #513	; 0x201
 8003700:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x40>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x46>
 800372a:	e02d      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800372e:	623b      	str	r3, [r7, #32]
      break;
 8003730:	e02d      	b.n	800378e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800373e:	4413      	add	r3, r2
 8003740:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003744:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	0c5b      	lsrs	r3, r3, #17
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375e:	4413      	add	r3, r2
 8003760:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003764:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376a:	fb02 f203 	mul.w	r2, r2, r3
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e004      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	623b      	str	r3, [r7, #32]
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	623b      	str	r3, [r7, #32]
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	6a3b      	ldr	r3, [r7, #32]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3728      	adds	r7, #40	; 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bc90      	pop	{r4, r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	08008c64 	.word	0x08008c64
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	003d0900 	.word	0x003d0900

080037ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <RCC_Delay+0x34>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <RCC_Delay+0x38>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c8:	bf00      	nop
  }
  while (Delay --);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	60fa      	str	r2, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f9      	bne.n	80037c8 <RCC_Delay+0x1c>
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000000 	.word	0x20000000
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d07d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381e:	61d3      	str	r3, [r2, #28]
 8003820:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382c:	2301      	movs	r3, #1
 800382e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d118      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a42      	ldr	r2, [pc, #264]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003848:	f7fd fd2c 	bl	80012a4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	e008      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003850:	f7fd fd28 	bl	80012a4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e06d      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386e:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d027      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fcf7 	bl	80012a4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fcf3 	bl	80012a4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e036      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ee      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4917      	ldr	r1, [pc, #92]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	490b      	ldr	r1, [pc, #44]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4904      	ldr	r1, [pc, #16]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	42420440 	.word	0x42420440

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fb52 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f9f8 	bl	8003d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e03a      	b.n	8003a82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <HAL_TIM_Base_Start_IT+0x98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d111      	bne.n	8003a70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d010      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6e:	e007      	b.n	8003a80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800

08003a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0202 	mvn.w	r2, #2
 8003ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f938 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f92b 	bl	8003d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f93a 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0204 	mvn.w	r2, #4
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f90e 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f901 	bl	8003d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f910 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0208 	mvn.w	r2, #8
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8e4 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8d7 	bl	8003d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8e6 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0210 	mvn.w	r2, #16
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8ba 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8ad 	bl	8003d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8bc 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0201 	mvn.w	r2, #1
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f888 	bl	8003d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa73 	bl	800412e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f880 	bl	8003d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0220 	mvn.w	r2, #32
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa3e 	bl	800411c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e031      	b.n	8003d24 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8ba 	bl	8003e4c <TIM_SlaveTimer_SetConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e018      	b.n	8003d24 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d10:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
	...

08003d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <TIM_Base_SetConfig+0xb8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_Base_SetConfig+0x30>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d007      	beq.n	8003db8 <TIM_Base_SetConfig+0x30>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <TIM_Base_SetConfig+0xbc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0x30>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <TIM_Base_SetConfig+0xc0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d108      	bne.n	8003dca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <TIM_Base_SetConfig+0xb8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0x62>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <TIM_Base_SetConfig+0xbc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0x62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <TIM_Base_SetConfig+0xc0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <TIM_Base_SetConfig+0xb8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d103      	bne.n	8003e30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	615a      	str	r2, [r3, #20]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800

08003e4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b70      	cmp	r3, #112	; 0x70
 8003e90:	d01a      	beq.n	8003ec8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003e92:	2b70      	cmp	r3, #112	; 0x70
 8003e94:	d860      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e96:	2b60      	cmp	r3, #96	; 0x60
 8003e98:	d054      	beq.n	8003f44 <TIM_SlaveTimer_SetConfig+0xf8>
 8003e9a:	2b60      	cmp	r3, #96	; 0x60
 8003e9c:	d85c      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003e9e:	2b50      	cmp	r3, #80	; 0x50
 8003ea0:	d046      	beq.n	8003f30 <TIM_SlaveTimer_SetConfig+0xe4>
 8003ea2:	2b50      	cmp	r3, #80	; 0x50
 8003ea4:	d858      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d019      	beq.n	8003ede <TIM_SlaveTimer_SetConfig+0x92>
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d854      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003eae:	2b30      	cmp	r3, #48	; 0x30
 8003eb0:	d054      	beq.n	8003f5c <TIM_SlaveTimer_SetConfig+0x110>
 8003eb2:	2b30      	cmp	r3, #48	; 0x30
 8003eb4:	d850      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d050      	beq.n	8003f5c <TIM_SlaveTimer_SetConfig+0x110>
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d84c      	bhi.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04c      	beq.n	8003f5c <TIM_SlaveTimer_SetConfig+0x110>
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d04a      	beq.n	8003f5c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003ec6:	e047      	b.n	8003f58 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68d9      	ldr	r1, [r3, #12]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f000 f8a3 	bl	8004022 <TIM_ETR_SetConfig>
      break;
 8003edc:	e03f      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d101      	bne.n	8003eea <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e03a      	b.n	8003f60 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
      break;
 8003f2e:	e016      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f000 f813 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      break;
 8003f42:	e00c      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	461a      	mov	r2, r3
 8003f52:	f000 f837 	bl	8003fc4 <TIM_TI2_ConfigInputStage>
      break;
 8003f56:	e002      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003f5c:	bf00      	nop
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 0210 	bic.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	031b      	lsls	r3, r3, #12
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004022:	b480      	push	{r7}
 8004024:	b087      	sub	sp, #28
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	021a      	lsls	r2, r3, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	431a      	orrs	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4313      	orrs	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e046      	b.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d009      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a10      	ldr	r2, [pc, #64]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10c      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800

0800411c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004140:	b084      	sub	sp, #16
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	f107 0014 	add.w	r0, r7, #20
 800414e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	b004      	add	sp, #16
 800415e:	4770      	bx	lr

08004160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004170:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004174:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004194:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004198:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041d8:	b084      	sub	sp, #16
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	f107 0014 	add.w	r0, r7, #20
 80041e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	b004      	add	sp, #16
 8004216:	4770      	bx	lr

08004218 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004218:	b480      	push	{r7}
 800421a:	b09b      	sub	sp, #108	; 0x6c
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	78db      	ldrb	r3, [r3, #3]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d81f      	bhi.n	800428a <USB_ActivateEndpoint+0x72>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <USB_ActivateEndpoint+0x38>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004261 	.word	0x08004261
 8004254:	0800427d 	.word	0x0800427d
 8004258:	08004293 	.word	0x08004293
 800425c:	0800426f 	.word	0x0800426f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004268:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800426c:	e012      	b.n	8004294 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800426e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004272:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800427a:	e00b      	b.n	8004294 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800427c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004284:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004288:	e004      	b.n	8004294 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004290:	e000      	b.n	8004294 <USB_ActivateEndpoint+0x7c>
      break;
 8004292:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 8149 	bne.w	8004598 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8084 	beq.w	8004418 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	88db      	ldrh	r3, [r3, #6]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	81fb      	strh	r3, [r7, #14]
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01b      	beq.n	8004394 <USB_ActivateEndpoint+0x17c>
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	81bb      	strh	r3, [r7, #12]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	89bb      	ldrh	r3, [r7, #12]
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	78db      	ldrb	r3, [r3, #3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d020      	beq.n	80043de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	813b      	strh	r3, [r7, #8]
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	f083 0320 	eor.w	r3, r3, #32
 80043ba:	813b      	strh	r3, [r7, #8]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]
 80043dc:	e27f      	b.n	80048de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
 8004416:	e262      	b.n	80048de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	4413      	add	r3, r2
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	4413      	add	r3, r2
 8004436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	88db      	ldrh	r3, [r3, #6]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	4413      	add	r3, r2
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	4413      	add	r3, r2
 800446a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d112      	bne.n	800449e <USB_ActivateEndpoint+0x286>
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004482:	b29a      	uxth	r2, r3
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29a      	uxth	r2, r3
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e02f      	b.n	80044fe <USB_ActivateEndpoint+0x2e6>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b3e      	cmp	r3, #62	; 0x3e
 80044a4:	d813      	bhi.n	80044ce <USB_ActivateEndpoint+0x2b6>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	663b      	str	r3, [r7, #96]	; 0x60
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <USB_ActivateEndpoint+0x2a8>
 80044ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044bc:	3301      	adds	r3, #1
 80044be:	663b      	str	r3, [r7, #96]	; 0x60
 80044c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e017      	b.n	80044fe <USB_ActivateEndpoint+0x2e6>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	663b      	str	r3, [r7, #96]	; 0x60
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <USB_ActivateEndpoint+0x2d0>
 80044e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e4:	3b01      	subs	r3, #1
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
 80044e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	83fb      	strh	r3, [r7, #30]
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <USB_ActivateEndpoint+0x336>
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452c:	83bb      	strh	r3, [r7, #28]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	8bbb      	ldrh	r3, [r7, #28]
 800453a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	837b      	strh	r3, [r7, #26]
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800456c:	837b      	strh	r3, [r7, #26]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004574:	837b      	strh	r3, [r7, #26]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	8b7b      	ldrh	r3, [r7, #26]
 8004582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004592:	b29b      	uxth	r3, r3
 8004594:	8013      	strh	r3, [r2, #0]
 8004596:	e1a2      	b.n	80048de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e4:	4413      	add	r3, r2
 80045e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f6:	657b      	str	r3, [r7, #84]	; 0x54
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	891b      	ldrh	r3, [r3, #8]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	653b      	str	r3, [r7, #80]	; 0x50
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004618:	4413      	add	r3, r2
 800461a:	653b      	str	r3, [r7, #80]	; 0x50
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004624:	4413      	add	r3, r2
 8004626:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	895b      	ldrh	r3, [r3, #10]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 8091 	bne.w	8004768 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <USB_ActivateEndpoint+0x47e>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80046a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01b      	beq.n	80046e6 <USB_ActivateEndpoint+0x4ce>
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004700:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004704:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004706:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800470c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	867b      	strh	r3, [r7, #50]	; 0x32
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
 8004766:	e0ba      	b.n	80048de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800477c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01d      	beq.n	80047c0 <USB_ActivateEndpoint+0x5a8>
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01d      	beq.n	8004818 <USB_ActivateEndpoint+0x600>
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	78db      	ldrb	r3, [r3, #3]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d024      	beq.n	800486a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800483a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800483e:	f083 0320 	eor.w	r3, r3, #32
 8004842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
 8004868:	e01d      	b.n	80048a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	376c      	adds	r7, #108	; 0x6c
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b08d      	sub	sp, #52	; 0x34
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7b1b      	ldrb	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 808e 	bne.w	8004a1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d044      	beq.n	8004992 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	81bb      	strh	r3, [r7, #12]
 8004916:	89bb      	ldrh	r3, [r7, #12]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <USB_DeactivateEndpoint+0x6c>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	817b      	strh	r3, [r7, #10]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	441a      	add	r2, r3
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004954:	b29b      	uxth	r3, r3
 8004956:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496e:	813b      	strh	r3, [r7, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
 8004990:	e192      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	827b      	strh	r3, [r7, #18]
 80049a0:	8a7b      	ldrh	r3, [r7, #18]
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <USB_DeactivateEndpoint+0xf6>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	823b      	strh	r3, [r7, #16]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8a3b      	ldrh	r3, [r7, #16]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	81fb      	strh	r3, [r7, #14]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	89fb      	ldrh	r3, [r7, #14]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	e14d      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 80a5 	bne.w	8004b70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	843b      	strh	r3, [r7, #32]
 8004a34:	8c3b      	ldrh	r3, [r7, #32]
 8004a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01b      	beq.n	8004a76 <USB_DeactivateEndpoint+0x18a>
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	83fb      	strh	r3, [r7, #30]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	8bfb      	ldrh	r3, [r7, #30]
 8004a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	83bb      	strh	r3, [r7, #28]
 8004a84:	8bbb      	ldrh	r3, [r7, #28]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01b      	beq.n	8004ac6 <USB_DeactivateEndpoint+0x1da>
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	837b      	strh	r3, [r7, #26]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	441a      	add	r2, r3
 8004ab0:	8b7b      	ldrh	r3, [r7, #26]
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	833b      	strh	r3, [r7, #24]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8b3b      	ldrh	r3, [r7, #24]
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	82fb      	strh	r3, [r7, #22]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8afb      	ldrh	r3, [r7, #22]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	82bb      	strh	r3, [r7, #20]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8abb      	ldrh	r3, [r7, #20]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
 8004b6e:	e0a3      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <USB_DeactivateEndpoint+0x2d4>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <USB_DeactivateEndpoint+0x324>
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3734      	adds	r7, #52	; 0x34
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b0c4      	sub	sp, #272	; 0x110
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	6018      	str	r0, [r3, #0]
 8004cce:	463b      	mov	r3, r7
 8004cd0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 8557 	bne.w	800578c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cde:	463b      	mov	r3, r7
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d905      	bls.n	8004cfa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004cee:	463b      	mov	r3, r7
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004cf8:	e004      	b.n	8004d04 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	7b1b      	ldrb	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d12c      	bne.n	8004d68 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6959      	ldr	r1, [r3, #20]
 8004d14:	463b      	mov	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	88da      	ldrh	r2, [r3, #6]
 8004d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	1d38      	adds	r0, r7, #4
 8004d22:	6800      	ldr	r0, [r0, #0]
 8004d24:	f001 fa2c 	bl	8006180 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d28:	1d3b      	adds	r3, r7, #4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	463b      	mov	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	011a      	lsls	r2, r3, #4
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d50:	f107 0310 	add.w	r3, r7, #16
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f107 0310 	add.w	r3, r7, #16
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	f000 bcdd 	b.w	8005722 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78db      	ldrb	r3, [r3, #3]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	f040 8347 	bne.w	8005402 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f240 82eb 	bls.w	800535c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004da4:	1d3b      	adds	r3, r7, #4
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	463b      	mov	r3, r7
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	463b      	mov	r3, r7
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8159 	beq.w	80050aa <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d164      	bne.n	8004ed2 <USB_EPStartXfer+0x20e>
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	4413      	add	r3, r2
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	011a      	lsls	r2, r3, #4
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d112      	bne.n	8004e60 <USB_EPStartXfer+0x19c>
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e054      	b.n	8004f0a <USB_EPStartXfer+0x246>
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e64:	2b3e      	cmp	r3, #62	; 0x3e
 8004e66:	d817      	bhi.n	8004e98 <USB_EPStartXfer+0x1d4>
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <USB_EPStartXfer+0x1c4>
 8004e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e82:	3301      	adds	r3, #1
 8004e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	e038      	b.n	8004f0a <USB_EPStartXfer+0x246>
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <USB_EPStartXfer+0x1f4>
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	029b      	lsls	r3, r3, #10
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	e01b      	b.n	8004f0a <USB_EPStartXfer+0x246>
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d116      	bne.n	8004f0a <USB_EPStartXfer+0x246>
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	4413      	add	r3, r2
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	463b      	mov	r3, r7
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	011a      	lsls	r2, r3, #4
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	4413      	add	r3, r2
 8004efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	895b      	ldrh	r3, [r3, #10]
 8004f10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f14:	463b      	mov	r3, r7
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f24:	1d38      	adds	r0, r7, #4
 8004f26:	6800      	ldr	r0, [r0, #0]
 8004f28:	f001 f92a 	bl	8006180 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f36:	441a      	add	r2, r3
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d909      	bls.n	8004f62 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f4e:	463b      	mov	r3, r7
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	621a      	str	r2, [r3, #32]
 8004f60:	e008      	b.n	8004f74 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d164      	bne.n	8005048 <USB_EPStartXfer+0x384>
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	463b      	mov	r3, r7
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	011a      	lsls	r2, r3, #4
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d112      	bne.n	8004fd6 <USB_EPStartXfer+0x312>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e057      	b.n	8005086 <USB_EPStartXfer+0x3c2>
 8004fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fda:	2b3e      	cmp	r3, #62	; 0x3e
 8004fdc:	d817      	bhi.n	800500e <USB_EPStartXfer+0x34a>
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d004      	beq.n	8004ffe <USB_EPStartXfer+0x33a>
 8004ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ffe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005002:	b29b      	uxth	r3, r3
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	b29a      	uxth	r2, r3
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	e03b      	b.n	8005086 <USB_EPStartXfer+0x3c2>
 800500e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <USB_EPStartXfer+0x36a>
 8005024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005028:	3b01      	subs	r3, #1
 800502a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800502e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005032:	b29b      	uxth	r3, r3
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005040:	b29a      	uxth	r2, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e01e      	b.n	8005086 <USB_EPStartXfer+0x3c2>
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d119      	bne.n	8005086 <USB_EPStartXfer+0x3c2>
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005060:	b29b      	uxth	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	4413      	add	r3, r2
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	011a      	lsls	r2, r3, #4
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	4413      	add	r3, r2
 8005076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	b29a      	uxth	r2, r3
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005086:	463b      	mov	r3, r7
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	891b      	ldrh	r3, [r3, #8]
 800508c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005090:	463b      	mov	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6959      	ldr	r1, [r3, #20]
 8005096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509a:	b29b      	uxth	r3, r3
 800509c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050a0:	1d38      	adds	r0, r7, #4
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	f001 f86c 	bl	8006180 <USB_WritePMA>
 80050a8:	e33b      	b.n	8005722 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d164      	bne.n	800517e <USB_EPStartXfer+0x4ba>
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	4413      	add	r3, r2
 80050ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	011a      	lsls	r2, r3, #4
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	4413      	add	r3, r2
 80050d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d112      	bne.n	800510c <USB_EPStartXfer+0x448>
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005104:	b29a      	uxth	r2, r3
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e057      	b.n	80051bc <USB_EPStartXfer+0x4f8>
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	2b3e      	cmp	r3, #62	; 0x3e
 8005112:	d817      	bhi.n	8005144 <USB_EPStartXfer+0x480>
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800511e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <USB_EPStartXfer+0x470>
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005138:	b29b      	uxth	r3, r3
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	b29a      	uxth	r2, r3
 800513e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e03b      	b.n	80051bc <USB_EPStartXfer+0x4f8>
 8005144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <USB_EPStartXfer+0x4a0>
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515e:	3b01      	subs	r3, #1
 8005160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005168:	b29b      	uxth	r3, r3
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	b29b      	uxth	r3, r3
 800516e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005176:	b29a      	uxth	r2, r3
 8005178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e01e      	b.n	80051bc <USB_EPStartXfer+0x4f8>
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d119      	bne.n	80051bc <USB_EPStartXfer+0x4f8>
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	657b      	str	r3, [r7, #84]	; 0x54
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519c:	4413      	add	r3, r2
 800519e:	657b      	str	r3, [r7, #84]	; 0x54
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	011a      	lsls	r2, r3, #4
 80051a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051aa:	4413      	add	r3, r2
 80051ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
 80051b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051bc:	463b      	mov	r3, r7
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	891b      	ldrh	r3, [r3, #8]
 80051c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6959      	ldr	r1, [r3, #20]
 80051cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051d6:	1d38      	adds	r0, r7, #4
 80051d8:	6800      	ldr	r0, [r0, #0]
 80051da:	f000 ffd1 	bl	8006180 <USB_WritePMA>
            ep->xfer_buff += len;
 80051de:	463b      	mov	r3, r7
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e8:	441a      	add	r2, r3
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	463b      	mov	r3, r7
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d909      	bls.n	8005214 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	621a      	str	r2, [r3, #32]
 8005212:	e008      	b.n	8005226 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d164      	bne.n	8005300 <USB_EPStartXfer+0x63c>
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	4413      	add	r3, r2
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800524e:	463b      	mov	r3, r7
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005258:	4413      	add	r3, r2
 800525a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d112      	bne.n	800528e <USB_EPStartXfer+0x5ca>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005272:	b29a      	uxth	r2, r3
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005286:	b29a      	uxth	r2, r3
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e054      	b.n	8005338 <USB_EPStartXfer+0x674>
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	2b3e      	cmp	r3, #62	; 0x3e
 8005294:	d817      	bhi.n	80052c6 <USB_EPStartXfer+0x602>
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <USB_EPStartXfer+0x5f2>
 80052ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052b0:	3301      	adds	r3, #1
 80052b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e038      	b.n	8005338 <USB_EPStartXfer+0x674>
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <USB_EPStartXfer+0x622>
 80052dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052e0:	3b01      	subs	r3, #1
 80052e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e01b      	b.n	8005338 <USB_EPStartXfer+0x674>
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d116      	bne.n	8005338 <USB_EPStartXfer+0x674>
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005312:	b29b      	uxth	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005318:	4413      	add	r3, r2
 800531a:	647b      	str	r3, [r7, #68]	; 0x44
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	011a      	lsls	r2, r3, #4
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	4413      	add	r3, r2
 8005328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005332:	b29a      	uxth	r2, r3
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	895b      	ldrh	r3, [r3, #10]
 800533e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6959      	ldr	r1, [r3, #20]
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	b29b      	uxth	r3, r3
 800534e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005352:	1d38      	adds	r0, r7, #4
 8005354:	6800      	ldr	r0, [r0, #0]
 8005356:	f000 ff13 	bl	8006180 <USB_WritePMA>
 800535a:	e1e2      	b.n	8005722 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	663b      	str	r3, [r7, #96]	; 0x60
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053be:	4413      	add	r3, r2
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	011a      	lsls	r2, r3, #4
 80053ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	891b      	ldrh	r3, [r3, #8]
 80053e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e8:	463b      	mov	r3, r7
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6959      	ldr	r1, [r3, #20]
 80053ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053f8:	1d38      	adds	r0, r7, #4
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	f000 fec0 	bl	8006180 <USB_WritePMA>
 8005400:	e18f      	b.n	8005722 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 808f 	beq.w	800553c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	67bb      	str	r3, [r7, #120]	; 0x78
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d164      	bne.n	80054f8 <USB_EPStartXfer+0x834>
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	673b      	str	r3, [r7, #112]	; 0x70
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005442:	4413      	add	r3, r2
 8005444:	673b      	str	r3, [r7, #112]	; 0x70
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	011a      	lsls	r2, r3, #4
 800544e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005450:	4413      	add	r3, r2
 8005452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d112      	bne.n	8005486 <USB_EPStartXfer+0x7c2>
 8005460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800546a:	b29a      	uxth	r2, r3
 800546c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547e:	b29a      	uxth	r2, r3
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	e054      	b.n	8005530 <USB_EPStartXfer+0x86c>
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	2b3e      	cmp	r3, #62	; 0x3e
 800548c:	d817      	bhi.n	80054be <USB_EPStartXfer+0x7fa>
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <USB_EPStartXfer+0x7ea>
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	3301      	adds	r3, #1
 80054aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	029b      	lsls	r3, r3, #10
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e038      	b.n	8005530 <USB_EPStartXfer+0x86c>
 80054be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <USB_EPStartXfer+0x81a>
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	3b01      	subs	r3, #1
 80054da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e01b      	b.n	8005530 <USB_EPStartXfer+0x86c>
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d116      	bne.n	8005530 <USB_EPStartXfer+0x86c>
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005510:	4413      	add	r3, r2
 8005512:	67bb      	str	r3, [r7, #120]	; 0x78
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	011a      	lsls	r2, r3, #4
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	4413      	add	r3, r2
 8005520:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005524:	677b      	str	r3, [r7, #116]	; 0x74
 8005526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552a:	b29a      	uxth	r2, r3
 800552c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	895b      	ldrh	r3, [r3, #10]
 8005536:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800553a:	e097      	b.n	800566c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d168      	bne.n	8005618 <USB_EPStartXfer+0x954>
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800555e:	4413      	add	r3, r2
 8005560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	011a      	lsls	r2, r3, #4
 800556c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005570:	4413      	add	r3, r2
 8005572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d112      	bne.n	80055a6 <USB_EPStartXfer+0x8e2>
 8005580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558a:	b29a      	uxth	r2, r3
 800558c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e05d      	b.n	8005662 <USB_EPStartXfer+0x99e>
 80055a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055aa:	2b3e      	cmp	r3, #62	; 0x3e
 80055ac:	d817      	bhi.n	80055de <USB_EPStartXfer+0x91a>
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <USB_EPStartXfer+0x90a>
 80055c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	e041      	b.n	8005662 <USB_EPStartXfer+0x99e>
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <USB_EPStartXfer+0x93a>
 80055f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055f8:	3b01      	subs	r3, #1
 80055fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005602:	b29b      	uxth	r3, r3
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	e024      	b.n	8005662 <USB_EPStartXfer+0x99e>
 8005618:	463b      	mov	r3, r7
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d11f      	bne.n	8005662 <USB_EPStartXfer+0x99e>
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005632:	b29b      	uxth	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800563a:	4413      	add	r3, r2
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	011a      	lsls	r2, r3, #4
 8005648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800564c:	4413      	add	r3, r2
 800564e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565a:	b29a      	uxth	r2, r3
 800565c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005660:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	891b      	ldrh	r3, [r3, #8]
 8005668:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6959      	ldr	r1, [r3, #20]
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005676:	b29b      	uxth	r3, r3
 8005678:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800567c:	1d38      	adds	r0, r7, #4
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	f000 fd7e 	bl	8006180 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d122      	bne.n	80056d4 <USB_EPStartXfer+0xa10>
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]
 80056d2:	e026      	b.n	8005722 <USB_EPStartXfer+0xa5e>
 80056d4:	463b      	mov	r3, r7
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d121      	bne.n	8005722 <USB_EPStartXfer+0xa5e>
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	441a      	add	r2, r3
 800570a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800570e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f107 020e 	add.w	r2, r7, #14
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005740:	8013      	strh	r3, [r2, #0]
 8005742:	f107 030e 	add.w	r3, r7, #14
 8005746:	f107 020e 	add.w	r2, r7, #14
 800574a:	8812      	ldrh	r2, [r2, #0]
 800574c:	f082 0210 	eor.w	r2, r2, #16
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	f107 030e 	add.w	r3, r7, #14
 8005756:	f107 020e 	add.w	r2, r7, #14
 800575a:	8812      	ldrh	r2, [r2, #0]
 800575c:	f082 0220 	eor.w	r2, r2, #32
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f107 030e 	add.w	r3, r7, #14
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
 800578a:	e3b5      	b.n	8005ef8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	7b1b      	ldrb	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 8090 	bne.w	80058b8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d90e      	bls.n	80057c6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	619a      	str	r2, [r3, #24]
 80057c4:	e008      	b.n	80057d8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057f0:	4413      	add	r3, r2
 80057f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005802:	4413      	add	r3, r2
 8005804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <USB_EPStartXfer+0xb7e>
 8005814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005820:	b29a      	uxth	r2, r3
 8005822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005838:	b29a      	uxth	r2, r3
 800583a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e32c      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
 8005842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005846:	2b3e      	cmp	r3, #62	; 0x3e
 8005848:	d818      	bhi.n	800587c <USB_EPStartXfer+0xbb8>
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <USB_EPStartXfer+0xba6>
 8005860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005864:	3301      	adds	r3, #1
 8005866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800586a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800586e:	b29b      	uxth	r3, r3
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	b29a      	uxth	r2, r3
 8005874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	e30f      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
 800587c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <USB_EPStartXfer+0xbd8>
 8005892:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005896:	3b01      	subs	r3, #1
 8005898:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800589c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e2f1      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	78db      	ldrb	r3, [r3, #3]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	f040 818f 	bne.w	8005be2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d175      	bne.n	80059ba <USB_EPStartXfer+0xcf6>
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058e6:	4413      	add	r3, r2
 80058e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d116      	bne.n	800593a <USB_EPStartXfer+0xc76>
 800590c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005918:	b29a      	uxth	r2, r3
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e065      	b.n	8005a06 <USB_EPStartXfer+0xd42>
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b3e      	cmp	r3, #62	; 0x3e
 8005942:	d81a      	bhi.n	800597a <USB_EPStartXfer+0xcb6>
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005950:	463b      	mov	r3, r7
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <USB_EPStartXfer+0xca4>
 800595e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005962:	3301      	adds	r3, #1
 8005964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800596c:	b29b      	uxth	r3, r3
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e045      	b.n	8005a06 <USB_EPStartXfer+0xd42>
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <USB_EPStartXfer+0xcda>
 8005994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005998:	3b01      	subs	r3, #1
 800599a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800599e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e025      	b.n	8005a06 <USB_EPStartXfer+0xd42>
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d120      	bne.n	8005a06 <USB_EPStartXfer+0xd42>
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059dc:	4413      	add	r3, r2
 80059de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	1d3b      	adds	r3, r7, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d175      	bne.n	8005b04 <USB_EPStartXfer+0xe40>
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a30:	4413      	add	r3, r2
 8005a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a36:	463b      	mov	r3, r7
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <USB_EPStartXfer+0xdc0>
 8005a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e061      	b.n	8005b48 <USB_EPStartXfer+0xe84>
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a8c:	d81a      	bhi.n	8005ac4 <USB_EPStartXfer+0xe00>
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <USB_EPStartXfer+0xdee>
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aac:	3301      	adds	r3, #1
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	029b      	lsls	r3, r3, #10
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e041      	b.n	8005b48 <USB_EPStartXfer+0xe84>
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <USB_EPStartXfer+0xe24>
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e021      	b.n	8005b48 <USB_EPStartXfer+0xe84>
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d11c      	bne.n	8005b48 <USB_EPStartXfer+0xe84>
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b1e:	4413      	add	r3, r2
 8005b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 81a4 	beq.w	8005e9c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b68:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <USB_EPStartXfer+0xebc>
 8005b74:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 8187 	bne.w	8005e9c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8180 	bne.w	8005e9c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]
 8005be0:	e15c      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 8155 	bne.w	8005e98 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90e      	bls.n	8005c1c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	619a      	str	r2, [r3, #24]
 8005c1a:	e008      	b.n	8005c2e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d16f      	bne.n	8005d18 <USB_EPStartXfer+0x1054>
 8005c38:	1d3b      	adds	r3, r7, #4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c50:	4413      	add	r3, r2
 8005c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c62:	4413      	add	r3, r2
 8005c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d116      	bne.n	8005ca2 <USB_EPStartXfer+0xfde>
 8005c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	e05f      	b.n	8005d62 <USB_EPStartXfer+0x109e>
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca8:	d818      	bhi.n	8005cdc <USB_EPStartXfer+0x1018>
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <USB_EPStartXfer+0x1006>
 8005cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e042      	b.n	8005d62 <USB_EPStartXfer+0x109e>
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USB_EPStartXfer+0x1038>
 8005cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e024      	b.n	8005d62 <USB_EPStartXfer+0x109e>
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d11f      	bne.n	8005d62 <USB_EPStartXfer+0x109e>
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d16f      	bne.n	8005e54 <USB_EPStartXfer+0x1190>
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	011a      	lsls	r2, r3, #4
 8005d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d116      	bne.n	8005dde <USB_EPStartXfer+0x111a>
 8005db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e05e      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	2b3e      	cmp	r3, #62	; 0x3e
 8005de4:	d818      	bhi.n	8005e18 <USB_EPStartXfer+0x1154>
 8005de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <USB_EPStartXfer+0x1142>
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e00:	3301      	adds	r3, #1
 8005e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e041      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
 8005e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <USB_EPStartXfer+0x1174>
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e023      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11e      	bne.n	8005e9c <USB_EPStartXfer+0x11d8>
 8005e5e:	1d3b      	adds	r3, r7, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e6e:	4413      	add	r3, r2
 8005e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	011a      	lsls	r2, r3, #4
 8005e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e001      	b.n	8005e9c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e02e      	b.n	8005efa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ebe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ec2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ec6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005eca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ece:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	81bb      	strh	r3, [r7, #12]
 8005f2e:	89bb      	ldrh	r3, [r7, #12]
 8005f30:	f083 0310 	eor.w	r3, r3, #16
 8005f34:	81bb      	strh	r3, [r7, #12]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	89bb      	ldrh	r3, [r7, #12]
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
 8005f56:	e01f      	b.n	8005f98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	81fb      	strh	r3, [r7, #14]
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f76:	81fb      	strh	r3, [r7, #14]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	7b1b      	ldrb	r3, [r3, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 809d 	bne.w	80060f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d04c      	beq.n	800605a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	823b      	strh	r3, [r7, #16]
 8005fce:	8a3b      	ldrh	r3, [r7, #16]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <USB_EPClearStall+0x6c>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	81fb      	strh	r3, [r7, #14]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d06c      	beq.n	80060f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602e:	81bb      	strh	r3, [r7, #12]
 8006030:	89bb      	ldrh	r3, [r7, #12]
 8006032:	f083 0320 	eor.w	r3, r3, #32
 8006036:	81bb      	strh	r3, [r7, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	89bb      	ldrh	r3, [r7, #12]
 8006044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006054:	b29b      	uxth	r3, r3
 8006056:	8013      	strh	r3, [r2, #0]
 8006058:	e04b      	b.n	80060f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	82fb      	strh	r3, [r7, #22]
 8006068:	8afb      	ldrh	r3, [r7, #22]
 800606a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01b      	beq.n	80060aa <USB_EPClearStall+0x106>
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	82bb      	strh	r3, [r7, #20]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	8abb      	ldrh	r3, [r7, #20]
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c0:	827b      	strh	r3, [r7, #18]
 80060c2:	8a7b      	ldrh	r3, [r7, #18]
 80060c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060c8:	827b      	strh	r3, [r7, #18]
 80060ca:	8a7b      	ldrh	r3, [r7, #18]
 80060cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060d0:	827b      	strh	r3, [r7, #18]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	441a      	add	r2, r3
 80060dc:	8a7b      	ldrh	r3, [r7, #18]
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800615a:	b29b      	uxth	r3, r3
 800615c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800615e:	68fb      	ldr	r3, [r7, #12]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006180:	b480      	push	{r7}
 8006182:	b08d      	sub	sp, #52	; 0x34
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	460b      	mov	r3, r1
 8006190:	80fb      	strh	r3, [r7, #6]
 8006192:	4613      	mov	r3, r2
 8006194:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006196:	88bb      	ldrh	r3, [r7, #4]
 8006198:	3301      	adds	r3, #1
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	005a      	lsls	r2, r3, #1
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b8:	e01e      	b.n	80061f8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	3301      	adds	r3, #1
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	3302      	adds	r3, #2
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	3302      	adds	r3, #2
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	3301      	adds	r3, #1
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	3b01      	subs	r3, #1
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1dd      	bne.n	80061ba <USB_WritePMA+0x3a>
  }
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	3734      	adds	r7, #52	; 0x34
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800620a:	b480      	push	{r7}
 800620c:	b08b      	sub	sp, #44	; 0x2c
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4611      	mov	r1, r2
 8006216:	461a      	mov	r2, r3
 8006218:	460b      	mov	r3, r1
 800621a:	80fb      	strh	r3, [r7, #6]
 800621c:	4613      	mov	r3, r2
 800621e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006220:	88bb      	ldrh	r3, [r7, #4]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	005a      	lsls	r2, r3, #1
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	e01b      	b.n	800627c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	3302      	adds	r3, #2
 8006250:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	b2da      	uxtb	r2, r3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	3301      	adds	r3, #1
 800625e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b2da      	uxtb	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	3302      	adds	r3, #2
 8006274:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	3b01      	subs	r3, #1
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e0      	bne.n	8006244 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006282:	88bb      	ldrh	r3, [r7, #4]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	701a      	strb	r2, [r3, #0]
  }
}
 800629e:	bf00      	nop
 80062a0:	372c      	adds	r7, #44	; 0x2c
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d115      	bne.n	80062ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c4:	2202      	movs	r2, #2
 80062c6:	2181      	movs	r1, #129	; 0x81
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fe90 	bl	8007fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d8:	2202      	movs	r2, #2
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fe86 	bl	8007fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062ea:	e012      	b.n	8006312 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	2202      	movs	r2, #2
 80062f0:	2181      	movs	r1, #129	; 0x81
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe7b 	bl	8007fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062fe:	2340      	movs	r3, #64	; 0x40
 8006300:	2202      	movs	r2, #2
 8006302:	2101      	movs	r1, #1
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fe72 	bl	8007fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006312:	2308      	movs	r3, #8
 8006314:	2203      	movs	r2, #3
 8006316:	2182      	movs	r1, #130	; 0x82
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fe68 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006324:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006328:	f001 ff88 	bl	800823c <USBD_static_malloc>
 800632c:	4602      	mov	r2, r0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e026      	b.n	8006392 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7c1b      	ldrb	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 ff28 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006380:	e007      	b.n	8006392 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	2101      	movs	r1, #1
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 ff1f 	bl	80081d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063ac:	2181      	movs	r1, #129	; 0x81
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fe43 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063ba:	2101      	movs	r1, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fe3c 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063ca:	2182      	movs	r1, #130	; 0x82
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fe34 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 ff2e 	bl	8008254 <USBD_static_free>
    pdev->pClassData = NULL;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006430:	2b00      	cmp	r3, #0
 8006432:	d039      	beq.n	80064a8 <USBD_CDC_Setup+0x9e>
 8006434:	2b20      	cmp	r3, #32
 8006436:	d17f      	bne.n	8006538 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d029      	beq.n	8006494 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	b25b      	sxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	da11      	bge.n	800646e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006456:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	88d2      	ldrh	r2, [r2, #6]
 800645c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800645e:	6939      	ldr	r1, [r7, #16]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	88db      	ldrh	r3, [r3, #6]
 8006464:	461a      	mov	r2, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fa09 	bl	800787e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800646c:	e06b      	b.n	8006546 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	785a      	ldrb	r2, [r3, #1]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	88db      	ldrh	r3, [r3, #6]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006484:	6939      	ldr	r1, [r7, #16]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88db      	ldrh	r3, [r3, #6]
 800648a:	461a      	mov	r2, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fa24 	bl	80078da <USBD_CtlPrepareRx>
      break;
 8006492:	e058      	b.n	8006546 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	7850      	ldrb	r0, [r2, #1]
 80064a0:	2200      	movs	r2, #0
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	4798      	blx	r3
      break;
 80064a6:	e04e      	b.n	8006546 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	2b0b      	cmp	r3, #11
 80064ae:	d02e      	beq.n	800650e <USBD_CDC_Setup+0x104>
 80064b0:	2b0b      	cmp	r3, #11
 80064b2:	dc38      	bgt.n	8006526 <USBD_CDC_Setup+0x11c>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <USBD_CDC_Setup+0xb4>
 80064b8:	2b0a      	cmp	r3, #10
 80064ba:	d014      	beq.n	80064e6 <USBD_CDC_Setup+0xdc>
 80064bc:	e033      	b.n	8006526 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d107      	bne.n	80064d8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	2202      	movs	r2, #2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 f9d4 	bl	800787e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d6:	e02e      	b.n	8006536 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f965 	bl	80077aa <USBD_CtlError>
            ret = USBD_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	75fb      	strb	r3, [r7, #23]
          break;
 80064e4:	e027      	b.n	8006536 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d107      	bne.n	8006500 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f0:	f107 030f 	add.w	r3, r7, #15
 80064f4:	2201      	movs	r2, #1
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f9c0 	bl	800787e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064fe:	e01a      	b.n	8006536 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f951 	bl	80077aa <USBD_CtlError>
            ret = USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	75fb      	strb	r3, [r7, #23]
          break;
 800650c:	e013      	b.n	8006536 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	2b03      	cmp	r3, #3
 8006516:	d00d      	beq.n	8006534 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f945 	bl	80077aa <USBD_CtlError>
            ret = USBD_FAIL;
 8006520:	2302      	movs	r3, #2
 8006522:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006524:	e006      	b.n	8006534 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 f93e 	bl	80077aa <USBD_CtlError>
          ret = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	75fb      	strb	r3, [r7, #23]
          break;
 8006532:	e000      	b.n	8006536 <USBD_CDC_Setup+0x12c>
          break;
 8006534:	bf00      	nop
      }
      break;
 8006536:	e006      	b.n	8006546 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 f935 	bl	80077aa <USBD_CtlError>
      ret = USBD_FAIL;
 8006540:	2302      	movs	r3, #2
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	bf00      	nop
  }

  return ret;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800656a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d03a      	beq.n	80065ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	331c      	adds	r3, #28
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d029      	beq.n	80065e0 <USBD_CDC_DataIn+0x90>
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	331c      	adds	r3, #28
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	78f9      	ldrb	r1, [r7, #3]
 80065a0:	68b8      	ldr	r0, [r7, #8]
 80065a2:	460b      	mov	r3, r1
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4403      	add	r3, r0
 80065ac:	3338      	adds	r3, #56	; 0x38
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80065b4:	fb03 f301 	mul.w	r3, r3, r1
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d110      	bne.n	80065e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	331c      	adds	r3, #28
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065d2:	78f9      	ldrb	r1, [r7, #3]
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fdd6 	bl	800818a <USBD_LL_Transmit>
 80065de:	e003      	b.n	80065e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006608:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fe01 	bl	8008216 <USBD_LL_GetRxDataSize>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800663a:	4611      	mov	r1, r2
 800663c:	4798      	blx	r3

    return USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006662:	2b00      	cmp	r3, #0
 8006664:	d015      	beq.n	8006692 <USBD_CDC_EP0_RxReady+0x46>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800666c:	2bff      	cmp	r3, #255	; 0xff
 800666e:	d010      	beq.n	8006692 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800667e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006686:	b292      	uxth	r2, r2
 8006688:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2243      	movs	r2, #67	; 0x43
 80066a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066aa:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000094 	.word	0x20000094

080066bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2243      	movs	r2, #67	; 0x43
 80066c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066ca:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000050 	.word	0x20000050

080066dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2243      	movs	r2, #67	; 0x43
 80066e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200000d8 	.word	0x200000d8

080066fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	220a      	movs	r2, #10
 8006708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	2000000c 	.word	0x2000000c

0800671c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006726:	2302      	movs	r3, #2
 8006728:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01c      	beq.n	80067f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d115      	bne.n	80067f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2181      	movs	r1, #129	; 0x81
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fccf 	bl	800818a <USBD_LL_Transmit>

      return USBD_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e002      	b.n	80067f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d017      	beq.n	8006848 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7c1b      	ldrb	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800682a:	2101      	movs	r1, #1
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fccf 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006832:	e007      	b.n	8006844 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800683a:	2340      	movs	r3, #64	; 0x40
 800683c:	2101      	movs	r1, #1
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fcc6 	bl	80081d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	4613      	mov	r3, r2
 800685e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006866:	2302      	movs	r3, #2
 8006868:	e01a      	b.n	80068a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	79fa      	ldrb	r2, [r7, #7]
 8006896:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f001 fb33 	bl	8007f04 <USBD_LL_Init>

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	e001      	b.n	80068ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80068ca:	2302      	movs	r3, #2
 80068cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fb68 	bl	8007fb8 <USBD_LL_Start>

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr

08006906 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006912:	2302      	movs	r3, #2
 8006914:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fed8 	bl	8007732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d016      	beq.n	80069d4 <USBD_LL_SetupStage+0x6a>
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d81c      	bhi.n	80069e4 <USBD_LL_SetupStage+0x7a>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <USBD_LL_SetupStage+0x4a>
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d008      	beq.n	80069c4 <USBD_LL_SetupStage+0x5a>
 80069b2:	e017      	b.n	80069e4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9cb 	bl	8006d58 <USBD_StdDevReq>
      break;
 80069c2:	e01a      	b.n	80069fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa2d 	bl	8006e2c <USBD_StdItfReq>
      break;
 80069d2:	e012      	b.n	80069fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa6d 	bl	8006ebc <USBD_StdEPReq>
      break;
 80069e2:	e00a      	b.n	80069fa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fb40 	bl	8008078 <USBD_LL_StallEP>
      break;
 80069f8:	bf00      	nop
  }

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d14b      	bne.n	8006ab0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d134      	bne.n	8006a94 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d919      	bls.n	8006a6a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d203      	bcs.n	8006a58 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	e002      	b.n	8006a5e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 ff57 	bl	8007916 <USBD_CtlContinueRx>
 8006a68:	e038      	b.n	8006adc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d105      	bne.n	8006a8c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 ff54 	bl	800793a <USBD_CtlSendStatus>
 8006a92:	e023      	b.n	8006adc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d11e      	bne.n	8006adc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fae5 	bl	8008078 <USBD_LL_StallEP>
 8006aae:	e015      	b.n	8006adc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00d      	beq.n	8006ad8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d108      	bne.n	8006ad8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	7afa      	ldrb	r2, [r7, #11]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4798      	blx	r3
 8006ad6:	e001      	b.n	8006adc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e000      	b.n	8006ade <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	460b      	mov	r3, r1
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d17f      	bne.n	8006bfa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3314      	adds	r3, #20
 8006afe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d15c      	bne.n	8006bc4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d915      	bls.n	8006b42 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fec1 	bl	80078b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fb48 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006b40:	e04e      	b.n	8006be0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	6912      	ldr	r2, [r2, #16]
 8006b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b4e:	fb02 f201 	mul.w	r2, r2, r1
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11c      	bne.n	8006b92 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d316      	bcc.n	8006b92 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d20f      	bcs.n	8006b92 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fe9d 	bl	80078b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 fb20 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006b90:	e026      	b.n	8006be0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d105      	bne.n	8006bb4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f001 fa5e 	bl	8008078 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fecf 	bl	8007960 <USBD_CtlReceiveStatus>
 8006bc2:	e00d      	b.n	8006be0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d004      	beq.n	8006bd8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 fa4c 	bl	8008078 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d11d      	bne.n	8006c26 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fe81 	bl	80068f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bf8:	e015      	b.n	8006c26 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d108      	bne.n	8006c22 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	7afa      	ldrb	r2, [r7, #11]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	4798      	blx	r3
 8006c20:	e001      	b.n	8006c26 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c22:	2302      	movs	r3, #2
 8006c24:	e000      	b.n	8006c28 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 f9d5 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2240      	movs	r2, #64	; 0x40
 8006c50:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c54:	2340      	movs	r3, #64	; 0x40
 8006c56:	2200      	movs	r2, #0
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f9c7 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6852      	ldr	r2, [r2, #4]
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
  }

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d105      	bne.n	8006d16 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d10b      	bne.n	8006d4c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d005      	beq.n	8006d7e <USBD_StdDevReq+0x26>
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d84f      	bhi.n	8006e16 <USBD_StdDevReq+0xbe>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <USBD_StdDevReq+0x36>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d14b      	bne.n	8006e16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
      break;
 8006d8c:	e048      	b.n	8006e20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d839      	bhi.n	8006e0a <USBD_StdDevReq+0xb2>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <USBD_StdDevReq+0x44>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006ded 	.word	0x08006ded
 8006da0:	08006e01 	.word	0x08006e01
 8006da4:	08006e0b 	.word	0x08006e0b
 8006da8:	08006df7 	.word	0x08006df7
 8006dac:	08006e0b 	.word	0x08006e0b
 8006db0:	08006dcf 	.word	0x08006dcf
 8006db4:	08006dc5 	.word	0x08006dc5
 8006db8:	08006e0b 	.word	0x08006e0b
 8006dbc:	08006de3 	.word	0x08006de3
 8006dc0:	08006dd9 	.word	0x08006dd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f9dc 	bl	8007184 <USBD_GetDescriptor>
          break;
 8006dcc:	e022      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb3f 	bl	8007454 <USBD_SetAddress>
          break;
 8006dd6:	e01d      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb7e 	bl	80074dc <USBD_SetConfig>
          break;
 8006de0:	e018      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc07 	bl	80075f8 <USBD_GetConfig>
          break;
 8006dea:	e013      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc37 	bl	8007662 <USBD_GetStatus>
          break;
 8006df4:	e00e      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc65 	bl	80076c8 <USBD_SetFeature>
          break;
 8006dfe:	e009      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fc74 	bl	80076f0 <USBD_ClrFeature>
          break;
 8006e08:	e004      	b.n	8006e14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fccc 	bl	80077aa <USBD_CtlError>
          break;
 8006e12:	bf00      	nop
      }
      break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fcc6 	bl	80077aa <USBD_CtlError>
      break;
 8006e1e:	bf00      	nop
  }

  return ret;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop

08006e2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d005      	beq.n	8006e52 <USBD_StdItfReq+0x26>
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d82e      	bhi.n	8006ea8 <USBD_StdItfReq+0x7c>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <USBD_StdItfReq+0x26>
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d12a      	bne.n	8006ea8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d81d      	bhi.n	8006e9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	889b      	ldrh	r3, [r3, #4]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d813      	bhi.n	8006e90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	88db      	ldrh	r3, [r3, #6]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d110      	bne.n	8006ea4 <USBD_StdItfReq+0x78>
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fd56 	bl	800793a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e8e:	e009      	b.n	8006ea4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fc89 	bl	80077aa <USBD_CtlError>
          break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc84 	bl	80077aa <USBD_CtlError>
          break;
 8006ea2:	e000      	b.n	8006ea6 <USBD_StdItfReq+0x7a>
          break;
 8006ea4:	bf00      	nop
      }
      break;
 8006ea6:	e004      	b.n	8006eb2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fc7d 	bl	80077aa <USBD_CtlError>
      break;
 8006eb0:	bf00      	nop
  }

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d007      	beq.n	8006eec <USBD_StdEPReq+0x30>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	f200 8146 	bhi.w	800716e <USBD_StdEPReq+0x2b2>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <USBD_StdEPReq+0x40>
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	f040 8141 	bne.w	800716e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
      break;
 8006efa:	e13d      	b.n	8007178 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d10a      	bne.n	8006f1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	e12d      	b.n	800717a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d007      	beq.n	8006f36 <USBD_StdEPReq+0x7a>
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	f300 811b 	bgt.w	8007162 <USBD_StdEPReq+0x2a6>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d072      	beq.n	8007016 <USBD_StdEPReq+0x15a>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d03a      	beq.n	8006faa <USBD_StdEPReq+0xee>
 8006f34:	e115      	b.n	8007162 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d002      	beq.n	8006f46 <USBD_StdEPReq+0x8a>
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d015      	beq.n	8006f70 <USBD_StdEPReq+0xb4>
 8006f44:	e02b      	b.n	8006f9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <USBD_StdEPReq+0xaa>
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d009      	beq.n	8006f66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f88e 	bl	8008078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f88a 	bl	8008078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f64:	e020      	b.n	8006fa8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc1e 	bl	80077aa <USBD_CtlError>
              break;
 8006f6e:	e01b      	b.n	8006fa8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10e      	bne.n	8006f96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <USBD_StdEPReq+0xda>
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b80      	cmp	r3, #128	; 0x80
 8006f82:	d008      	beq.n	8006f96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	88db      	ldrh	r3, [r3, #6]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f871 	bl	8008078 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fccf 	bl	800793a <USBD_CtlSendStatus>

              break;
 8006f9c:	e004      	b.n	8006fa8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fc02 	bl	80077aa <USBD_CtlError>
              break;
 8006fa6:	bf00      	nop
          }
          break;
 8006fa8:	e0e0      	b.n	800716c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d002      	beq.n	8006fba <USBD_StdEPReq+0xfe>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d015      	beq.n	8006fe4 <USBD_StdEPReq+0x128>
 8006fb8:	e026      	b.n	8007008 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <USBD_StdEPReq+0x11e>
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b80      	cmp	r3, #128	; 0x80
 8006fc4:	d009      	beq.n	8006fda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f854 	bl	8008078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f850 	bl	8008078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fd8:	e01c      	b.n	8007014 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fbe4 	bl	80077aa <USBD_CtlError>
              break;
 8006fe2:	e017      	b.n	8007014 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	885b      	ldrh	r3, [r3, #2]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d112      	bne.n	8007012 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f85b 	bl	80080b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc9a 	bl	800793a <USBD_CtlSendStatus>
              }
              break;
 8007006:	e004      	b.n	8007012 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fbcd 	bl	80077aa <USBD_CtlError>
              break;
 8007010:	e000      	b.n	8007014 <USBD_StdEPReq+0x158>
              break;
 8007012:	bf00      	nop
          }
          break;
 8007014:	e0aa      	b.n	800716c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701c:	2b02      	cmp	r3, #2
 800701e:	d002      	beq.n	8007026 <USBD_StdEPReq+0x16a>
 8007020:	2b03      	cmp	r3, #3
 8007022:	d032      	beq.n	800708a <USBD_StdEPReq+0x1ce>
 8007024:	e097      	b.n	8007156 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <USBD_StdEPReq+0x180>
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fbb8 	bl	80077aa <USBD_CtlError>
                break;
 800703a:	e091      	b.n	8007160 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da0b      	bge.n	800705c <USBD_StdEPReq+0x1a0>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3310      	adds	r3, #16
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	e00b      	b.n	8007074 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2202      	movs	r2, #2
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbfb 	bl	800787e <USBD_CtlSendData>
              break;
 8007088:	e06a      	b.n	8007160 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800708a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	da11      	bge.n	80070b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3318      	adds	r3, #24
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d117      	bne.n	80070dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb7b 	bl	80077aa <USBD_CtlError>
                  break;
 80070b4:	e054      	b.n	8007160 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb68 	bl	80077aa <USBD_CtlError>
                  break;
 80070da:	e041      	b.n	8007160 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da0b      	bge.n	80070fc <USBD_StdEPReq+0x240>
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	3310      	adds	r3, #16
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	e00b      	b.n	8007114 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	3304      	adds	r3, #4
 8007114:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <USBD_StdEPReq+0x266>
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b80      	cmp	r3, #128	; 0x80
 8007120:	d103      	bne.n	800712a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e00e      	b.n	8007148 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 ffe0 	bl	80080f4 <USBD_LL_IsStallEP>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e002      	b.n	8007148 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2202      	movs	r2, #2
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fb95 	bl	800787e <USBD_CtlSendData>
              break;
 8007154:	e004      	b.n	8007160 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fb26 	bl	80077aa <USBD_CtlError>
              break;
 800715e:	bf00      	nop
          }
          break;
 8007160:	e004      	b.n	800716c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb20 	bl	80077aa <USBD_CtlError>
          break;
 800716a:	bf00      	nop
      }
      break;
 800716c:	e004      	b.n	8007178 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fb1a 	bl	80077aa <USBD_CtlError>
      break;
 8007176:	bf00      	nop
  }

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b06      	cmp	r3, #6
 80071a6:	f200 8128 	bhi.w	80073fa <USBD_GetDescriptor+0x276>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBD_GetDescriptor+0x2c>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071cd 	.word	0x080071cd
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	08007225 	.word	0x08007225
 80071bc:	080073fb 	.word	0x080073fb
 80071c0:	080073fb 	.word	0x080073fb
 80071c4:	0800739b 	.word	0x0800739b
 80071c8:	080073c7 	.word	0x080073c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
      break;
 80071e2:	e112      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7c1b      	ldrb	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10d      	bne.n	8007208 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f107 0208 	add.w	r2, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007206:	e100      	b.n	800740a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	f107 0208 	add.w	r2, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	2202      	movs	r2, #2
 8007220:	701a      	strb	r2, [r3, #0]
      break;
 8007222:	e0f2      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b05      	cmp	r3, #5
 800722c:	f200 80ac 	bhi.w	8007388 <USBD_GetDescriptor+0x204>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_GetDescriptor+0xb4>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007251 	.word	0x08007251
 800723c:	08007285 	.word	0x08007285
 8007240:	080072b9 	.word	0x080072b9
 8007244:	080072ed 	.word	0x080072ed
 8007248:	08007321 	.word	0x08007321
 800724c:	08007355 	.word	0x08007355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e091      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa97 	bl	80077aa <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e089      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e077      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa7d 	bl	80077aa <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e06f      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e05d      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa63 	bl	80077aa <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e055      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e043      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa49 	bl	80077aa <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e03b      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e029      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa2f 	bl	80077aa <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e021      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e00f      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa15 	bl	80077aa <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e007      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa0d 	bl	80077aa <USBD_CtlError>
          err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007396:	e038      	b.n	800740a <USBD_GetDescriptor+0x286>
 8007398:	e037      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7c1b      	ldrb	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073aa:	f107 0208 	add.w	r2, r7, #8
 80073ae:	4610      	mov	r0, r2
 80073b0:	4798      	blx	r3
 80073b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073b4:	e029      	b.n	800740a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f9f6 	bl	80077aa <USBD_CtlError>
        err++;
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	3301      	adds	r3, #1
 80073c2:	72fb      	strb	r3, [r7, #11]
      break;
 80073c4:	e021      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7c1b      	ldrb	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	f107 0208 	add.w	r2, r7, #8
 80073da:	4610      	mov	r0, r2
 80073dc:	4798      	blx	r3
 80073de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	2207      	movs	r2, #7
 80073e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e8:	e00f      	b.n	800740a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9dc 	bl	80077aa <USBD_CtlError>
        err++;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	3301      	adds	r3, #1
 80073f6:	72fb      	strb	r3, [r7, #11]
      break;
 80073f8:	e007      	b.n	800740a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9d4 	bl	80077aa <USBD_CtlError>
      err++;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	3301      	adds	r3, #1
 8007406:	72fb      	strb	r3, [r7, #11]
      break;
 8007408:	bf00      	nop
  }

  if (err != 0U)
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11c      	bne.n	800744a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d011      	beq.n	800743a <USBD_GetDescriptor+0x2b6>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88db      	ldrh	r3, [r3, #6]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88da      	ldrh	r2, [r3, #6]
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	4293      	cmp	r3, r2
 8007426:	bf28      	it	cs
 8007428:	4613      	movcs	r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800742e:	893b      	ldrh	r3, [r7, #8]
 8007430:	461a      	mov	r2, r3
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa22 	bl	800787e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	88db      	ldrh	r3, [r3, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa79 	bl	800793a <USBD_CtlSendStatus>
 8007448:	e000      	b.n	800744c <USBD_GetDescriptor+0x2c8>
    return;
 800744a:	bf00      	nop
    }
  }
}
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop

08007454 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	889b      	ldrh	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d130      	bne.n	80074c8 <USBD_SetAddress+0x74>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d12c      	bne.n	80074c8 <USBD_SetAddress+0x74>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	2b7f      	cmp	r3, #127	; 0x7f
 8007474:	d828      	bhi.n	80074c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	885b      	ldrh	r3, [r3, #2]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	2b03      	cmp	r3, #3
 800748a:	d104      	bne.n	8007496 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f98b 	bl	80077aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007494:	e01d      	b.n	80074d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fe52 	bl	800814c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa46 	bl	800793a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074bc:	e009      	b.n	80074d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c6:	e004      	b.n	80074d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f96d 	bl	80077aa <USBD_CtlError>
  }
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <USBD_SetConfig+0x118>)
 80074ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074f0:	4b40      	ldr	r3, [pc, #256]	; (80075f4 <USBD_SetConfig+0x118>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d904      	bls.n	8007502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f955 	bl	80077aa <USBD_CtlError>
 8007500:	e075      	b.n	80075ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	2b02      	cmp	r3, #2
 800750a:	d002      	beq.n	8007512 <USBD_SetConfig+0x36>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d023      	beq.n	8007558 <USBD_SetConfig+0x7c>
 8007510:	e062      	b.n	80075d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007512:	4b38      	ldr	r3, [pc, #224]	; (80075f4 <USBD_SetConfig+0x118>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01a      	beq.n	8007550 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800751a:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <USBD_SetConfig+0x118>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2203      	movs	r2, #3
 8007528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800752c:	4b31      	ldr	r3, [pc, #196]	; (80075f4 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff f9e7 	bl	8006906 <USBD_SetClassConfig>
 8007538:	4603      	mov	r3, r0
 800753a:	2b02      	cmp	r3, #2
 800753c:	d104      	bne.n	8007548 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f932 	bl	80077aa <USBD_CtlError>
            return;
 8007546:	e052      	b.n	80075ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9f6 	bl	800793a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800754e:	e04e      	b.n	80075ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9f2 	bl	800793a <USBD_CtlSendStatus>
        break;
 8007556:	e04a      	b.n	80075ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007558:	4b26      	ldr	r3, [pc, #152]	; (80075f4 <USBD_SetConfig+0x118>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d112      	bne.n	8007586 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007568:	4b22      	ldr	r3, [pc, #136]	; (80075f4 <USBD_SetConfig+0x118>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007572:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <USBD_SetConfig+0x118>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f9e3 	bl	8006944 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9db 	bl	800793a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007584:	e033      	b.n	80075ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007586:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <USBD_SetConfig+0x118>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d01d      	beq.n	80075d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff f9d1 	bl	8006944 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <USBD_SetConfig+0x118>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <USBD_SetConfig+0x118>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff f9a7 	bl	8006906 <USBD_SetClassConfig>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d104      	bne.n	80075c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8f2 	bl	80077aa <USBD_CtlError>
            return;
 80075c6:	e012      	b.n	80075ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f9b6 	bl	800793a <USBD_CtlSendStatus>
        break;
 80075ce:	e00e      	b.n	80075ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9b2 	bl	800793a <USBD_CtlSendStatus>
        break;
 80075d6:	e00a      	b.n	80075ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f8e5 	bl	80077aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <USBD_SetConfig+0x118>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff f9ac 	bl	8006944 <USBD_ClrClassConfig>
        break;
 80075ec:	bf00      	nop
    }
  }
}
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000310 	.word	0x20000310

080075f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88db      	ldrh	r3, [r3, #6]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d004      	beq.n	8007614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8cc 	bl	80077aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007612:	e022      	b.n	800765a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	2b02      	cmp	r3, #2
 800761c:	dc02      	bgt.n	8007624 <USBD_GetConfig+0x2c>
 800761e:	2b00      	cmp	r3, #0
 8007620:	dc03      	bgt.n	800762a <USBD_GetConfig+0x32>
 8007622:	e015      	b.n	8007650 <USBD_GetConfig+0x58>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d00b      	beq.n	8007640 <USBD_GetConfig+0x48>
 8007628:	e012      	b.n	8007650 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3308      	adds	r3, #8
 8007634:	2201      	movs	r2, #1
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f920 	bl	800787e <USBD_CtlSendData>
        break;
 800763e:	e00c      	b.n	800765a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3304      	adds	r3, #4
 8007644:	2201      	movs	r2, #1
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f918 	bl	800787e <USBD_CtlSendData>
        break;
 800764e:	e004      	b.n	800765a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8a9 	bl	80077aa <USBD_CtlError>
        break;
 8007658:	bf00      	nop
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007672:	3b01      	subs	r3, #1
 8007674:	2b02      	cmp	r3, #2
 8007676:	d81e      	bhi.n	80076b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	88db      	ldrh	r3, [r3, #6]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d004      	beq.n	800768a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f891 	bl	80077aa <USBD_CtlError>
        break;
 8007688:	e01a      	b.n	80076c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f043 0202 	orr.w	r2, r3, #2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	330c      	adds	r3, #12
 80076aa:	2202      	movs	r2, #2
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8e5 	bl	800787e <USBD_CtlSendData>
      break;
 80076b4:	e004      	b.n	80076c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f876 	bl	80077aa <USBD_CtlError>
      break;
 80076be:	bf00      	nop
  }
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d106      	bne.n	80076e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f929 	bl	800793a <USBD_CtlSendStatus>
  }
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	3b01      	subs	r3, #1
 8007702:	2b02      	cmp	r3, #2
 8007704:	d80b      	bhi.n	800771e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10c      	bne.n	8007728 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f90f 	bl	800793a <USBD_CtlSendStatus>
      }
      break;
 800771c:	e004      	b.n	8007728 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f842 	bl	80077aa <USBD_CtlError>
      break;
 8007726:	e000      	b.n	800772a <USBD_ClrFeature+0x3a>
      break;
 8007728:	bf00      	nop
  }
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	785a      	ldrb	r2, [r3, #1]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	3302      	adds	r3, #2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b29a      	uxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	3303      	adds	r3, #3
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b29b      	uxth	r3, r3
 8007760:	4413      	add	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	3304      	adds	r3, #4
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b29a      	uxth	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	3305      	adds	r3, #5
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	b29b      	uxth	r3, r3
 800777c:	4413      	add	r3, r2
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	3306      	adds	r3, #6
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b29a      	uxth	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	3307      	adds	r3, #7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	4413      	add	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	80da      	strh	r2, [r3, #6]

}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fc5e 	bl	8008078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fc5a 	bl	8008078 <USBD_LL_StallEP>
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d032      	beq.n	8007848 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f834 	bl	8007850 <USBD_GetLen>
 80077e8:	4603      	mov	r3, r0
 80077ea:	3301      	adds	r3, #1
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	75fa      	strb	r2, [r7, #23]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	75fa      	strb	r2, [r7, #23]
 800780e:	461a      	mov	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4413      	add	r3, r2
 8007814:	2203      	movs	r2, #3
 8007816:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007818:	e012      	b.n	8007840 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	60fa      	str	r2, [r7, #12]
 8007820:	7dfa      	ldrb	r2, [r7, #23]
 8007822:	1c51      	adds	r1, r2, #1
 8007824:	75f9      	strb	r1, [r7, #23]
 8007826:	4611      	mov	r1, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	440a      	add	r2, r1
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	75fa      	strb	r2, [r7, #23]
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e8      	bne.n	800781a <USBD_GetString+0x4e>
    }
  }
}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800785c:	e005      	b.n	800786a <USBD_GetLen+0x1a>
  {
    len++;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	3301      	adds	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3301      	adds	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f5      	bne.n	800785e <USBD_GetLen+0xe>
  }

  return len;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr

0800787e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	4613      	mov	r3, r2
 800788a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007894:	88fa      	ldrh	r2, [r7, #6]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800789a:	88fa      	ldrh	r2, [r7, #6]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fc6f 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fc5d 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2203      	movs	r2, #3
 80078ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	2100      	movs	r1, #0
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fc62 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fc50 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc1a 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2205      	movs	r2, #5
 800796c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fc2a 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800798c:	2200      	movs	r2, #0
 800798e:	4912      	ldr	r1, [pc, #72]	; (80079d8 <MX_USB_DEVICE_Init+0x50>)
 8007990:	4812      	ldr	r0, [pc, #72]	; (80079dc <MX_USB_DEVICE_Init+0x54>)
 8007992:	f7fe ff5e 	bl	8006852 <USBD_Init>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800799c:	f7f9 fb0a 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079a0:	490f      	ldr	r1, [pc, #60]	; (80079e0 <MX_USB_DEVICE_Init+0x58>)
 80079a2:	480e      	ldr	r0, [pc, #56]	; (80079dc <MX_USB_DEVICE_Init+0x54>)
 80079a4:	f7fe ff80 	bl	80068a8 <USBD_RegisterClass>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079ae:	f7f9 fb01 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079b2:	490c      	ldr	r1, [pc, #48]	; (80079e4 <MX_USB_DEVICE_Init+0x5c>)
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <MX_USB_DEVICE_Init+0x54>)
 80079b6:	f7fe feb1 	bl	800671c <USBD_CDC_RegisterInterface>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079c0:	f7f9 faf8 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079c4:	4805      	ldr	r0, [pc, #20]	; (80079dc <MX_USB_DEVICE_Init+0x54>)
 80079c6:	f7fe ff88 	bl	80068da <USBD_Start>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079d0:	f7f9 faf0 	bl	8000fb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079d4:	bf00      	nop
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000012c 	.word	0x2000012c
 80079dc:	20000588 	.word	0x20000588
 80079e0:	20000018 	.word	0x20000018
 80079e4:	2000011c 	.word	0x2000011c

080079e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079ec:	2200      	movs	r2, #0
 80079ee:	4905      	ldr	r1, [pc, #20]	; (8007a04 <CDC_Init_FS+0x1c>)
 80079f0:	4805      	ldr	r0, [pc, #20]	; (8007a08 <CDC_Init_FS+0x20>)
 80079f2:	f7fe fea9 	bl	8006748 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079f6:	4905      	ldr	r1, [pc, #20]	; (8007a0c <CDC_Init_FS+0x24>)
 80079f8:	4803      	ldr	r0, [pc, #12]	; (8007a08 <CDC_Init_FS+0x20>)
 80079fa:	f7fe febe 	bl	800677a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000c34 	.word	0x20000c34
 8007a08:	20000588 	.word	0x20000588
 8007a0c:	2000084c 	.word	0x2000084c

08007a10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr
	...

08007a20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	2b23      	cmp	r3, #35	; 0x23
 8007a34:	d84a      	bhi.n	8007acc <CDC_Control_FS+0xac>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <CDC_Control_FS+0x1c>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007acd 	.word	0x08007acd
 8007a40:	08007acd 	.word	0x08007acd
 8007a44:	08007acd 	.word	0x08007acd
 8007a48:	08007acd 	.word	0x08007acd
 8007a4c:	08007acd 	.word	0x08007acd
 8007a50:	08007acd 	.word	0x08007acd
 8007a54:	08007acd 	.word	0x08007acd
 8007a58:	08007acd 	.word	0x08007acd
 8007a5c:	08007acd 	.word	0x08007acd
 8007a60:	08007acd 	.word	0x08007acd
 8007a64:	08007acd 	.word	0x08007acd
 8007a68:	08007acd 	.word	0x08007acd
 8007a6c:	08007acd 	.word	0x08007acd
 8007a70:	08007acd 	.word	0x08007acd
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007acd 	.word	0x08007acd
 8007a80:	08007acd 	.word	0x08007acd
 8007a84:	08007acd 	.word	0x08007acd
 8007a88:	08007acd 	.word	0x08007acd
 8007a8c:	08007acd 	.word	0x08007acd
 8007a90:	08007acd 	.word	0x08007acd
 8007a94:	08007acd 	.word	0x08007acd
 8007a98:	08007acd 	.word	0x08007acd
 8007a9c:	08007acd 	.word	0x08007acd
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	08007acd 	.word	0x08007acd
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007acd 	.word	0x08007acd
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007acd 	.word	0x08007acd
 8007abc:	08007acd 	.word	0x08007acd
 8007ac0:	08007acd 	.word	0x08007acd
 8007ac4:	08007acd 	.word	0x08007acd
 8007ac8:	08007acd 	.word	0x08007acd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007acc:	bf00      	nop
  }

  return (USBD_OK);
 8007ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t one_byte;

  if( *Len >= 1 ) {
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d006      	beq.n	8007afc <CDC_Receive_FS+0x20>
	one_byte = Buf[ 0 ];
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	73fb      	strb	r3, [r7, #15]
	poll_usb_command( one_byte );
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 ff80 	bl	80009fc <poll_usb_command>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4805      	ldr	r0, [pc, #20]	; (8007b14 <CDC_Receive_FS+0x38>)
 8007b00:	f7fe fe3b 	bl	800677a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b04:	4803      	ldr	r0, [pc, #12]	; (8007b14 <CDC_Receive_FS+0x38>)
 8007b06:	f7fe fe7a 	bl	80067fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b0a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000588 	.word	0x20000588

08007b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b28:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e00b      	b.n	8007b56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4806      	ldr	r0, [pc, #24]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b46:	f7fe fdff 	bl	8006748 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b4a:	4805      	ldr	r0, [pc, #20]	; (8007b60 <CDC_Transmit_FS+0x48>)
 8007b4c:	f7fe fe28 	bl	80067a0 <USBD_CDC_TransmitPacket>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000588 	.word	0x20000588

08007b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2212      	movs	r2, #18
 8007b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b76:	4b03      	ldr	r3, [pc, #12]	; (8007b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000148 	.word	0x20000148

08007b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2204      	movs	r2, #4
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	2000015c 	.word	0x2000015c

08007bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4907      	ldr	r1, [pc, #28]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc2:	4808      	ldr	r0, [pc, #32]	; (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc4:	f7ff fe02 	bl	80077cc <USBD_GetString>
 8007bc8:	e004      	b.n	8007bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bce:	4805      	ldr	r0, [pc, #20]	; (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd0:	f7ff fdfc 	bl	80077cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	2000101c 	.word	0x2000101c
 8007be4:	08008c74 	.word	0x08008c74

08007be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	4904      	ldr	r1, [pc, #16]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bf8:	4804      	ldr	r0, [pc, #16]	; (8007c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bfa:	f7ff fde7 	bl	80077cc <USBD_GetString>
  return USBD_StrDesc;
 8007bfe:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	2000101c 	.word	0x2000101c
 8007c0c:	08008c8c 	.word	0x08008c8c

08007c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	221a      	movs	r2, #26
 8007c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c22:	f000 f843 	bl	8007cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c26:	4b02      	ldr	r3, [pc, #8]	; (8007c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000160 	.word	0x20000160

08007c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4a:	4808      	ldr	r0, [pc, #32]	; (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c4c:	f7ff fdbe 	bl	80077cc <USBD_GetString>
 8007c50:	e004      	b.n	8007c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4904      	ldr	r1, [pc, #16]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c56:	4805      	ldr	r0, [pc, #20]	; (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c58:	f7ff fdb8 	bl	80077cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	2000101c 	.word	0x2000101c
 8007c6c:	08008ca0 	.word	0x08008ca0

08007c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4907      	ldr	r1, [pc, #28]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c86:	4808      	ldr	r0, [pc, #32]	; (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c88:	f7ff fda0 	bl	80077cc <USBD_GetString>
 8007c8c:	e004      	b.n	8007c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c94:	f7ff fd9a 	bl	80077cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000101c 	.word	0x2000101c
 8007ca8:	08008cac 	.word	0x08008cac

08007cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <Get_SerialNum+0x44>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <Get_SerialNum+0x48>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <Get_SerialNum+0x4c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4413      	add	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	4909      	ldr	r1, [pc, #36]	; (8007cfc <Get_SerialNum+0x50>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f814 	bl	8007d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cdc:	2204      	movs	r2, #4
 8007cde:	4908      	ldr	r1, [pc, #32]	; (8007d00 <Get_SerialNum+0x54>)
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f000 f80f 	bl	8007d04 <IntToUnicode>
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	1ffff7e8 	.word	0x1ffff7e8
 8007cf4:	1ffff7ec 	.word	0x1ffff7ec
 8007cf8:	1ffff7f0 	.word	0x1ffff7f0
 8007cfc:	20000162 	.word	0x20000162
 8007d00:	20000172 	.word	0x20000172

08007d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
 8007d1a:	e027      	b.n	8007d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d80b      	bhi.n	8007d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	0f1b      	lsrs	r3, r3, #28
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	440b      	add	r3, r1
 8007d34:	3230      	adds	r2, #48	; 0x30
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e00a      	b.n	8007d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	0f1b      	lsrs	r3, r3, #28
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4619      	mov	r1, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3237      	adds	r2, #55	; 0x37
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
 8007d6c:	7dfa      	ldrb	r2, [r7, #23]
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3d3      	bcc.n	8007d1c <IntToUnicode+0x18>
  }
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a0d      	ldr	r2, [pc, #52]	; (8007dc4 <HAL_PCD_MspInit+0x44>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d113      	bne.n	8007dba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d92:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <HAL_PCD_MspInit+0x48>)
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <HAL_PCD_MspInit+0x48>)
 8007d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d9c:	61d3      	str	r3, [r2, #28]
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <HAL_PCD_MspInit+0x48>)
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	2014      	movs	r0, #20
 8007db0:	f7f9 fb7d 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007db4:	2014      	movs	r0, #20
 8007db6:	f7f9 fb96 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40005c00 	.word	0x40005c00
 8007dc8:	40021000 	.word	0x40021000

08007dcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7fe fdc1 	bl	800696a <USBD_LL_SetupStage>
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	440b      	add	r3, r1
 8007e10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	f7fe fdf3 	bl	8006a04 <USBD_LL_DataOutStage>
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	440b      	add	r3, r1
 8007e46:	333c      	adds	r3, #60	; 0x3c
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	f7fe fe4a 	bl	8006ae6 <USBD_LL_DataInStage>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe ff5a 	bl	8006d22 <USBD_LL_SOF>
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d001      	beq.n	8007e8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e8a:	f7f9 f893 	bl	8000fb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe ff0a 	bl	8006cb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe fec3 	bl	8006c30 <USBD_LL_Reset>
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe ff04 	bl	8006cd0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <HAL_PCD_SuspendCallback+0x30>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	4a03      	ldr	r2, [pc, #12]	; (8007ee4 <HAL_PCD_SuspendCallback+0x30>)
 8007ed6:	f043 0306 	orr.w	r3, r3, #6
 8007eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fefe 	bl	8006cf8 <USBD_LL_Resume>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f0c:	4a28      	ldr	r2, [pc, #160]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a26      	ldr	r2, [pc, #152]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f1c:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f1e:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <USBD_LL_Init+0xb0>)
 8007f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f22:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f24:	2208      	movs	r2, #8
 8007f26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f28:	4b21      	ldr	r3, [pc, #132]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f2e:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f34:	4b1e      	ldr	r3, [pc, #120]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f3a:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f40:	481b      	ldr	r0, [pc, #108]	; (8007fb0 <USBD_LL_Init+0xac>)
 8007f42:	f7f9 fca0 	bl	8001886 <HAL_PCD_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f4c:	f7f9 f832 	bl	8000fb4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f56:	2318      	movs	r3, #24
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	f7fa ffe2 	bl	8002f24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f66:	2358      	movs	r3, #88	; 0x58
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2180      	movs	r1, #128	; 0x80
 8007f6c:	f7fa ffda 	bl	8002f24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f76:	23c0      	movs	r3, #192	; 0xc0
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2181      	movs	r1, #129	; 0x81
 8007f7c:	f7fa ffd2 	bl	8002f24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	f7fa ffc9 	bl	8002f24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2182      	movs	r1, #130	; 0x82
 8007fa0:	f7fa ffc0 	bl	8002f24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	2000121c 	.word	0x2000121c
 8007fb4:	40005c00 	.word	0x40005c00

08007fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 fd64 	bl	8001a9c <HAL_PCD_Start>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f94e 	bl	800827c <USBD_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	70fb      	strb	r3, [r7, #3]
 8008000:	460b      	mov	r3, r1
 8008002:	70bb      	strb	r3, [r7, #2]
 8008004:	4613      	mov	r3, r2
 8008006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008016:	78bb      	ldrb	r3, [r7, #2]
 8008018:	883a      	ldrh	r2, [r7, #0]
 800801a:	78f9      	ldrb	r1, [r7, #3]
 800801c:	f7f9 fede 	bl	8001ddc <HAL_PCD_EP_Open>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f928 	bl	800827c <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7f9 ff25 	bl	8001ea8 <HAL_PCD_EP_Close>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f909 	bl	800827c <USBD_Get_USB_Status>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7f9 ffe5 	bl	8002066 <HAL_PCD_EP_SetStall>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f8ea 	bl	800827c <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fa f826 	bl	8002126 <HAL_PCD_EP_ClrStall>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f8cb 	bl	800827c <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	da0c      	bge.n	800812a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	440b      	add	r3, r1
 8008124:	3302      	adds	r3, #2
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	e00b      	b.n	8008142 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008130:	68f9      	ldr	r1, [r7, #12]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	440b      	add	r3, r1
 800813c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008140:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 fe11 	bl	8001d92 <HAL_PCD_SetAddress>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f880 	bl	800827c <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	461a      	mov	r2, r3
 8008196:	460b      	mov	r3, r1
 8008198:	72fb      	strb	r3, [r7, #11]
 800819a:	4613      	mov	r3, r2
 800819c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ac:	893b      	ldrh	r3, [r7, #8]
 80081ae:	7af9      	ldrb	r1, [r7, #11]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	f7f9 ff15 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f85d 	bl	800827c <USBD_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	461a      	mov	r2, r3
 80081dc:	460b      	mov	r3, r1
 80081de:	72fb      	strb	r3, [r7, #11]
 80081e0:	4613      	mov	r3, r2
 80081e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081f2:	893b      	ldrh	r3, [r7, #8]
 80081f4:	7af9      	ldrb	r1, [r7, #11]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	f7f9 fe9e 	bl	8001f38 <HAL_PCD_EP_Receive>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f83a 	bl	800827c <USBD_Get_USB_Status>
 8008208:	4603      	mov	r3, r0
 800820a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800820c:	7dbb      	ldrb	r3, [r7, #22]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	4611      	mov	r1, r2
 800822c:	4618      	mov	r0, r3
 800822e:	f7f9 fec0 	bl	8001fb2 <HAL_PCD_EP_GetRxCount>
 8008232:	4603      	mov	r3, r0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <USBD_static_malloc+0x14>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr
 8008250:	20000314 	.word	0x20000314

08008254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]

}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d817      	bhi.n	80082c0 <USBD_Get_USB_Status+0x44>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USBD_Get_USB_Status+0x1c>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082af 	.word	0x080082af
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082bb 	.word	0x080082bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	e00b      	b.n	80082c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	73fb      	strb	r3, [r7, #15]
    break;
 80082b2:	e008      	b.n	80082c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082b4:	2301      	movs	r3, #1
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	e005      	b.n	80082c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	73fb      	strb	r3, [r7, #15]
    break;
 80082be:	e002      	b.n	80082c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082c0:	2302      	movs	r3, #2
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	bf00      	nop
  }
  return usb_status;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <__errno>:
 80082d4:	4b01      	ldr	r3, [pc, #4]	; (80082dc <__errno+0x8>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	2000017c 	.word	0x2000017c

080082e0 <__libc_init_array>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	2600      	movs	r6, #0
 80082e4:	4d0c      	ldr	r5, [pc, #48]	; (8008318 <__libc_init_array+0x38>)
 80082e6:	4c0d      	ldr	r4, [pc, #52]	; (800831c <__libc_init_array+0x3c>)
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	42a6      	cmp	r6, r4
 80082ee:	d109      	bne.n	8008304 <__libc_init_array+0x24>
 80082f0:	f000 fc70 	bl	8008bd4 <_init>
 80082f4:	2600      	movs	r6, #0
 80082f6:	4d0a      	ldr	r5, [pc, #40]	; (8008320 <__libc_init_array+0x40>)
 80082f8:	4c0a      	ldr	r4, [pc, #40]	; (8008324 <__libc_init_array+0x44>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	42a6      	cmp	r6, r4
 8008300:	d105      	bne.n	800830e <__libc_init_array+0x2e>
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	f855 3b04 	ldr.w	r3, [r5], #4
 8008308:	4798      	blx	r3
 800830a:	3601      	adds	r6, #1
 800830c:	e7ee      	b.n	80082ec <__libc_init_array+0xc>
 800830e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008312:	4798      	blx	r3
 8008314:	3601      	adds	r6, #1
 8008316:	e7f2      	b.n	80082fe <__libc_init_array+0x1e>
 8008318:	08008d00 	.word	0x08008d00
 800831c:	08008d00 	.word	0x08008d00
 8008320:	08008d00 	.word	0x08008d00
 8008324:	08008d04 	.word	0x08008d04

08008328 <memset>:
 8008328:	4603      	mov	r3, r0
 800832a:	4402      	add	r2, r0
 800832c:	4293      	cmp	r3, r2
 800832e:	d100      	bne.n	8008332 <memset+0xa>
 8008330:	4770      	bx	lr
 8008332:	f803 1b01 	strb.w	r1, [r3], #1
 8008336:	e7f9      	b.n	800832c <memset+0x4>

08008338 <sniprintf>:
 8008338:	b40c      	push	{r2, r3}
 800833a:	b530      	push	{r4, r5, lr}
 800833c:	4b17      	ldr	r3, [pc, #92]	; (800839c <sniprintf+0x64>)
 800833e:	1e0c      	subs	r4, r1, #0
 8008340:	681d      	ldr	r5, [r3, #0]
 8008342:	b09d      	sub	sp, #116	; 0x74
 8008344:	da08      	bge.n	8008358 <sniprintf+0x20>
 8008346:	238b      	movs	r3, #139	; 0x8b
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	602b      	str	r3, [r5, #0]
 800834e:	b01d      	add	sp, #116	; 0x74
 8008350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008354:	b002      	add	sp, #8
 8008356:	4770      	bx	lr
 8008358:	f44f 7302 	mov.w	r3, #520	; 0x208
 800835c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008360:	bf0c      	ite	eq
 8008362:	4623      	moveq	r3, r4
 8008364:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008370:	9002      	str	r0, [sp, #8]
 8008372:	9006      	str	r0, [sp, #24]
 8008374:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008378:	4628      	mov	r0, r5
 800837a:	ab21      	add	r3, sp, #132	; 0x84
 800837c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800837e:	a902      	add	r1, sp, #8
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	f000 f869 	bl	8008458 <_svfiprintf_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	bfbc      	itt	lt
 800838a:	238b      	movlt	r3, #139	; 0x8b
 800838c:	602b      	strlt	r3, [r5, #0]
 800838e:	2c00      	cmp	r4, #0
 8008390:	d0dd      	beq.n	800834e <sniprintf+0x16>
 8008392:	2200      	movs	r2, #0
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e7d9      	b.n	800834e <sniprintf+0x16>
 800839a:	bf00      	nop
 800839c:	2000017c 	.word	0x2000017c

080083a0 <__ssputs_r>:
 80083a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	688e      	ldr	r6, [r1, #8]
 80083a6:	4682      	mov	sl, r0
 80083a8:	429e      	cmp	r6, r3
 80083aa:	460c      	mov	r4, r1
 80083ac:	4690      	mov	r8, r2
 80083ae:	461f      	mov	r7, r3
 80083b0:	d838      	bhi.n	8008424 <__ssputs_r+0x84>
 80083b2:	898a      	ldrh	r2, [r1, #12]
 80083b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083b8:	d032      	beq.n	8008420 <__ssputs_r+0x80>
 80083ba:	6825      	ldr	r5, [r4, #0]
 80083bc:	6909      	ldr	r1, [r1, #16]
 80083be:	3301      	adds	r3, #1
 80083c0:	eba5 0901 	sub.w	r9, r5, r1
 80083c4:	6965      	ldr	r5, [r4, #20]
 80083c6:	444b      	add	r3, r9
 80083c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d0:	106d      	asrs	r5, r5, #1
 80083d2:	429d      	cmp	r5, r3
 80083d4:	bf38      	it	cc
 80083d6:	461d      	movcc	r5, r3
 80083d8:	0553      	lsls	r3, r2, #21
 80083da:	d531      	bpl.n	8008440 <__ssputs_r+0xa0>
 80083dc:	4629      	mov	r1, r5
 80083de:	f000 fb53 	bl	8008a88 <_malloc_r>
 80083e2:	4606      	mov	r6, r0
 80083e4:	b950      	cbnz	r0, 80083fc <__ssputs_r+0x5c>
 80083e6:	230c      	movs	r3, #12
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	f8ca 3000 	str.w	r3, [sl]
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fc:	464a      	mov	r2, r9
 80083fe:	6921      	ldr	r1, [r4, #16]
 8008400:	f000 face 	bl	80089a0 <memcpy>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800840a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	6126      	str	r6, [r4, #16]
 8008412:	444e      	add	r6, r9
 8008414:	6026      	str	r6, [r4, #0]
 8008416:	463e      	mov	r6, r7
 8008418:	6165      	str	r5, [r4, #20]
 800841a:	eba5 0509 	sub.w	r5, r5, r9
 800841e:	60a5      	str	r5, [r4, #8]
 8008420:	42be      	cmp	r6, r7
 8008422:	d900      	bls.n	8008426 <__ssputs_r+0x86>
 8008424:	463e      	mov	r6, r7
 8008426:	4632      	mov	r2, r6
 8008428:	4641      	mov	r1, r8
 800842a:	6820      	ldr	r0, [r4, #0]
 800842c:	f000 fac6 	bl	80089bc <memmove>
 8008430:	68a3      	ldr	r3, [r4, #8]
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	1b9b      	subs	r3, r3, r6
 8008436:	4432      	add	r2, r6
 8008438:	2000      	movs	r0, #0
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	6022      	str	r2, [r4, #0]
 800843e:	e7db      	b.n	80083f8 <__ssputs_r+0x58>
 8008440:	462a      	mov	r2, r5
 8008442:	f000 fb7b 	bl	8008b3c <_realloc_r>
 8008446:	4606      	mov	r6, r0
 8008448:	2800      	cmp	r0, #0
 800844a:	d1e1      	bne.n	8008410 <__ssputs_r+0x70>
 800844c:	4650      	mov	r0, sl
 800844e:	6921      	ldr	r1, [r4, #16]
 8008450:	f000 face 	bl	80089f0 <_free_r>
 8008454:	e7c7      	b.n	80083e6 <__ssputs_r+0x46>
	...

08008458 <_svfiprintf_r>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	4698      	mov	r8, r3
 800845e:	898b      	ldrh	r3, [r1, #12]
 8008460:	4607      	mov	r7, r0
 8008462:	061b      	lsls	r3, r3, #24
 8008464:	460d      	mov	r5, r1
 8008466:	4614      	mov	r4, r2
 8008468:	b09d      	sub	sp, #116	; 0x74
 800846a:	d50e      	bpl.n	800848a <_svfiprintf_r+0x32>
 800846c:	690b      	ldr	r3, [r1, #16]
 800846e:	b963      	cbnz	r3, 800848a <_svfiprintf_r+0x32>
 8008470:	2140      	movs	r1, #64	; 0x40
 8008472:	f000 fb09 	bl	8008a88 <_malloc_r>
 8008476:	6028      	str	r0, [r5, #0]
 8008478:	6128      	str	r0, [r5, #16]
 800847a:	b920      	cbnz	r0, 8008486 <_svfiprintf_r+0x2e>
 800847c:	230c      	movs	r3, #12
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	e0d1      	b.n	800862a <_svfiprintf_r+0x1d2>
 8008486:	2340      	movs	r3, #64	; 0x40
 8008488:	616b      	str	r3, [r5, #20]
 800848a:	2300      	movs	r3, #0
 800848c:	9309      	str	r3, [sp, #36]	; 0x24
 800848e:	2320      	movs	r3, #32
 8008490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008494:	2330      	movs	r3, #48	; 0x30
 8008496:	f04f 0901 	mov.w	r9, #1
 800849a:	f8cd 800c 	str.w	r8, [sp, #12]
 800849e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008644 <_svfiprintf_r+0x1ec>
 80084a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084a6:	4623      	mov	r3, r4
 80084a8:	469a      	mov	sl, r3
 80084aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ae:	b10a      	cbz	r2, 80084b4 <_svfiprintf_r+0x5c>
 80084b0:	2a25      	cmp	r2, #37	; 0x25
 80084b2:	d1f9      	bne.n	80084a8 <_svfiprintf_r+0x50>
 80084b4:	ebba 0b04 	subs.w	fp, sl, r4
 80084b8:	d00b      	beq.n	80084d2 <_svfiprintf_r+0x7a>
 80084ba:	465b      	mov	r3, fp
 80084bc:	4622      	mov	r2, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff ff6d 	bl	80083a0 <__ssputs_r>
 80084c6:	3001      	adds	r0, #1
 80084c8:	f000 80aa 	beq.w	8008620 <_svfiprintf_r+0x1c8>
 80084cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ce:	445a      	add	r2, fp
 80084d0:	9209      	str	r2, [sp, #36]	; 0x24
 80084d2:	f89a 3000 	ldrb.w	r3, [sl]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 80a2 	beq.w	8008620 <_svfiprintf_r+0x1c8>
 80084dc:	2300      	movs	r3, #0
 80084de:	f04f 32ff 	mov.w	r2, #4294967295
 80084e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e6:	f10a 0a01 	add.w	sl, sl, #1
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084f2:	931a      	str	r3, [sp, #104]	; 0x68
 80084f4:	4654      	mov	r4, sl
 80084f6:	2205      	movs	r2, #5
 80084f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fc:	4851      	ldr	r0, [pc, #324]	; (8008644 <_svfiprintf_r+0x1ec>)
 80084fe:	f000 fa41 	bl	8008984 <memchr>
 8008502:	9a04      	ldr	r2, [sp, #16]
 8008504:	b9d8      	cbnz	r0, 800853e <_svfiprintf_r+0xe6>
 8008506:	06d0      	lsls	r0, r2, #27
 8008508:	bf44      	itt	mi
 800850a:	2320      	movmi	r3, #32
 800850c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008510:	0711      	lsls	r1, r2, #28
 8008512:	bf44      	itt	mi
 8008514:	232b      	movmi	r3, #43	; 0x2b
 8008516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800851a:	f89a 3000 	ldrb.w	r3, [sl]
 800851e:	2b2a      	cmp	r3, #42	; 0x2a
 8008520:	d015      	beq.n	800854e <_svfiprintf_r+0xf6>
 8008522:	4654      	mov	r4, sl
 8008524:	2000      	movs	r0, #0
 8008526:	f04f 0c0a 	mov.w	ip, #10
 800852a:	9a07      	ldr	r2, [sp, #28]
 800852c:	4621      	mov	r1, r4
 800852e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008532:	3b30      	subs	r3, #48	; 0x30
 8008534:	2b09      	cmp	r3, #9
 8008536:	d94e      	bls.n	80085d6 <_svfiprintf_r+0x17e>
 8008538:	b1b0      	cbz	r0, 8008568 <_svfiprintf_r+0x110>
 800853a:	9207      	str	r2, [sp, #28]
 800853c:	e014      	b.n	8008568 <_svfiprintf_r+0x110>
 800853e:	eba0 0308 	sub.w	r3, r0, r8
 8008542:	fa09 f303 	lsl.w	r3, r9, r3
 8008546:	4313      	orrs	r3, r2
 8008548:	46a2      	mov	sl, r4
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	e7d2      	b.n	80084f4 <_svfiprintf_r+0x9c>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	1d19      	adds	r1, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	9103      	str	r1, [sp, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfbb      	ittet	lt
 800855a:	425b      	neglt	r3, r3
 800855c:	f042 0202 	orrlt.w	r2, r2, #2
 8008560:	9307      	strge	r3, [sp, #28]
 8008562:	9307      	strlt	r3, [sp, #28]
 8008564:	bfb8      	it	lt
 8008566:	9204      	strlt	r2, [sp, #16]
 8008568:	7823      	ldrb	r3, [r4, #0]
 800856a:	2b2e      	cmp	r3, #46	; 0x2e
 800856c:	d10c      	bne.n	8008588 <_svfiprintf_r+0x130>
 800856e:	7863      	ldrb	r3, [r4, #1]
 8008570:	2b2a      	cmp	r3, #42	; 0x2a
 8008572:	d135      	bne.n	80085e0 <_svfiprintf_r+0x188>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	3402      	adds	r4, #2
 8008578:	1d1a      	adds	r2, r3, #4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	bfb8      	it	lt
 8008582:	f04f 33ff 	movlt.w	r3, #4294967295
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008654 <_svfiprintf_r+0x1fc>
 800858c:	2203      	movs	r2, #3
 800858e:	4650      	mov	r0, sl
 8008590:	7821      	ldrb	r1, [r4, #0]
 8008592:	f000 f9f7 	bl	8008984 <memchr>
 8008596:	b140      	cbz	r0, 80085aa <_svfiprintf_r+0x152>
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	eba0 000a 	sub.w	r0, r0, sl
 800859e:	fa03 f000 	lsl.w	r0, r3, r0
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	3401      	adds	r4, #1
 80085a6:	4303      	orrs	r3, r0
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	2206      	movs	r2, #6
 80085b0:	4825      	ldr	r0, [pc, #148]	; (8008648 <_svfiprintf_r+0x1f0>)
 80085b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085b6:	f000 f9e5 	bl	8008984 <memchr>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d038      	beq.n	8008630 <_svfiprintf_r+0x1d8>
 80085be:	4b23      	ldr	r3, [pc, #140]	; (800864c <_svfiprintf_r+0x1f4>)
 80085c0:	bb1b      	cbnz	r3, 800860a <_svfiprintf_r+0x1b2>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	3307      	adds	r3, #7
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	3308      	adds	r3, #8
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d0:	4433      	add	r3, r6
 80085d2:	9309      	str	r3, [sp, #36]	; 0x24
 80085d4:	e767      	b.n	80084a6 <_svfiprintf_r+0x4e>
 80085d6:	460c      	mov	r4, r1
 80085d8:	2001      	movs	r0, #1
 80085da:	fb0c 3202 	mla	r2, ip, r2, r3
 80085de:	e7a5      	b.n	800852c <_svfiprintf_r+0xd4>
 80085e0:	2300      	movs	r3, #0
 80085e2:	f04f 0c0a 	mov.w	ip, #10
 80085e6:	4619      	mov	r1, r3
 80085e8:	3401      	adds	r4, #1
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	4620      	mov	r0, r4
 80085ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f2:	3a30      	subs	r2, #48	; 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d903      	bls.n	8008600 <_svfiprintf_r+0x1a8>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c5      	beq.n	8008588 <_svfiprintf_r+0x130>
 80085fc:	9105      	str	r1, [sp, #20]
 80085fe:	e7c3      	b.n	8008588 <_svfiprintf_r+0x130>
 8008600:	4604      	mov	r4, r0
 8008602:	2301      	movs	r3, #1
 8008604:	fb0c 2101 	mla	r1, ip, r1, r2
 8008608:	e7f0      	b.n	80085ec <_svfiprintf_r+0x194>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4638      	mov	r0, r7
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <_svfiprintf_r+0x1f8>)
 8008614:	a904      	add	r1, sp, #16
 8008616:	f3af 8000 	nop.w
 800861a:	1c42      	adds	r2, r0, #1
 800861c:	4606      	mov	r6, r0
 800861e:	d1d6      	bne.n	80085ce <_svfiprintf_r+0x176>
 8008620:	89ab      	ldrh	r3, [r5, #12]
 8008622:	065b      	lsls	r3, r3, #25
 8008624:	f53f af2c 	bmi.w	8008480 <_svfiprintf_r+0x28>
 8008628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862a:	b01d      	add	sp, #116	; 0x74
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	ab03      	add	r3, sp, #12
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	462a      	mov	r2, r5
 8008636:	4638      	mov	r0, r7
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <_svfiprintf_r+0x1f8>)
 800863a:	a904      	add	r1, sp, #16
 800863c:	f000 f87c 	bl	8008738 <_printf_i>
 8008640:	e7eb      	b.n	800861a <_svfiprintf_r+0x1c2>
 8008642:	bf00      	nop
 8008644:	08008ccc 	.word	0x08008ccc
 8008648:	08008cd6 	.word	0x08008cd6
 800864c:	00000000 	.word	0x00000000
 8008650:	080083a1 	.word	0x080083a1
 8008654:	08008cd2 	.word	0x08008cd2

08008658 <_printf_common>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	4699      	mov	r9, r3
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	4607      	mov	r7, r0
 8008666:	4293      	cmp	r3, r2
 8008668:	bfb8      	it	lt
 800866a:	4613      	movlt	r3, r2
 800866c:	6033      	str	r3, [r6, #0]
 800866e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008672:	460c      	mov	r4, r1
 8008674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008678:	b10a      	cbz	r2, 800867e <_printf_common+0x26>
 800867a:	3301      	adds	r3, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	0699      	lsls	r1, r3, #26
 8008682:	bf42      	ittt	mi
 8008684:	6833      	ldrmi	r3, [r6, #0]
 8008686:	3302      	addmi	r3, #2
 8008688:	6033      	strmi	r3, [r6, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	f015 0506 	ands.w	r5, r5, #6
 8008690:	d106      	bne.n	80086a0 <_printf_common+0x48>
 8008692:	f104 0a19 	add.w	sl, r4, #25
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	6832      	ldr	r2, [r6, #0]
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	42ab      	cmp	r3, r5
 800869e:	dc28      	bgt.n	80086f2 <_printf_common+0x9a>
 80086a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a4:	1e13      	subs	r3, r2, #0
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	bf18      	it	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	0692      	lsls	r2, r2, #26
 80086ae:	d42d      	bmi.n	800870c <_printf_common+0xb4>
 80086b0:	4649      	mov	r1, r9
 80086b2:	4638      	mov	r0, r7
 80086b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d020      	beq.n	8008700 <_printf_common+0xa8>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	68e5      	ldr	r5, [r4, #12]
 80086c2:	f003 0306 	and.w	r3, r3, #6
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	bf18      	it	ne
 80086ca:	2500      	movne	r5, #0
 80086cc:	6832      	ldr	r2, [r6, #0]
 80086ce:	f04f 0600 	mov.w	r6, #0
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	bf08      	it	eq
 80086d6:	1aad      	subeq	r5, r5, r2
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	bf08      	it	eq
 80086dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e0:	4293      	cmp	r3, r2
 80086e2:	bfc4      	itt	gt
 80086e4:	1a9b      	subgt	r3, r3, r2
 80086e6:	18ed      	addgt	r5, r5, r3
 80086e8:	341a      	adds	r4, #26
 80086ea:	42b5      	cmp	r5, r6
 80086ec:	d11a      	bne.n	8008724 <_printf_common+0xcc>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e008      	b.n	8008704 <_printf_common+0xac>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4652      	mov	r2, sl
 80086f6:	4649      	mov	r1, r9
 80086f8:	4638      	mov	r0, r7
 80086fa:	47c0      	blx	r8
 80086fc:	3001      	adds	r0, #1
 80086fe:	d103      	bne.n	8008708 <_printf_common+0xb0>
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008708:	3501      	adds	r5, #1
 800870a:	e7c4      	b.n	8008696 <_printf_common+0x3e>
 800870c:	2030      	movs	r0, #48	; 0x30
 800870e:	18e1      	adds	r1, r4, r3
 8008710:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800871a:	4422      	add	r2, r4
 800871c:	3302      	adds	r3, #2
 800871e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008722:	e7c5      	b.n	80086b0 <_printf_common+0x58>
 8008724:	2301      	movs	r3, #1
 8008726:	4622      	mov	r2, r4
 8008728:	4649      	mov	r1, r9
 800872a:	4638      	mov	r0, r7
 800872c:	47c0      	blx	r8
 800872e:	3001      	adds	r0, #1
 8008730:	d0e6      	beq.n	8008700 <_printf_common+0xa8>
 8008732:	3601      	adds	r6, #1
 8008734:	e7d9      	b.n	80086ea <_printf_common+0x92>
	...

08008738 <_printf_i>:
 8008738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	7e27      	ldrb	r7, [r4, #24]
 8008740:	4691      	mov	r9, r2
 8008742:	2f78      	cmp	r7, #120	; 0x78
 8008744:	4680      	mov	r8, r0
 8008746:	469a      	mov	sl, r3
 8008748:	990c      	ldr	r1, [sp, #48]	; 0x30
 800874a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874e:	d807      	bhi.n	8008760 <_printf_i+0x28>
 8008750:	2f62      	cmp	r7, #98	; 0x62
 8008752:	d80a      	bhi.n	800876a <_printf_i+0x32>
 8008754:	2f00      	cmp	r7, #0
 8008756:	f000 80d9 	beq.w	800890c <_printf_i+0x1d4>
 800875a:	2f58      	cmp	r7, #88	; 0x58
 800875c:	f000 80a4 	beq.w	80088a8 <_printf_i+0x170>
 8008760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008768:	e03a      	b.n	80087e0 <_printf_i+0xa8>
 800876a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800876e:	2b15      	cmp	r3, #21
 8008770:	d8f6      	bhi.n	8008760 <_printf_i+0x28>
 8008772:	a001      	add	r0, pc, #4	; (adr r0, 8008778 <_printf_i+0x40>)
 8008774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087e5 	.word	0x080087e5
 8008780:	08008761 	.word	0x08008761
 8008784:	08008761 	.word	0x08008761
 8008788:	08008761 	.word	0x08008761
 800878c:	08008761 	.word	0x08008761
 8008790:	080087e5 	.word	0x080087e5
 8008794:	08008761 	.word	0x08008761
 8008798:	08008761 	.word	0x08008761
 800879c:	08008761 	.word	0x08008761
 80087a0:	08008761 	.word	0x08008761
 80087a4:	080088f3 	.word	0x080088f3
 80087a8:	08008815 	.word	0x08008815
 80087ac:	080088d5 	.word	0x080088d5
 80087b0:	08008761 	.word	0x08008761
 80087b4:	08008761 	.word	0x08008761
 80087b8:	08008915 	.word	0x08008915
 80087bc:	08008761 	.word	0x08008761
 80087c0:	08008815 	.word	0x08008815
 80087c4:	08008761 	.word	0x08008761
 80087c8:	08008761 	.word	0x08008761
 80087cc:	080088dd 	.word	0x080088dd
 80087d0:	680b      	ldr	r3, [r1, #0]
 80087d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	600a      	str	r2, [r1, #0]
 80087dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0a4      	b.n	800892e <_printf_i+0x1f6>
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	6808      	ldr	r0, [r1, #0]
 80087e8:	062e      	lsls	r6, r5, #24
 80087ea:	f100 0304 	add.w	r3, r0, #4
 80087ee:	d50a      	bpl.n	8008806 <_printf_i+0xce>
 80087f0:	6805      	ldr	r5, [r0, #0]
 80087f2:	600b      	str	r3, [r1, #0]
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	da03      	bge.n	8008800 <_printf_i+0xc8>
 80087f8:	232d      	movs	r3, #45	; 0x2d
 80087fa:	426d      	negs	r5, r5
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	230a      	movs	r3, #10
 8008802:	485e      	ldr	r0, [pc, #376]	; (800897c <_printf_i+0x244>)
 8008804:	e019      	b.n	800883a <_printf_i+0x102>
 8008806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880a:	6805      	ldr	r5, [r0, #0]
 800880c:	600b      	str	r3, [r1, #0]
 800880e:	bf18      	it	ne
 8008810:	b22d      	sxthne	r5, r5
 8008812:	e7ef      	b.n	80087f4 <_printf_i+0xbc>
 8008814:	680b      	ldr	r3, [r1, #0]
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	1d18      	adds	r0, r3, #4
 800881a:	6008      	str	r0, [r1, #0]
 800881c:	0628      	lsls	r0, r5, #24
 800881e:	d501      	bpl.n	8008824 <_printf_i+0xec>
 8008820:	681d      	ldr	r5, [r3, #0]
 8008822:	e002      	b.n	800882a <_printf_i+0xf2>
 8008824:	0669      	lsls	r1, r5, #25
 8008826:	d5fb      	bpl.n	8008820 <_printf_i+0xe8>
 8008828:	881d      	ldrh	r5, [r3, #0]
 800882a:	2f6f      	cmp	r7, #111	; 0x6f
 800882c:	bf0c      	ite	eq
 800882e:	2308      	moveq	r3, #8
 8008830:	230a      	movne	r3, #10
 8008832:	4852      	ldr	r0, [pc, #328]	; (800897c <_printf_i+0x244>)
 8008834:	2100      	movs	r1, #0
 8008836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883a:	6866      	ldr	r6, [r4, #4]
 800883c:	2e00      	cmp	r6, #0
 800883e:	bfa8      	it	ge
 8008840:	6821      	ldrge	r1, [r4, #0]
 8008842:	60a6      	str	r6, [r4, #8]
 8008844:	bfa4      	itt	ge
 8008846:	f021 0104 	bicge.w	r1, r1, #4
 800884a:	6021      	strge	r1, [r4, #0]
 800884c:	b90d      	cbnz	r5, 8008852 <_printf_i+0x11a>
 800884e:	2e00      	cmp	r6, #0
 8008850:	d04d      	beq.n	80088ee <_printf_i+0x1b6>
 8008852:	4616      	mov	r6, r2
 8008854:	fbb5 f1f3 	udiv	r1, r5, r3
 8008858:	fb03 5711 	mls	r7, r3, r1, r5
 800885c:	5dc7      	ldrb	r7, [r0, r7]
 800885e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008862:	462f      	mov	r7, r5
 8008864:	42bb      	cmp	r3, r7
 8008866:	460d      	mov	r5, r1
 8008868:	d9f4      	bls.n	8008854 <_printf_i+0x11c>
 800886a:	2b08      	cmp	r3, #8
 800886c:	d10b      	bne.n	8008886 <_printf_i+0x14e>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	07df      	lsls	r7, r3, #31
 8008872:	d508      	bpl.n	8008886 <_printf_i+0x14e>
 8008874:	6923      	ldr	r3, [r4, #16]
 8008876:	6861      	ldr	r1, [r4, #4]
 8008878:	4299      	cmp	r1, r3
 800887a:	bfde      	ittt	le
 800887c:	2330      	movle	r3, #48	; 0x30
 800887e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008882:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008886:	1b92      	subs	r2, r2, r6
 8008888:	6122      	str	r2, [r4, #16]
 800888a:	464b      	mov	r3, r9
 800888c:	4621      	mov	r1, r4
 800888e:	4640      	mov	r0, r8
 8008890:	f8cd a000 	str.w	sl, [sp]
 8008894:	aa03      	add	r2, sp, #12
 8008896:	f7ff fedf 	bl	8008658 <_printf_common>
 800889a:	3001      	adds	r0, #1
 800889c:	d14c      	bne.n	8008938 <_printf_i+0x200>
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	b004      	add	sp, #16
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	4834      	ldr	r0, [pc, #208]	; (800897c <_printf_i+0x244>)
 80088aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ae:	680e      	ldr	r6, [r1, #0]
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80088b6:	061f      	lsls	r7, r3, #24
 80088b8:	600e      	str	r6, [r1, #0]
 80088ba:	d514      	bpl.n	80088e6 <_printf_i+0x1ae>
 80088bc:	07d9      	lsls	r1, r3, #31
 80088be:	bf44      	itt	mi
 80088c0:	f043 0320 	orrmi.w	r3, r3, #32
 80088c4:	6023      	strmi	r3, [r4, #0]
 80088c6:	b91d      	cbnz	r5, 80088d0 <_printf_i+0x198>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	f023 0320 	bic.w	r3, r3, #32
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	2310      	movs	r3, #16
 80088d2:	e7af      	b.n	8008834 <_printf_i+0xfc>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	f043 0320 	orr.w	r3, r3, #32
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	2378      	movs	r3, #120	; 0x78
 80088de:	4828      	ldr	r0, [pc, #160]	; (8008980 <_printf_i+0x248>)
 80088e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e4:	e7e3      	b.n	80088ae <_printf_i+0x176>
 80088e6:	065e      	lsls	r6, r3, #25
 80088e8:	bf48      	it	mi
 80088ea:	b2ad      	uxthmi	r5, r5
 80088ec:	e7e6      	b.n	80088bc <_printf_i+0x184>
 80088ee:	4616      	mov	r6, r2
 80088f0:	e7bb      	b.n	800886a <_printf_i+0x132>
 80088f2:	680b      	ldr	r3, [r1, #0]
 80088f4:	6826      	ldr	r6, [r4, #0]
 80088f6:	1d1d      	adds	r5, r3, #4
 80088f8:	6960      	ldr	r0, [r4, #20]
 80088fa:	600d      	str	r5, [r1, #0]
 80088fc:	0635      	lsls	r5, r6, #24
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	d501      	bpl.n	8008906 <_printf_i+0x1ce>
 8008902:	6018      	str	r0, [r3, #0]
 8008904:	e002      	b.n	800890c <_printf_i+0x1d4>
 8008906:	0671      	lsls	r1, r6, #25
 8008908:	d5fb      	bpl.n	8008902 <_printf_i+0x1ca>
 800890a:	8018      	strh	r0, [r3, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	4616      	mov	r6, r2
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	e7ba      	b.n	800888a <_printf_i+0x152>
 8008914:	680b      	ldr	r3, [r1, #0]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	600a      	str	r2, [r1, #0]
 800891a:	681e      	ldr	r6, [r3, #0]
 800891c:	2100      	movs	r1, #0
 800891e:	4630      	mov	r0, r6
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	f000 f82f 	bl	8008984 <memchr>
 8008926:	b108      	cbz	r0, 800892c <_printf_i+0x1f4>
 8008928:	1b80      	subs	r0, r0, r6
 800892a:	6060      	str	r0, [r4, #4]
 800892c:	6863      	ldr	r3, [r4, #4]
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	2300      	movs	r3, #0
 8008932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008936:	e7a8      	b.n	800888a <_printf_i+0x152>
 8008938:	4632      	mov	r2, r6
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	47d0      	blx	sl
 8008942:	3001      	adds	r0, #1
 8008944:	d0ab      	beq.n	800889e <_printf_i+0x166>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	079b      	lsls	r3, r3, #30
 800894a:	d413      	bmi.n	8008974 <_printf_i+0x23c>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e7a4      	b.n	80088a2 <_printf_i+0x16a>
 8008958:	2301      	movs	r3, #1
 800895a:	4632      	mov	r2, r6
 800895c:	4649      	mov	r1, r9
 800895e:	4640      	mov	r0, r8
 8008960:	47d0      	blx	sl
 8008962:	3001      	adds	r0, #1
 8008964:	d09b      	beq.n	800889e <_printf_i+0x166>
 8008966:	3501      	adds	r5, #1
 8008968:	68e3      	ldr	r3, [r4, #12]
 800896a:	9903      	ldr	r1, [sp, #12]
 800896c:	1a5b      	subs	r3, r3, r1
 800896e:	42ab      	cmp	r3, r5
 8008970:	dcf2      	bgt.n	8008958 <_printf_i+0x220>
 8008972:	e7eb      	b.n	800894c <_printf_i+0x214>
 8008974:	2500      	movs	r5, #0
 8008976:	f104 0619 	add.w	r6, r4, #25
 800897a:	e7f5      	b.n	8008968 <_printf_i+0x230>
 800897c:	08008cdd 	.word	0x08008cdd
 8008980:	08008cee 	.word	0x08008cee

08008984 <memchr>:
 8008984:	4603      	mov	r3, r0
 8008986:	b510      	push	{r4, lr}
 8008988:	b2c9      	uxtb	r1, r1
 800898a:	4402      	add	r2, r0
 800898c:	4293      	cmp	r3, r2
 800898e:	4618      	mov	r0, r3
 8008990:	d101      	bne.n	8008996 <memchr+0x12>
 8008992:	2000      	movs	r0, #0
 8008994:	e003      	b.n	800899e <memchr+0x1a>
 8008996:	7804      	ldrb	r4, [r0, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	428c      	cmp	r4, r1
 800899c:	d1f6      	bne.n	800898c <memchr+0x8>
 800899e:	bd10      	pop	{r4, pc}

080089a0 <memcpy>:
 80089a0:	440a      	add	r2, r1
 80089a2:	4291      	cmp	r1, r2
 80089a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a8:	d100      	bne.n	80089ac <memcpy+0xc>
 80089aa:	4770      	bx	lr
 80089ac:	b510      	push	{r4, lr}
 80089ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b2:	4291      	cmp	r1, r2
 80089b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b8:	d1f9      	bne.n	80089ae <memcpy+0xe>
 80089ba:	bd10      	pop	{r4, pc}

080089bc <memmove>:
 80089bc:	4288      	cmp	r0, r1
 80089be:	b510      	push	{r4, lr}
 80089c0:	eb01 0402 	add.w	r4, r1, r2
 80089c4:	d902      	bls.n	80089cc <memmove+0x10>
 80089c6:	4284      	cmp	r4, r0
 80089c8:	4623      	mov	r3, r4
 80089ca:	d807      	bhi.n	80089dc <memmove+0x20>
 80089cc:	1e43      	subs	r3, r0, #1
 80089ce:	42a1      	cmp	r1, r4
 80089d0:	d008      	beq.n	80089e4 <memmove+0x28>
 80089d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089da:	e7f8      	b.n	80089ce <memmove+0x12>
 80089dc:	4601      	mov	r1, r0
 80089de:	4402      	add	r2, r0
 80089e0:	428a      	cmp	r2, r1
 80089e2:	d100      	bne.n	80089e6 <memmove+0x2a>
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ee:	e7f7      	b.n	80089e0 <memmove+0x24>

080089f0 <_free_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4605      	mov	r5, r0
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d043      	beq.n	8008a80 <_free_r+0x90>
 80089f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089fc:	1f0c      	subs	r4, r1, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb8      	it	lt
 8008a02:	18e4      	addlt	r4, r4, r3
 8008a04:	f000 f8d0 	bl	8008ba8 <__malloc_lock>
 8008a08:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <_free_r+0x94>)
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	b933      	cbnz	r3, 8008a1e <_free_r+0x2e>
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	6014      	str	r4, [r2, #0]
 8008a14:	4628      	mov	r0, r5
 8008a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a1a:	f000 b8cb 	b.w	8008bb4 <__malloc_unlock>
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	d90a      	bls.n	8008a38 <_free_r+0x48>
 8008a22:	6821      	ldr	r1, [r4, #0]
 8008a24:	1862      	adds	r2, r4, r1
 8008a26:	4293      	cmp	r3, r2
 8008a28:	bf01      	itttt	eq
 8008a2a:	681a      	ldreq	r2, [r3, #0]
 8008a2c:	685b      	ldreq	r3, [r3, #4]
 8008a2e:	1852      	addeq	r2, r2, r1
 8008a30:	6022      	streq	r2, [r4, #0]
 8008a32:	6063      	str	r3, [r4, #4]
 8008a34:	6004      	str	r4, [r0, #0]
 8008a36:	e7ed      	b.n	8008a14 <_free_r+0x24>
 8008a38:	461a      	mov	r2, r3
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	b10b      	cbz	r3, 8008a42 <_free_r+0x52>
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	d9fa      	bls.n	8008a38 <_free_r+0x48>
 8008a42:	6811      	ldr	r1, [r2, #0]
 8008a44:	1850      	adds	r0, r2, r1
 8008a46:	42a0      	cmp	r0, r4
 8008a48:	d10b      	bne.n	8008a62 <_free_r+0x72>
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	4401      	add	r1, r0
 8008a4e:	1850      	adds	r0, r2, r1
 8008a50:	4283      	cmp	r3, r0
 8008a52:	6011      	str	r1, [r2, #0]
 8008a54:	d1de      	bne.n	8008a14 <_free_r+0x24>
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	4401      	add	r1, r0
 8008a5c:	6011      	str	r1, [r2, #0]
 8008a5e:	6053      	str	r3, [r2, #4]
 8008a60:	e7d8      	b.n	8008a14 <_free_r+0x24>
 8008a62:	d902      	bls.n	8008a6a <_free_r+0x7a>
 8008a64:	230c      	movs	r3, #12
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	e7d4      	b.n	8008a14 <_free_r+0x24>
 8008a6a:	6820      	ldr	r0, [r4, #0]
 8008a6c:	1821      	adds	r1, r4, r0
 8008a6e:	428b      	cmp	r3, r1
 8008a70:	bf01      	itttt	eq
 8008a72:	6819      	ldreq	r1, [r3, #0]
 8008a74:	685b      	ldreq	r3, [r3, #4]
 8008a76:	1809      	addeq	r1, r1, r0
 8008a78:	6021      	streq	r1, [r4, #0]
 8008a7a:	6063      	str	r3, [r4, #4]
 8008a7c:	6054      	str	r4, [r2, #4]
 8008a7e:	e7c9      	b.n	8008a14 <_free_r+0x24>
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20000534 	.word	0x20000534

08008a88 <_malloc_r>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	1ccd      	adds	r5, r1, #3
 8008a8c:	f025 0503 	bic.w	r5, r5, #3
 8008a90:	3508      	adds	r5, #8
 8008a92:	2d0c      	cmp	r5, #12
 8008a94:	bf38      	it	cc
 8008a96:	250c      	movcc	r5, #12
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	db01      	blt.n	8008aa2 <_malloc_r+0x1a>
 8008a9e:	42a9      	cmp	r1, r5
 8008aa0:	d903      	bls.n	8008aaa <_malloc_r+0x22>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aaa:	f000 f87d 	bl	8008ba8 <__malloc_lock>
 8008aae:	4921      	ldr	r1, [pc, #132]	; (8008b34 <_malloc_r+0xac>)
 8008ab0:	680a      	ldr	r2, [r1, #0]
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	b99c      	cbnz	r4, 8008ade <_malloc_r+0x56>
 8008ab6:	4f20      	ldr	r7, [pc, #128]	; (8008b38 <_malloc_r+0xb0>)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	b923      	cbnz	r3, 8008ac6 <_malloc_r+0x3e>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 f862 	bl	8008b88 <_sbrk_r>
 8008ac4:	6038      	str	r0, [r7, #0]
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f85d 	bl	8008b88 <_sbrk_r>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d123      	bne.n	8008b1a <_malloc_r+0x92>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	6033      	str	r3, [r6, #0]
 8008ad8:	f000 f86c 	bl	8008bb4 <__malloc_unlock>
 8008adc:	e7e3      	b.n	8008aa6 <_malloc_r+0x1e>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	1b5b      	subs	r3, r3, r5
 8008ae2:	d417      	bmi.n	8008b14 <_malloc_r+0x8c>
 8008ae4:	2b0b      	cmp	r3, #11
 8008ae6:	d903      	bls.n	8008af0 <_malloc_r+0x68>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	441c      	add	r4, r3
 8008aec:	6025      	str	r5, [r4, #0]
 8008aee:	e004      	b.n	8008afa <_malloc_r+0x72>
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	42a2      	cmp	r2, r4
 8008af4:	bf0c      	ite	eq
 8008af6:	600b      	streq	r3, [r1, #0]
 8008af8:	6053      	strne	r3, [r2, #4]
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f85a 	bl	8008bb4 <__malloc_unlock>
 8008b00:	f104 000b 	add.w	r0, r4, #11
 8008b04:	1d23      	adds	r3, r4, #4
 8008b06:	f020 0007 	bic.w	r0, r0, #7
 8008b0a:	1ac2      	subs	r2, r0, r3
 8008b0c:	d0cc      	beq.n	8008aa8 <_malloc_r+0x20>
 8008b0e:	1a1b      	subs	r3, r3, r0
 8008b10:	50a3      	str	r3, [r4, r2]
 8008b12:	e7c9      	b.n	8008aa8 <_malloc_r+0x20>
 8008b14:	4622      	mov	r2, r4
 8008b16:	6864      	ldr	r4, [r4, #4]
 8008b18:	e7cc      	b.n	8008ab4 <_malloc_r+0x2c>
 8008b1a:	1cc4      	adds	r4, r0, #3
 8008b1c:	f024 0403 	bic.w	r4, r4, #3
 8008b20:	42a0      	cmp	r0, r4
 8008b22:	d0e3      	beq.n	8008aec <_malloc_r+0x64>
 8008b24:	1a21      	subs	r1, r4, r0
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 f82e 	bl	8008b88 <_sbrk_r>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d1dd      	bne.n	8008aec <_malloc_r+0x64>
 8008b30:	e7cf      	b.n	8008ad2 <_malloc_r+0x4a>
 8008b32:	bf00      	nop
 8008b34:	20000534 	.word	0x20000534
 8008b38:	20000538 	.word	0x20000538

08008b3c <_realloc_r>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	4607      	mov	r7, r0
 8008b40:	4614      	mov	r4, r2
 8008b42:	460e      	mov	r6, r1
 8008b44:	b921      	cbnz	r1, 8008b50 <_realloc_r+0x14>
 8008b46:	4611      	mov	r1, r2
 8008b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b4c:	f7ff bf9c 	b.w	8008a88 <_malloc_r>
 8008b50:	b922      	cbnz	r2, 8008b5c <_realloc_r+0x20>
 8008b52:	f7ff ff4d 	bl	80089f0 <_free_r>
 8008b56:	4625      	mov	r5, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b5c:	f000 f830 	bl	8008bc0 <_malloc_usable_size_r>
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d20f      	bcs.n	8008b84 <_realloc_r+0x48>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7ff ff8e 	bl	8008a88 <_malloc_r>
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d0f2      	beq.n	8008b58 <_realloc_r+0x1c>
 8008b72:	4631      	mov	r1, r6
 8008b74:	4622      	mov	r2, r4
 8008b76:	f7ff ff13 	bl	80089a0 <memcpy>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff ff37 	bl	80089f0 <_free_r>
 8008b82:	e7e9      	b.n	8008b58 <_realloc_r+0x1c>
 8008b84:	4635      	mov	r5, r6
 8008b86:	e7e7      	b.n	8008b58 <_realloc_r+0x1c>

08008b88 <_sbrk_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	; (8008ba4 <_sbrk_r+0x1c>)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f8 facc 	bl	8001130 <_sbrk>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_sbrk_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_sbrk_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20001508 	.word	0x20001508

08008ba8 <__malloc_lock>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	; (8008bb0 <__malloc_lock+0x8>)
 8008baa:	f000 b811 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008bae:	bf00      	nop
 8008bb0:	20001510 	.word	0x20001510

08008bb4 <__malloc_unlock>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	; (8008bbc <__malloc_unlock+0x8>)
 8008bb6:	f000 b80c 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20001510 	.word	0x20001510

08008bc0 <_malloc_usable_size_r>:
 8008bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc4:	1f18      	subs	r0, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bfbc      	itt	lt
 8008bca:	580b      	ldrlt	r3, [r1, r0]
 8008bcc:	18c0      	addlt	r0, r0, r3
 8008bce:	4770      	bx	lr

08008bd0 <__retarget_lock_acquire_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_release_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
